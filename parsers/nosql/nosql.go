// Code generated by pigeon; DO NOT EDIT.

package nosql

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"sync"
	"unicode"
	"unicode/utf8"

	"github.com/pikami/cosmium/parsers"
)

func makeSelectStmt(columns, table, whereClause interface{}, count interface{}, orderList interface{}) (parsers.SelectStmt, error) {
	selectStmt := parsers.SelectStmt{
		SelectItems: columns.([]parsers.SelectItem),
		Table:       table.(parsers.Table),
	}

	switch v := whereClause.(type) {
	case parsers.ComparisonExpression, parsers.LogicalExpression, parsers.Constant, parsers.SelectItem:
		selectStmt.Filters = v
	}

	if n, ok := count.(int); ok {
		selectStmt.Count = n
	}

	if orderExpressions, ok := orderList.([]parsers.OrderExpression); ok {
		selectStmt.OrderExpressions = orderExpressions
	}

	return selectStmt, nil
}

func makeSelectItem(name interface{}, path interface{}, selectItemType parsers.SelectItemType) (parsers.SelectItem, error) {
	ps := path.([]interface{})

	paths := make([]string, 1)
	paths[0] = name.(string)
	for _, p := range ps {
		paths = append(paths, p.(string))
	}

	return parsers.SelectItem{Path: paths, Type: selectItemType}, nil
}

func makeColumnList(column interface{}, other_columns interface{}) ([]parsers.SelectItem, error) {
	collsAsArray := other_columns.([]interface{})
	columnList := make([]parsers.SelectItem, len(collsAsArray)+1)
	columnList[0] = column.(parsers.SelectItem)

	for i, v := range collsAsArray {
		if col, ok := v.(parsers.SelectItem); ok {
			columnList[i+1] = col
		}
	}

	return columnList, nil
}

func makeSelectArray(columns interface{}) (parsers.SelectItem, error) {
	return parsers.SelectItem{
		SelectItems: columns.([]parsers.SelectItem),
		Type:        parsers.SelectItemTypeArray,
	}, nil
}

func makeSelectObject(field interface{}, other_fields interface{}) (parsers.SelectItem, error) {
	fieldsAsArray := other_fields.([]interface{})
	fieldsList := make([]parsers.SelectItem, len(fieldsAsArray)+1)
	fieldsList[0] = field.(parsers.SelectItem)

	for i, v := range fieldsAsArray {
		if col, ok := v.(parsers.SelectItem); ok {
			fieldsList[i+1] = col
		}
	}

	return parsers.SelectItem{
		SelectItems: fieldsList,
		Type:        parsers.SelectItemTypeObject,
	}, nil
}

func makeOrderByClause(ex1 interface{}, others interface{}) ([]parsers.OrderExpression, error) {
	othersArray := others.([]interface{})
	orderList := make([]parsers.OrderExpression, len(othersArray)+1)
	orderList[0] = ex1.(parsers.OrderExpression)

	for i, v := range othersArray {
		if col, ok := v.(parsers.OrderExpression); ok {
			orderList[i+1] = col
		}
	}

	return orderList, nil
}

func makeOrderExpression(field interface{}, order interface{}) (parsers.OrderExpression, error) {
	value := parsers.OrderExpression{
		SelectItem: field.(parsers.SelectItem),
		Direction:  parsers.OrderDirectionAsc,
	}

	if orderValue, ok := order.(parsers.OrderDirection); ok {
		value.Direction = orderValue
	}

	return value, nil
}

func createFunctionCall(functionType parsers.FunctionCallType, arguments []interface{}) (parsers.FunctionCall, error) {
	return parsers.FunctionCall{Type: functionType, Arguments: arguments}, nil
}

func joinStrings(array []interface{}) string {
	var stringsArray []string
	for _, elem := range array {
		str, ok := elem.(string)
		if !ok {
			continue
		}
		stringsArray = append(stringsArray, str)
	}

	return strings.Join(stringsArray, "")
}

func combineExpressions(ex1 interface{}, exs interface{}, operation parsers.LogicalExpressionType) (interface{}, error) {
	if exs == nil || len(exs.([]interface{})) < 1 {
		return ex1, nil
	}

	return parsers.LogicalExpression{
		Expressions: append([]interface{}{ex1}, exs.([]interface{})...),
		Operation:   operation,
	}, nil
}

var g = &grammar{
	rules: []*rule{
		{
			name: "Input",
			pos:  position{line: 135, col: 1, offset: 3762},
			expr: &actionExpr{
				pos: position{line: 135, col: 10, offset: 3771},
				run: (*parser).callonInput1,
				expr: &labeledExpr{
					pos:   position{line: 135, col: 10, offset: 3771},
					label: "selectStmt",
					expr: &ruleRefExpr{
						pos:  position{line: 135, col: 21, offset: 3782},
						name: "SelectStmt",
					},
				},
			},
		},
		{
			name: "SelectStmt",
			pos:  position{line: 139, col: 1, offset: 3825},
			expr: &actionExpr{
				pos: position{line: 139, col: 15, offset: 3839},
				run: (*parser).callonSelectStmt1,
				expr: &seqExpr{
					pos: position{line: 139, col: 15, offset: 3839},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 139, col: 15, offset: 3839},
							name: "Select",
						},
						&ruleRefExpr{
							pos:  position{line: 139, col: 22, offset: 3846},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 139, col: 25, offset: 3849},
							label: "topClause",
							expr: &zeroOrOneExpr{
								pos: position{line: 139, col: 35, offset: 3859},
								expr: &ruleRefExpr{
									pos:  position{line: 139, col: 35, offset: 3859},
									name: "TopClause",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 139, col: 46, offset: 3870},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 139, col: 49, offset: 3873},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 139, col: 57, offset: 3881},
								name: "Selection",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 139, col: 67, offset: 3891},
							name: "ws",
						},
						&ruleRefExpr{
							pos:  position{line: 140, col: 5, offset: 3898},
							name: "From",
						},
						&ruleRefExpr{
							pos:  position{line: 140, col: 10, offset: 3903},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 140, col: 13, offset: 3906},
							label: "table",
							expr: &ruleRefExpr{
								pos:  position{line: 140, col: 19, offset: 3912},
								name: "TableName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 140, col: 29, offset: 3922},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 141, col: 5, offset: 3929},
							label: "whereClause",
							expr: &zeroOrOneExpr{
								pos: position{line: 141, col: 17, offset: 3941},
								expr: &actionExpr{
									pos: position{line: 141, col: 18, offset: 3942},
									run: (*parser).callonSelectStmt19,
									expr: &seqExpr{
										pos: position{line: 141, col: 18, offset: 3942},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 141, col: 18, offset: 3942},
												name: "ws",
											},
											&ruleRefExpr{
												pos:  position{line: 141, col: 21, offset: 3945},
												name: "Where",
											},
											&ruleRefExpr{
												pos:  position{line: 141, col: 27, offset: 3951},
												name: "ws",
											},
											&labeledExpr{
												pos:   position{line: 141, col: 30, offset: 3954},
												label: "condition",
												expr: &ruleRefExpr{
													pos:  position{line: 141, col: 40, offset: 3964},
													name: "Condition",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 142, col: 5, offset: 4006},
							label: "orderByClause",
							expr: &zeroOrOneExpr{
								pos: position{line: 142, col: 19, offset: 4020},
								expr: &ruleRefExpr{
									pos:  position{line: 142, col: 19, offset: 4020},
									name: "OrderByClause",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TopClause",
			pos:  position{line: 146, col: 1, offset: 4121},
			expr: &actionExpr{
				pos: position{line: 146, col: 14, offset: 4134},
				run: (*parser).callonTopClause1,
				expr: &seqExpr{
					pos: position{line: 146, col: 14, offset: 4134},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 146, col: 14, offset: 4134},
							name: "Top",
						},
						&ruleRefExpr{
							pos:  position{line: 146, col: 18, offset: 4138},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 146, col: 21, offset: 4141},
							label: "count",
							expr: &ruleRefExpr{
								pos:  position{line: 146, col: 27, offset: 4147},
								name: "Integer",
							},
						},
					},
				},
			},
		},
		{
			name: "Selection",
			pos:  position{line: 150, col: 1, offset: 4182},
			expr: &choiceExpr{
				pos: position{line: 150, col: 14, offset: 4195},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 150, col: 14, offset: 4195},
						name: "SelectValueSpec",
					},
					&ruleRefExpr{
						pos:  position{line: 150, col: 32, offset: 4213},
						name: "ColumnList",
					},
					&ruleRefExpr{
						pos:  position{line: 150, col: 45, offset: 4226},
						name: "SelectAsterisk",
					},
				},
			},
		},
		{
			name: "SelectAsterisk",
			pos:  position{line: 152, col: 1, offset: 4242},
			expr: &actionExpr{
				pos: position{line: 152, col: 19, offset: 4260},
				run: (*parser).callonSelectAsterisk1,
				expr: &litMatcher{
					pos:        position{line: 152, col: 19, offset: 4260},
					val:        "*",
					ignoreCase: false,
					want:       "\"*\"",
				},
			},
		},
		{
			name: "ColumnList",
			pos:  position{line: 158, col: 1, offset: 4455},
			expr: &actionExpr{
				pos: position{line: 158, col: 15, offset: 4469},
				run: (*parser).callonColumnList1,
				expr: &seqExpr{
					pos: position{line: 158, col: 15, offset: 4469},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 158, col: 15, offset: 4469},
							label: "column",
							expr: &ruleRefExpr{
								pos:  position{line: 158, col: 22, offset: 4476},
								name: "SelectItem",
							},
						},
						&labeledExpr{
							pos:   position{line: 158, col: 33, offset: 4487},
							label: "other_columns",
							expr: &zeroOrMoreExpr{
								pos: position{line: 158, col: 47, offset: 4501},
								expr: &actionExpr{
									pos: position{line: 158, col: 48, offset: 4502},
									run: (*parser).callonColumnList7,
									expr: &seqExpr{
										pos: position{line: 158, col: 48, offset: 4502},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 158, col: 48, offset: 4502},
												name: "ws",
											},
											&litMatcher{
												pos:        position{line: 158, col: 51, offset: 4505},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&ruleRefExpr{
												pos:  position{line: 158, col: 55, offset: 4509},
												name: "ws",
											},
											&labeledExpr{
												pos:   position{line: 158, col: 58, offset: 4512},
												label: "coll",
												expr: &ruleRefExpr{
													pos:  position{line: 158, col: 63, offset: 4517},
													name: "SelectItem",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SelectValueSpec",
			pos:  position{line: 162, col: 1, offset: 4604},
			expr: &actionExpr{
				pos: position{line: 162, col: 20, offset: 4623},
				run: (*parser).callonSelectValueSpec1,
				expr: &seqExpr{
					pos: position{line: 162, col: 20, offset: 4623},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 162, col: 20, offset: 4623},
							val:        "value",
							ignoreCase: true,
							want:       "\"VALUE\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 162, col: 29, offset: 4632},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 162, col: 32, offset: 4635},
							label: "column",
							expr: &ruleRefExpr{
								pos:  position{line: 162, col: 39, offset: 4642},
								name: "SelectItem",
							},
						},
					},
				},
			},
		},
		{
			name: "TableName",
			pos:  position{line: 168, col: 1, offset: 4796},
			expr: &actionExpr{
				pos: position{line: 168, col: 14, offset: 4809},
				run: (*parser).callonTableName1,
				expr: &labeledExpr{
					pos:   position{line: 168, col: 14, offset: 4809},
					label: "key",
					expr: &ruleRefExpr{
						pos:  position{line: 168, col: 18, offset: 4813},
						name: "Identifier",
					},
				},
			},
		},
		{
			name: "SelectArray",
			pos:  position{line: 172, col: 1, offset: 4880},
			expr: &actionExpr{
				pos: position{line: 172, col: 16, offset: 4895},
				run: (*parser).callonSelectArray1,
				expr: &seqExpr{
					pos: position{line: 172, col: 16, offset: 4895},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 172, col: 16, offset: 4895},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&ruleRefExpr{
							pos:  position{line: 172, col: 20, offset: 4899},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 172, col: 23, offset: 4902},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 172, col: 31, offset: 4910},
								name: "ColumnList",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 172, col: 42, offset: 4921},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 172, col: 45, offset: 4924},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "SelectObject",
			pos:  position{line: 176, col: 1, offset: 4969},
			expr: &actionExpr{
				pos: position{line: 176, col: 17, offset: 4985},
				run: (*parser).callonSelectObject1,
				expr: &seqExpr{
					pos: position{line: 176, col: 17, offset: 4985},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 176, col: 17, offset: 4985},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&ruleRefExpr{
							pos:  position{line: 176, col: 21, offset: 4989},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 176, col: 24, offset: 4992},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 176, col: 30, offset: 4998},
								name: "SelectObjectField",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 176, col: 48, offset: 5016},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 176, col: 51, offset: 5019},
							label: "other_fields",
							expr: &zeroOrMoreExpr{
								pos: position{line: 176, col: 64, offset: 5032},
								expr: &actionExpr{
									pos: position{line: 176, col: 65, offset: 5033},
									run: (*parser).callonSelectObject10,
									expr: &seqExpr{
										pos: position{line: 176, col: 65, offset: 5033},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 176, col: 65, offset: 5033},
												name: "ws",
											},
											&litMatcher{
												pos:        position{line: 176, col: 68, offset: 5036},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&ruleRefExpr{
												pos:  position{line: 176, col: 72, offset: 5040},
												name: "ws",
											},
											&labeledExpr{
												pos:   position{line: 176, col: 75, offset: 5043},
												label: "coll",
												expr: &ruleRefExpr{
													pos:  position{line: 176, col: 80, offset: 5048},
													name: "SelectObjectField",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 176, col: 120, offset: 5088},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 176, col: 123, offset: 5091},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "SelectObjectField",
			pos:  position{line: 180, col: 1, offset: 5149},
			expr: &actionExpr{
				pos: position{line: 180, col: 22, offset: 5170},
				run: (*parser).callonSelectObjectField1,
				expr: &seqExpr{
					pos: position{line: 180, col: 22, offset: 5170},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 180, col: 22, offset: 5170},
							label: "name",
							expr: &choiceExpr{
								pos: position{line: 180, col: 28, offset: 5176},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 180, col: 28, offset: 5176},
										name: "Identifier",
									},
									&actionExpr{
										pos: position{line: 180, col: 41, offset: 5189},
										run: (*parser).callonSelectObjectField6,
										expr: &seqExpr{
											pos: position{line: 180, col: 41, offset: 5189},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 180, col: 41, offset: 5189},
													val:        "\"",
													ignoreCase: false,
													want:       "\"\\\"\"",
												},
												&labeledExpr{
													pos:   position{line: 180, col: 46, offset: 5194},
													label: "key",
													expr: &ruleRefExpr{
														pos:  position{line: 180, col: 50, offset: 5198},
														name: "Identifier",
													},
												},
												&litMatcher{
													pos:        position{line: 180, col: 61, offset: 5209},
													val:        "\"",
													ignoreCase: false,
													want:       "\"\\\"\"",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 180, col: 87, offset: 5235},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 180, col: 90, offset: 5238},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&ruleRefExpr{
							pos:  position{line: 180, col: 94, offset: 5242},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 180, col: 97, offset: 5245},
							label: "selectItem",
							expr: &ruleRefExpr{
								pos:  position{line: 180, col: 108, offset: 5256},
								name: "SelectItem",
							},
						},
					},
				},
			},
		},
		{
			name: "SelectProperty",
			pos:  position{line: 186, col: 1, offset: 5362},
			expr: &actionExpr{
				pos: position{line: 186, col: 19, offset: 5380},
				run: (*parser).callonSelectProperty1,
				expr: &seqExpr{
					pos: position{line: 186, col: 19, offset: 5380},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 186, col: 19, offset: 5380},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 186, col: 24, offset: 5385},
								name: "Identifier",
							},
						},
						&labeledExpr{
							pos:   position{line: 186, col: 35, offset: 5396},
							label: "path",
							expr: &zeroOrMoreExpr{
								pos: position{line: 186, col: 40, offset: 5401},
								expr: &choiceExpr{
									pos: position{line: 186, col: 41, offset: 5402},
									alternatives: []any{
										&ruleRefExpr{
											pos:  position{line: 186, col: 41, offset: 5402},
											name: "DotFieldAccess",
										},
										&ruleRefExpr{
											pos:  position{line: 186, col: 58, offset: 5419},
											name: "ArrayFieldAccess",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SelectItem",
			pos:  position{line: 190, col: 1, offset: 5510},
			expr: &actionExpr{
				pos: position{line: 190, col: 15, offset: 5524},
				run: (*parser).callonSelectItem1,
				expr: &seqExpr{
					pos: position{line: 190, col: 15, offset: 5524},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 190, col: 15, offset: 5524},
							label: "selectItem",
							expr: &choiceExpr{
								pos: position{line: 190, col: 27, offset: 5536},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 190, col: 27, offset: 5536},
										name: "Literal",
									},
									&ruleRefExpr{
										pos:  position{line: 190, col: 37, offset: 5546},
										name: "FunctionCall",
									},
									&ruleRefExpr{
										pos:  position{line: 190, col: 52, offset: 5561},
										name: "SelectArray",
									},
									&ruleRefExpr{
										pos:  position{line: 190, col: 66, offset: 5575},
										name: "SelectObject",
									},
									&ruleRefExpr{
										pos:  position{line: 190, col: 81, offset: 5590},
										name: "SelectProperty",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 190, col: 97, offset: 5606},
							label: "asClause",
							expr: &zeroOrOneExpr{
								pos: position{line: 190, col: 106, offset: 5615},
								expr: &ruleRefExpr{
									pos:  position{line: 190, col: 106, offset: 5615},
									name: "AsClause",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AsClause",
			pos:  position{line: 214, col: 1, offset: 6213},
			expr: &actionExpr{
				pos: position{line: 214, col: 13, offset: 6225},
				run: (*parser).callonAsClause1,
				expr: &seqExpr{
					pos: position{line: 214, col: 13, offset: 6225},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 214, col: 13, offset: 6225},
							name: "ws",
						},
						&ruleRefExpr{
							pos:  position{line: 214, col: 16, offset: 6228},
							name: "As",
						},
						&ruleRefExpr{
							pos:  position{line: 214, col: 19, offset: 6231},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 214, col: 22, offset: 6234},
							label: "alias",
							expr: &ruleRefExpr{
								pos:  position{line: 214, col: 28, offset: 6240},
								name: "Identifier",
							},
						},
					},
				},
			},
		},
		{
			name: "DotFieldAccess",
			pos:  position{line: 216, col: 1, offset: 6274},
			expr: &actionExpr{
				pos: position{line: 216, col: 19, offset: 6292},
				run: (*parser).callonDotFieldAccess1,
				expr: &seqExpr{
					pos: position{line: 216, col: 19, offset: 6292},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 216, col: 19, offset: 6292},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 216, col: 23, offset: 6296},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 216, col: 26, offset: 6299},
								name: "Identifier",
							},
						},
					},
				},
			},
		},
		{
			name: "ArrayFieldAccess",
			pos:  position{line: 220, col: 1, offset: 6334},
			expr: &actionExpr{
				pos: position{line: 220, col: 21, offset: 6354},
				run: (*parser).callonArrayFieldAccess1,
				expr: &seqExpr{
					pos: position{line: 220, col: 21, offset: 6354},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 220, col: 21, offset: 6354},
							val:        "[\"",
							ignoreCase: false,
							want:       "\"[\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 220, col: 27, offset: 6360},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 220, col: 30, offset: 6363},
								name: "Identifier",
							},
						},
						&litMatcher{
							pos:        position{line: 220, col: 41, offset: 6374},
							val:        "\"]",
							ignoreCase: false,
							want:       "\"\\\"]\"",
						},
					},
				},
			},
		},
		{
			name: "Identifier",
			pos:  position{line: 224, col: 1, offset: 6404},
			expr: &actionExpr{
				pos: position{line: 224, col: 15, offset: 6418},
				run: (*parser).callonIdentifier1,
				expr: &seqExpr{
					pos: position{line: 224, col: 15, offset: 6418},
					exprs: []any{
						&charClassMatcher{
							pos:        position{line: 224, col: 15, offset: 6418},
							val:        "[a-zA-Z_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z'},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 224, col: 24, offset: 6427},
							expr: &charClassMatcher{
								pos:        position{line: 224, col: 24, offset: 6427},
								val:        "[a-zA-Z0-9_]",
								chars:      []rune{'_'},
								ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "Condition",
			pos:  position{line: 228, col: 1, offset: 6477},
			expr: &actionExpr{
				pos: position{line: 228, col: 14, offset: 6490},
				run: (*parser).callonCondition1,
				expr: &labeledExpr{
					pos:   position{line: 228, col: 14, offset: 6490},
					label: "expression",
					expr: &ruleRefExpr{
						pos:  position{line: 228, col: 25, offset: 6501},
						name: "OrExpression",
					},
				},
			},
		},
		{
			name: "OrExpression",
			pos:  position{line: 232, col: 1, offset: 6546},
			expr: &actionExpr{
				pos: position{line: 232, col: 17, offset: 6562},
				run: (*parser).callonOrExpression1,
				expr: &seqExpr{
					pos: position{line: 232, col: 17, offset: 6562},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 232, col: 17, offset: 6562},
							label: "ex1",
							expr: &ruleRefExpr{
								pos:  position{line: 232, col: 21, offset: 6566},
								name: "AndExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 232, col: 35, offset: 6580},
							label: "ex2",
							expr: &zeroOrMoreExpr{
								pos: position{line: 232, col: 39, offset: 6584},
								expr: &actionExpr{
									pos: position{line: 232, col: 40, offset: 6585},
									run: (*parser).callonOrExpression7,
									expr: &seqExpr{
										pos: position{line: 232, col: 40, offset: 6585},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 232, col: 40, offset: 6585},
												name: "ws",
											},
											&ruleRefExpr{
												pos:  position{line: 232, col: 43, offset: 6588},
												name: "Or",
											},
											&ruleRefExpr{
												pos:  position{line: 232, col: 46, offset: 6591},
												name: "ws",
											},
											&labeledExpr{
												pos:   position{line: 232, col: 49, offset: 6594},
												label: "ex",
												expr: &ruleRefExpr{
													pos:  position{line: 232, col: 52, offset: 6597},
													name: "AndExpression",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AndExpression",
			pos:  position{line: 236, col: 1, offset: 6710},
			expr: &actionExpr{
				pos: position{line: 236, col: 18, offset: 6727},
				run: (*parser).callonAndExpression1,
				expr: &seqExpr{
					pos: position{line: 236, col: 18, offset: 6727},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 236, col: 18, offset: 6727},
							label: "ex1",
							expr: &ruleRefExpr{
								pos:  position{line: 236, col: 22, offset: 6731},
								name: "ComparisonExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 236, col: 43, offset: 6752},
							label: "ex2",
							expr: &zeroOrMoreExpr{
								pos: position{line: 236, col: 47, offset: 6756},
								expr: &actionExpr{
									pos: position{line: 236, col: 48, offset: 6757},
									run: (*parser).callonAndExpression7,
									expr: &seqExpr{
										pos: position{line: 236, col: 48, offset: 6757},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 236, col: 48, offset: 6757},
												name: "ws",
											},
											&ruleRefExpr{
												pos:  position{line: 236, col: 51, offset: 6760},
												name: "And",
											},
											&ruleRefExpr{
												pos:  position{line: 236, col: 55, offset: 6764},
												name: "ws",
											},
											&labeledExpr{
												pos:   position{line: 236, col: 58, offset: 6767},
												label: "ex",
												expr: &ruleRefExpr{
													pos:  position{line: 236, col: 61, offset: 6770},
													name: "ComparisonExpression",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ComparisonExpression",
			pos:  position{line: 240, col: 1, offset: 6891},
			expr: &choiceExpr{
				pos: position{line: 240, col: 25, offset: 6915},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 240, col: 25, offset: 6915},
						run: (*parser).callonComparisonExpression2,
						expr: &seqExpr{
							pos: position{line: 240, col: 25, offset: 6915},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 240, col: 25, offset: 6915},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&ruleRefExpr{
									pos:  position{line: 240, col: 29, offset: 6919},
									name: "ws",
								},
								&labeledExpr{
									pos:   position{line: 240, col: 32, offset: 6922},
									label: "ex",
									expr: &ruleRefExpr{
										pos:  position{line: 240, col: 35, offset: 6925},
										name: "OrExpression",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 240, col: 48, offset: 6938},
									name: "ws",
								},
								&litMatcher{
									pos:        position{line: 240, col: 51, offset: 6941},
									val:        ")",
									ignoreCase: false,
									want:       "\")\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 241, col: 7, offset: 6970},
						run: (*parser).callonComparisonExpression10,
						expr: &seqExpr{
							pos: position{line: 241, col: 7, offset: 6970},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 241, col: 7, offset: 6970},
									label: "left",
									expr: &ruleRefExpr{
										pos:  position{line: 241, col: 12, offset: 6975},
										name: "SelectItem",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 241, col: 23, offset: 6986},
									name: "ws",
								},
								&labeledExpr{
									pos:   position{line: 241, col: 26, offset: 6989},
									label: "op",
									expr: &ruleRefExpr{
										pos:  position{line: 241, col: 29, offset: 6992},
										name: "ComparisonOperator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 241, col: 48, offset: 7011},
									name: "ws",
								},
								&labeledExpr{
									pos:   position{line: 241, col: 51, offset: 7014},
									label: "right",
									expr: &ruleRefExpr{
										pos:  position{line: 241, col: 57, offset: 7020},
										name: "SelectItem",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 243, col: 5, offset: 7127},
						run: (*parser).callonComparisonExpression20,
						expr: &labeledExpr{
							pos:   position{line: 243, col: 5, offset: 7127},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 243, col: 8, offset: 7130},
								name: "BooleanLiteral",
							},
						},
					},
					&actionExpr{
						pos: position{line: 244, col: 5, offset: 7168},
						run: (*parser).callonComparisonExpression23,
						expr: &labeledExpr{
							pos:   position{line: 244, col: 5, offset: 7168},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 244, col: 8, offset: 7171},
								name: "SelectItem",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderByClause",
			pos:  position{line: 246, col: 1, offset: 7202},
			expr: &actionExpr{
				pos: position{line: 246, col: 18, offset: 7219},
				run: (*parser).callonOrderByClause1,
				expr: &seqExpr{
					pos: position{line: 246, col: 18, offset: 7219},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 246, col: 18, offset: 7219},
							name: "OrderBy",
						},
						&ruleRefExpr{
							pos:  position{line: 246, col: 26, offset: 7227},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 246, col: 29, offset: 7230},
							label: "ex1",
							expr: &ruleRefExpr{
								pos:  position{line: 246, col: 33, offset: 7234},
								name: "OrderExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 246, col: 49, offset: 7250},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 246, col: 56, offset: 7257},
								expr: &actionExpr{
									pos: position{line: 246, col: 57, offset: 7258},
									run: (*parser).callonOrderByClause9,
									expr: &seqExpr{
										pos: position{line: 246, col: 57, offset: 7258},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 246, col: 57, offset: 7258},
												name: "ws",
											},
											&litMatcher{
												pos:        position{line: 246, col: 60, offset: 7261},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&ruleRefExpr{
												pos:  position{line: 246, col: 64, offset: 7265},
												name: "ws",
											},
											&labeledExpr{
												pos:   position{line: 246, col: 67, offset: 7268},
												label: "ex",
												expr: &ruleRefExpr{
													pos:  position{line: 246, col: 70, offset: 7271},
													name: "OrderExpression",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OrderExpression",
			pos:  position{line: 250, col: 1, offset: 7355},
			expr: &actionExpr{
				pos: position{line: 250, col: 20, offset: 7374},
				run: (*parser).callonOrderExpression1,
				expr: &seqExpr{
					pos: position{line: 250, col: 20, offset: 7374},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 250, col: 20, offset: 7374},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 250, col: 26, offset: 7380},
								name: "SelectProperty",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 250, col: 41, offset: 7395},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 250, col: 44, offset: 7398},
							label: "order",
							expr: &zeroOrOneExpr{
								pos: position{line: 250, col: 50, offset: 7404},
								expr: &ruleRefExpr{
									pos:  position{line: 250, col: 50, offset: 7404},
									name: "OrderDirection",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OrderDirection",
			pos:  position{line: 254, col: 1, offset: 7470},
			expr: &actionExpr{
				pos: position{line: 254, col: 19, offset: 7488},
				run: (*parser).callonOrderDirection1,
				expr: &choiceExpr{
					pos: position{line: 254, col: 20, offset: 7489},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 254, col: 20, offset: 7489},
							val:        "asc",
							ignoreCase: true,
							want:       "\"ASC\"i",
						},
						&litMatcher{
							pos:        position{line: 254, col: 29, offset: 7498},
							val:        "desc",
							ignoreCase: true,
							want:       "\"DESC\"i",
						},
					},
				},
			},
		},
		{
			name: "Select",
			pos:  position{line: 262, col: 1, offset: 7650},
			expr: &litMatcher{
				pos:        position{line: 262, col: 11, offset: 7660},
				val:        "select",
				ignoreCase: true,
				want:       "\"SELECT\"i",
			},
		},
		{
			name: "Top",
			pos:  position{line: 264, col: 1, offset: 7671},
			expr: &litMatcher{
				pos:        position{line: 264, col: 8, offset: 7678},
				val:        "top",
				ignoreCase: true,
				want:       "\"TOP\"i",
			},
		},
		{
			name: "As",
			pos:  position{line: 266, col: 1, offset: 7686},
			expr: &litMatcher{
				pos:        position{line: 266, col: 7, offset: 7692},
				val:        "as",
				ignoreCase: true,
				want:       "\"AS\"i",
			},
		},
		{
			name: "From",
			pos:  position{line: 268, col: 1, offset: 7699},
			expr: &litMatcher{
				pos:        position{line: 268, col: 9, offset: 7707},
				val:        "from",
				ignoreCase: true,
				want:       "\"FROM\"i",
			},
		},
		{
			name: "Where",
			pos:  position{line: 270, col: 1, offset: 7716},
			expr: &litMatcher{
				pos:        position{line: 270, col: 10, offset: 7725},
				val:        "where",
				ignoreCase: true,
				want:       "\"WHERE\"i",
			},
		},
		{
			name: "And",
			pos:  position{line: 272, col: 1, offset: 7735},
			expr: &litMatcher{
				pos:        position{line: 272, col: 8, offset: 7742},
				val:        "and",
				ignoreCase: true,
				want:       "\"AND\"i",
			},
		},
		{
			name: "Or",
			pos:  position{line: 274, col: 1, offset: 7750},
			expr: &litMatcher{
				pos:        position{line: 274, col: 7, offset: 7756},
				val:        "or",
				ignoreCase: true,
				want:       "\"OR\"i",
			},
		},
		{
			name: "OrderBy",
			pos:  position{line: 276, col: 1, offset: 7763},
			expr: &seqExpr{
				pos: position{line: 276, col: 12, offset: 7774},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 276, col: 12, offset: 7774},
						val:        "order",
						ignoreCase: true,
						want:       "\"ORDER\"i",
					},
					&ruleRefExpr{
						pos:  position{line: 276, col: 21, offset: 7783},
						name: "ws",
					},
					&litMatcher{
						pos:        position{line: 276, col: 24, offset: 7786},
						val:        "by",
						ignoreCase: true,
						want:       "\"BY\"i",
					},
				},
			},
		},
		{
			name: "ComparisonOperator",
			pos:  position{line: 278, col: 1, offset: 7793},
			expr: &actionExpr{
				pos: position{line: 278, col: 23, offset: 7815},
				run: (*parser).callonComparisonOperator1,
				expr: &choiceExpr{
					pos: position{line: 278, col: 24, offset: 7816},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 278, col: 24, offset: 7816},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&litMatcher{
							pos:        position{line: 278, col: 30, offset: 7822},
							val:        "!=",
							ignoreCase: false,
							want:       "\"!=\"",
						},
						&litMatcher{
							pos:        position{line: 278, col: 37, offset: 7829},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&litMatcher{
							pos:        position{line: 278, col: 43, offset: 7835},
							val:        "<=",
							ignoreCase: false,
							want:       "\"<=\"",
						},
						&litMatcher{
							pos:        position{line: 278, col: 50, offset: 7842},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&litMatcher{
							pos:        position{line: 278, col: 56, offset: 7848},
							val:        ">=",
							ignoreCase: false,
							want:       "\">=\"",
						},
					},
				},
			},
		},
		{
			name: "Literal",
			pos:  position{line: 282, col: 1, offset: 7890},
			expr: &choiceExpr{
				pos: position{line: 282, col: 12, offset: 7901},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 282, col: 12, offset: 7901},
						name: "FloatLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 282, col: 27, offset: 7916},
						name: "IntegerLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 282, col: 44, offset: 7933},
						name: "StringLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 282, col: 60, offset: 7949},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 282, col: 77, offset: 7966},
						name: "ParameterConstant",
					},
					&ruleRefExpr{
						pos:  position{line: 282, col: 97, offset: 7986},
						name: "NullConstant",
					},
				},
			},
		},
		{
			name: "ParameterConstant",
			pos:  position{line: 284, col: 1, offset: 8000},
			expr: &actionExpr{
				pos: position{line: 284, col: 22, offset: 8021},
				run: (*parser).callonParameterConstant1,
				expr: &seqExpr{
					pos: position{line: 284, col: 22, offset: 8021},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 284, col: 22, offset: 8021},
							val:        "@",
							ignoreCase: false,
							want:       "\"@\"",
						},
						&ruleRefExpr{
							pos:  position{line: 284, col: 26, offset: 8025},
							name: "Identifier",
						},
					},
				},
			},
		},
		{
			name: "NullConstant",
			pos:  position{line: 287, col: 1, offset: 8141},
			expr: &actionExpr{
				pos: position{line: 287, col: 17, offset: 8157},
				run: (*parser).callonNullConstant1,
				expr: &litMatcher{
					pos:        position{line: 287, col: 17, offset: 8157},
					val:        "null",
					ignoreCase: true,
					want:       "\"null\"i",
				},
			},
		},
		{
			name: "IntegerLiteral",
			pos:  position{line: 291, col: 1, offset: 8215},
			expr: &actionExpr{
				pos: position{line: 291, col: 19, offset: 8233},
				run: (*parser).callonIntegerLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 291, col: 19, offset: 8233},
					label: "number",
					expr: &ruleRefExpr{
						pos:  position{line: 291, col: 26, offset: 8240},
						name: "Integer",
					},
				},
			},
		},
		{
			name: "StringLiteral",
			pos:  position{line: 294, col: 1, offset: 8341},
			expr: &actionExpr{
				pos: position{line: 294, col: 18, offset: 8358},
				run: (*parser).callonStringLiteral1,
				expr: &seqExpr{
					pos: position{line: 294, col: 18, offset: 8358},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 294, col: 18, offset: 8358},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 294, col: 23, offset: 8363},
							label: "chars",
							expr: &zeroOrMoreExpr{
								pos: position{line: 294, col: 29, offset: 8369},
								expr: &ruleRefExpr{
									pos:  position{line: 294, col: 29, offset: 8369},
									name: "StringCharacter",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 294, col: 46, offset: 8386},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "FloatLiteral",
			pos:  position{line: 297, col: 1, offset: 8504},
			expr: &actionExpr{
				pos: position{line: 297, col: 17, offset: 8520},
				run: (*parser).callonFloatLiteral1,
				expr: &seqExpr{
					pos: position{line: 297, col: 17, offset: 8520},
					exprs: []any{
						&oneOrMoreExpr{
							pos: position{line: 297, col: 17, offset: 8520},
							expr: &charClassMatcher{
								pos:        position{line: 297, col: 17, offset: 8520},
								val:        "[0-9]",
								ranges:     []rune{'0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&litMatcher{
							pos:        position{line: 297, col: 23, offset: 8526},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 297, col: 26, offset: 8529},
							expr: &charClassMatcher{
								pos:        position{line: 297, col: 26, offset: 8529},
								val:        "[0-9]",
								ranges:     []rune{'0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "BooleanLiteral",
			pos:  position{line: 301, col: 1, offset: 8685},
			expr: &actionExpr{
				pos: position{line: 301, col: 19, offset: 8703},
				run: (*parser).callonBooleanLiteral1,
				expr: &choiceExpr{
					pos: position{line: 301, col: 20, offset: 8704},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 301, col: 20, offset: 8704},
							val:        "true",
							ignoreCase: true,
							want:       "\"true\"i",
						},
						&litMatcher{
							pos:        position{line: 301, col: 30, offset: 8714},
							val:        "false",
							ignoreCase: true,
							want:       "\"false\"i",
						},
					},
				},
			},
		},
		{
			name: "FunctionCall",
			pos:  position{line: 306, col: 1, offset: 8869},
			expr: &choiceExpr{
				pos: position{line: 306, col: 17, offset: 8885},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 306, col: 17, offset: 8885},
						name: "StringFunctions",
					},
					&ruleRefExpr{
						pos:  position{line: 307, col: 7, offset: 8907},
						name: "TypeCheckingFunctions",
					},
					&ruleRefExpr{
						pos:  position{line: 308, col: 7, offset: 8935},
						name: "ArrayFunctions",
					},
					&ruleRefExpr{
						pos:  position{line: 309, col: 7, offset: 8956},
						name: "InFunction",
					},
				},
			},
		},
		{
			name: "StringFunctions",
			pos:  position{line: 311, col: 1, offset: 8968},
			expr: &choiceExpr{
				pos: position{line: 311, col: 20, offset: 8987},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 311, col: 20, offset: 8987},
						name: "StringEqualsExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 312, col: 7, offset: 9016},
						name: "ToStringExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 313, col: 7, offset: 9041},
						name: "ConcatExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 314, col: 7, offset: 9064},
						name: "ThreeArgumentStringFunctionExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 315, col: 7, offset: 9108},
						name: "UpperExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 316, col: 7, offset: 9130},
						name: "LowerExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 317, col: 7, offset: 9152},
						name: "LeftExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 318, col: 7, offset: 9173},
						name: "LengthExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 319, col: 7, offset: 9196},
						name: "LTrimExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 320, col: 7, offset: 9218},
						name: "ReplaceExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 321, col: 7, offset: 9242},
						name: "ReplicateExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 322, col: 7, offset: 9268},
						name: "ReverseExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 323, col: 7, offset: 9292},
						name: "RightExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 324, col: 7, offset: 9314},
						name: "RTrimExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 325, col: 7, offset: 9336},
						name: "SubstringExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 326, col: 7, offset: 9362},
						name: "TrimExpression",
					},
				},
			},
		},
		{
			name: "TypeCheckingFunctions",
			pos:  position{line: 328, col: 1, offset: 9378},
			expr: &choiceExpr{
				pos: position{line: 328, col: 26, offset: 9403},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 328, col: 26, offset: 9403},
						name: "IsDefined",
					},
					&ruleRefExpr{
						pos:  position{line: 329, col: 7, offset: 9419},
						name: "IsArray",
					},
					&ruleRefExpr{
						pos:  position{line: 330, col: 7, offset: 9433},
						name: "IsBool",
					},
					&ruleRefExpr{
						pos:  position{line: 331, col: 7, offset: 9446},
						name: "IsFiniteNumber",
					},
					&ruleRefExpr{
						pos:  position{line: 332, col: 7, offset: 9467},
						name: "IsInteger",
					},
					&ruleRefExpr{
						pos:  position{line: 333, col: 7, offset: 9483},
						name: "IsNull",
					},
					&ruleRefExpr{
						pos:  position{line: 334, col: 7, offset: 9496},
						name: "IsNumber",
					},
					&ruleRefExpr{
						pos:  position{line: 335, col: 7, offset: 9511},
						name: "IsObject",
					},
					&ruleRefExpr{
						pos:  position{line: 336, col: 7, offset: 9526},
						name: "IsPrimitive",
					},
					&ruleRefExpr{
						pos:  position{line: 337, col: 7, offset: 9544},
						name: "IsString",
					},
				},
			},
		},
		{
			name: "ArrayFunctions",
			pos:  position{line: 339, col: 1, offset: 9554},
			expr: &choiceExpr{
				pos: position{line: 339, col: 19, offset: 9572},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 339, col: 19, offset: 9572},
						name: "ArrayConcatExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 340, col: 7, offset: 9600},
						name: "ArrayLengthExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 341, col: 7, offset: 9628},
						name: "ArraySliceExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 342, col: 7, offset: 9655},
						name: "SetIntersectExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 343, col: 7, offset: 9684},
						name: "SetUnionExpression",
					},
				},
			},
		},
		{
			name: "UpperExpression",
			pos:  position{line: 345, col: 1, offset: 9704},
			expr: &actionExpr{
				pos: position{line: 345, col: 20, offset: 9723},
				run: (*parser).callonUpperExpression1,
				expr: &seqExpr{
					pos: position{line: 345, col: 20, offset: 9723},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 345, col: 20, offset: 9723},
							val:        "upper",
							ignoreCase: true,
							want:       "\"UPPER\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 345, col: 29, offset: 9732},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 345, col: 32, offset: 9735},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&labeledExpr{
							pos:   position{line: 345, col: 36, offset: 9739},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 345, col: 39, offset: 9742},
								name: "SelectItem",
							},
						},
						&litMatcher{
							pos:        position{line: 345, col: 50, offset: 9753},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "LowerExpression",
			pos:  position{line: 349, col: 1, offset: 9838},
			expr: &actionExpr{
				pos: position{line: 349, col: 20, offset: 9857},
				run: (*parser).callonLowerExpression1,
				expr: &seqExpr{
					pos: position{line: 349, col: 20, offset: 9857},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 349, col: 20, offset: 9857},
							val:        "lower",
							ignoreCase: true,
							want:       "\"LOWER\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 349, col: 29, offset: 9866},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 349, col: 32, offset: 9869},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&labeledExpr{
							pos:   position{line: 349, col: 36, offset: 9873},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 349, col: 39, offset: 9876},
								name: "SelectItem",
							},
						},
						&litMatcher{
							pos:        position{line: 349, col: 50, offset: 9887},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "StringEqualsExpression",
			pos:  position{line: 353, col: 1, offset: 9972},
			expr: &actionExpr{
				pos: position{line: 353, col: 27, offset: 9998},
				run: (*parser).callonStringEqualsExpression1,
				expr: &seqExpr{
					pos: position{line: 353, col: 27, offset: 9998},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 353, col: 27, offset: 9998},
							val:        "stringequals",
							ignoreCase: true,
							want:       "\"STRINGEQUALS\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 353, col: 43, offset: 10014},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 353, col: 46, offset: 10017},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 353, col: 50, offset: 10021},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 353, col: 53, offset: 10024},
							label: "ex1",
							expr: &ruleRefExpr{
								pos:  position{line: 353, col: 57, offset: 10028},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 353, col: 68, offset: 10039},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 353, col: 71, offset: 10042},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 353, col: 75, offset: 10046},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 353, col: 78, offset: 10049},
							label: "ex2",
							expr: &ruleRefExpr{
								pos:  position{line: 353, col: 82, offset: 10053},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 353, col: 93, offset: 10064},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 353, col: 96, offset: 10067},
							label: "ignoreCase",
							expr: &zeroOrOneExpr{
								pos: position{line: 353, col: 107, offset: 10078},
								expr: &actionExpr{
									pos: position{line: 353, col: 108, offset: 10079},
									run: (*parser).callonStringEqualsExpression17,
									expr: &seqExpr{
										pos: position{line: 353, col: 108, offset: 10079},
										exprs: []any{
											&litMatcher{
												pos:        position{line: 353, col: 108, offset: 10079},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&ruleRefExpr{
												pos:  position{line: 353, col: 112, offset: 10083},
												name: "ws",
											},
											&labeledExpr{
												pos:   position{line: 353, col: 115, offset: 10086},
												label: "boolean",
												expr: &ruleRefExpr{
													pos:  position{line: 353, col: 123, offset: 10094},
													name: "SelectItem",
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 353, col: 160, offset: 10131},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "ToStringExpression",
			pos:  position{line: 357, col: 1, offset: 10241},
			expr: &actionExpr{
				pos: position{line: 357, col: 23, offset: 10263},
				run: (*parser).callonToStringExpression1,
				expr: &seqExpr{
					pos: position{line: 357, col: 23, offset: 10263},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 357, col: 23, offset: 10263},
							val:        "tostring",
							ignoreCase: true,
							want:       "\"TOSTRING\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 357, col: 35, offset: 10275},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 357, col: 38, offset: 10278},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 357, col: 42, offset: 10282},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 357, col: 45, offset: 10285},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 357, col: 48, offset: 10288},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 357, col: 59, offset: 10299},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 357, col: 62, offset: 10302},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "ConcatExpression",
			pos:  position{line: 361, col: 1, offset: 10390},
			expr: &actionExpr{
				pos: position{line: 361, col: 21, offset: 10410},
				run: (*parser).callonConcatExpression1,
				expr: &seqExpr{
					pos: position{line: 361, col: 21, offset: 10410},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 361, col: 21, offset: 10410},
							val:        "concat",
							ignoreCase: true,
							want:       "\"CONCAT\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 361, col: 31, offset: 10420},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 361, col: 34, offset: 10423},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 361, col: 38, offset: 10427},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 361, col: 41, offset: 10430},
							label: "ex1",
							expr: &ruleRefExpr{
								pos:  position{line: 361, col: 45, offset: 10434},
								name: "SelectItem",
							},
						},
						&labeledExpr{
							pos:   position{line: 361, col: 56, offset: 10445},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 361, col: 63, offset: 10452},
								expr: &actionExpr{
									pos: position{line: 361, col: 64, offset: 10453},
									run: (*parser).callonConcatExpression11,
									expr: &seqExpr{
										pos: position{line: 361, col: 64, offset: 10453},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 361, col: 64, offset: 10453},
												name: "ws",
											},
											&litMatcher{
												pos:        position{line: 361, col: 67, offset: 10456},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&ruleRefExpr{
												pos:  position{line: 361, col: 71, offset: 10460},
												name: "ws",
											},
											&labeledExpr{
												pos:   position{line: 361, col: 74, offset: 10463},
												label: "ex",
												expr: &ruleRefExpr{
													pos:  position{line: 361, col: 77, offset: 10466},
													name: "SelectItem",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 361, col: 109, offset: 10498},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 361, col: 112, offset: 10501},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "LeftExpression",
			pos:  position{line: 366, col: 1, offset: 10650},
			expr: &actionExpr{
				pos: position{line: 366, col: 19, offset: 10668},
				run: (*parser).callonLeftExpression1,
				expr: &seqExpr{
					pos: position{line: 366, col: 19, offset: 10668},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 366, col: 19, offset: 10668},
							val:        "left",
							ignoreCase: true,
							want:       "\"LEFT\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 366, col: 27, offset: 10676},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 366, col: 30, offset: 10679},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 366, col: 34, offset: 10683},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 366, col: 37, offset: 10686},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 366, col: 40, offset: 10689},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 366, col: 51, offset: 10700},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 366, col: 54, offset: 10703},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 366, col: 58, offset: 10707},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 366, col: 61, offset: 10710},
							label: "length",
							expr: &ruleRefExpr{
								pos:  position{line: 366, col: 68, offset: 10717},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 366, col: 79, offset: 10728},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 366, col: 82, offset: 10731},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "LengthExpression",
			pos:  position{line: 370, col: 1, offset: 10823},
			expr: &actionExpr{
				pos: position{line: 370, col: 21, offset: 10843},
				run: (*parser).callonLengthExpression1,
				expr: &seqExpr{
					pos: position{line: 370, col: 21, offset: 10843},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 370, col: 21, offset: 10843},
							val:        "length",
							ignoreCase: true,
							want:       "\"LENGTH\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 370, col: 31, offset: 10853},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 370, col: 34, offset: 10856},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 370, col: 38, offset: 10860},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 370, col: 41, offset: 10863},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 370, col: 44, offset: 10866},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 370, col: 55, offset: 10877},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 370, col: 58, offset: 10880},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "LTrimExpression",
			pos:  position{line: 374, col: 1, offset: 10966},
			expr: &actionExpr{
				pos: position{line: 374, col: 20, offset: 10985},
				run: (*parser).callonLTrimExpression1,
				expr: &seqExpr{
					pos: position{line: 374, col: 20, offset: 10985},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 374, col: 20, offset: 10985},
							val:        "ltrim",
							ignoreCase: true,
							want:       "\"LTRIM\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 374, col: 29, offset: 10994},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 374, col: 32, offset: 10997},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 374, col: 36, offset: 11001},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 374, col: 39, offset: 11004},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 374, col: 42, offset: 11007},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 374, col: 53, offset: 11018},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 374, col: 56, offset: 11021},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "ReplaceExpression",
			pos:  position{line: 378, col: 1, offset: 11106},
			expr: &actionExpr{
				pos: position{line: 378, col: 22, offset: 11127},
				run: (*parser).callonReplaceExpression1,
				expr: &seqExpr{
					pos: position{line: 378, col: 22, offset: 11127},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 378, col: 22, offset: 11127},
							val:        "replace",
							ignoreCase: true,
							want:       "\"REPLACE\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 378, col: 33, offset: 11138},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 378, col: 36, offset: 11141},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 378, col: 40, offset: 11145},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 378, col: 43, offset: 11148},
							label: "ex1",
							expr: &ruleRefExpr{
								pos:  position{line: 378, col: 47, offset: 11152},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 378, col: 58, offset: 11163},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 378, col: 61, offset: 11166},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 378, col: 65, offset: 11170},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 378, col: 68, offset: 11173},
							label: "ex2",
							expr: &ruleRefExpr{
								pos:  position{line: 378, col: 72, offset: 11177},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 378, col: 83, offset: 11188},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 378, col: 86, offset: 11191},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 378, col: 90, offset: 11195},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 378, col: 93, offset: 11198},
							label: "ex3",
							expr: &ruleRefExpr{
								pos:  position{line: 378, col: 97, offset: 11202},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 378, col: 108, offset: 11213},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 378, col: 111, offset: 11216},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "ReplicateExpression",
			pos:  position{line: 382, col: 1, offset: 11314},
			expr: &actionExpr{
				pos: position{line: 382, col: 24, offset: 11337},
				run: (*parser).callonReplicateExpression1,
				expr: &seqExpr{
					pos: position{line: 382, col: 24, offset: 11337},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 382, col: 24, offset: 11337},
							val:        "replicate",
							ignoreCase: true,
							want:       "\"REPLICATE\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 382, col: 37, offset: 11350},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 382, col: 40, offset: 11353},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 382, col: 44, offset: 11357},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 382, col: 47, offset: 11360},
							label: "ex1",
							expr: &ruleRefExpr{
								pos:  position{line: 382, col: 51, offset: 11364},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 382, col: 62, offset: 11375},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 382, col: 65, offset: 11378},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 382, col: 69, offset: 11382},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 382, col: 72, offset: 11385},
							label: "ex2",
							expr: &ruleRefExpr{
								pos:  position{line: 382, col: 76, offset: 11389},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 382, col: 87, offset: 11400},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 382, col: 90, offset: 11403},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "ReverseExpression",
			pos:  position{line: 386, col: 1, offset: 11498},
			expr: &actionExpr{
				pos: position{line: 386, col: 22, offset: 11519},
				run: (*parser).callonReverseExpression1,
				expr: &seqExpr{
					pos: position{line: 386, col: 22, offset: 11519},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 386, col: 22, offset: 11519},
							val:        "reverse",
							ignoreCase: true,
							want:       "\"REVERSE\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 386, col: 33, offset: 11530},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 386, col: 36, offset: 11533},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 386, col: 40, offset: 11537},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 386, col: 43, offset: 11540},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 386, col: 46, offset: 11543},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 386, col: 57, offset: 11554},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 386, col: 60, offset: 11557},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "RightExpression",
			pos:  position{line: 390, col: 1, offset: 11644},
			expr: &actionExpr{
				pos: position{line: 390, col: 20, offset: 11663},
				run: (*parser).callonRightExpression1,
				expr: &seqExpr{
					pos: position{line: 390, col: 20, offset: 11663},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 390, col: 20, offset: 11663},
							val:        "right",
							ignoreCase: true,
							want:       "\"RIGHT\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 390, col: 29, offset: 11672},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 390, col: 32, offset: 11675},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 390, col: 36, offset: 11679},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 390, col: 39, offset: 11682},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 390, col: 42, offset: 11685},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 390, col: 53, offset: 11696},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 390, col: 56, offset: 11699},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 390, col: 60, offset: 11703},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 390, col: 63, offset: 11706},
							label: "length",
							expr: &ruleRefExpr{
								pos:  position{line: 390, col: 70, offset: 11713},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 390, col: 81, offset: 11724},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 390, col: 84, offset: 11727},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "RTrimExpression",
			pos:  position{line: 394, col: 1, offset: 11820},
			expr: &actionExpr{
				pos: position{line: 394, col: 20, offset: 11839},
				run: (*parser).callonRTrimExpression1,
				expr: &seqExpr{
					pos: position{line: 394, col: 20, offset: 11839},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 394, col: 20, offset: 11839},
							val:        "rtrim",
							ignoreCase: true,
							want:       "\"RTRIM\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 394, col: 29, offset: 11848},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 394, col: 32, offset: 11851},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 394, col: 36, offset: 11855},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 394, col: 39, offset: 11858},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 394, col: 42, offset: 11861},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 394, col: 53, offset: 11872},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 394, col: 56, offset: 11875},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "SubstringExpression",
			pos:  position{line: 398, col: 1, offset: 11960},
			expr: &actionExpr{
				pos: position{line: 398, col: 24, offset: 11983},
				run: (*parser).callonSubstringExpression1,
				expr: &seqExpr{
					pos: position{line: 398, col: 24, offset: 11983},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 398, col: 24, offset: 11983},
							val:        "substring",
							ignoreCase: true,
							want:       "\"SUBSTRING\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 398, col: 37, offset: 11996},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 398, col: 40, offset: 11999},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 398, col: 44, offset: 12003},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 398, col: 47, offset: 12006},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 398, col: 50, offset: 12009},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 398, col: 61, offset: 12020},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 398, col: 64, offset: 12023},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 398, col: 68, offset: 12027},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 398, col: 71, offset: 12030},
							label: "startPos",
							expr: &ruleRefExpr{
								pos:  position{line: 398, col: 80, offset: 12039},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 398, col: 91, offset: 12050},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 398, col: 94, offset: 12053},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 398, col: 98, offset: 12057},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 398, col: 101, offset: 12060},
							label: "length",
							expr: &ruleRefExpr{
								pos:  position{line: 398, col: 108, offset: 12067},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 398, col: 119, offset: 12078},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 398, col: 122, offset: 12081},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "TrimExpression",
			pos:  position{line: 402, col: 1, offset: 12188},
			expr: &actionExpr{
				pos: position{line: 402, col: 19, offset: 12206},
				run: (*parser).callonTrimExpression1,
				expr: &seqExpr{
					pos: position{line: 402, col: 19, offset: 12206},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 402, col: 19, offset: 12206},
							val:        "trim",
							ignoreCase: true,
							want:       "\"TRIM\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 402, col: 27, offset: 12214},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 402, col: 30, offset: 12217},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 402, col: 34, offset: 12221},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 402, col: 37, offset: 12224},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 402, col: 40, offset: 12227},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 402, col: 51, offset: 12238},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 402, col: 54, offset: 12241},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "ThreeArgumentStringFunctionExpression",
			pos:  position{line: 406, col: 1, offset: 12325},
			expr: &actionExpr{
				pos: position{line: 406, col: 42, offset: 12366},
				run: (*parser).callonThreeArgumentStringFunctionExpression1,
				expr: &seqExpr{
					pos: position{line: 406, col: 42, offset: 12366},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 406, col: 42, offset: 12366},
							label: "function",
							expr: &ruleRefExpr{
								pos:  position{line: 406, col: 51, offset: 12375},
								name: "ThreeArgumentStringFunction",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 406, col: 79, offset: 12403},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 406, col: 82, offset: 12406},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 406, col: 86, offset: 12410},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 406, col: 89, offset: 12413},
							label: "ex1",
							expr: &ruleRefExpr{
								pos:  position{line: 406, col: 93, offset: 12417},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 406, col: 104, offset: 12428},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 406, col: 107, offset: 12431},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 406, col: 111, offset: 12435},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 406, col: 114, offset: 12438},
							label: "ex2",
							expr: &ruleRefExpr{
								pos:  position{line: 406, col: 118, offset: 12442},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 406, col: 129, offset: 12453},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 406, col: 132, offset: 12456},
							label: "ignoreCase",
							expr: &zeroOrOneExpr{
								pos: position{line: 406, col: 143, offset: 12467},
								expr: &actionExpr{
									pos: position{line: 406, col: 144, offset: 12468},
									run: (*parser).callonThreeArgumentStringFunctionExpression18,
									expr: &seqExpr{
										pos: position{line: 406, col: 144, offset: 12468},
										exprs: []any{
											&litMatcher{
												pos:        position{line: 406, col: 144, offset: 12468},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&ruleRefExpr{
												pos:  position{line: 406, col: 148, offset: 12472},
												name: "ws",
											},
											&labeledExpr{
												pos:   position{line: 406, col: 151, offset: 12475},
												label: "boolean",
												expr: &ruleRefExpr{
													pos:  position{line: 406, col: 159, offset: 12483},
													name: "SelectItem",
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 406, col: 196, offset: 12520},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "ThreeArgumentStringFunction",
			pos:  position{line: 424, col: 1, offset: 13042},
			expr: &actionExpr{
				pos: position{line: 424, col: 32, offset: 13073},
				run: (*parser).callonThreeArgumentStringFunction1,
				expr: &choiceExpr{
					pos: position{line: 424, col: 33, offset: 13074},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 424, col: 33, offset: 13074},
							val:        "contains",
							ignoreCase: true,
							want:       "\"CONTAINS\"i",
						},
						&litMatcher{
							pos:        position{line: 424, col: 47, offset: 13088},
							val:        "endswith",
							ignoreCase: true,
							want:       "\"ENDSWITH\"i",
						},
						&litMatcher{
							pos:        position{line: 424, col: 61, offset: 13102},
							val:        "startswith",
							ignoreCase: true,
							want:       "\"STARTSWITH\"i",
						},
						&litMatcher{
							pos:        position{line: 424, col: 77, offset: 13118},
							val:        "index_of",
							ignoreCase: true,
							want:       "\"INDEX_OF\"i",
						},
					},
				},
			},
		},
		{
			name: "IsDefined",
			pos:  position{line: 428, col: 1, offset: 13167},
			expr: &actionExpr{
				pos: position{line: 428, col: 14, offset: 13180},
				run: (*parser).callonIsDefined1,
				expr: &seqExpr{
					pos: position{line: 428, col: 14, offset: 13180},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 428, col: 14, offset: 13180},
							val:        "is_defined",
							ignoreCase: true,
							want:       "\"IS_DEFINED\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 428, col: 28, offset: 13194},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 428, col: 31, offset: 13197},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 428, col: 35, offset: 13201},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 428, col: 38, offset: 13204},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 428, col: 41, offset: 13207},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 428, col: 52, offset: 13218},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 428, col: 55, offset: 13221},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "IsArray",
			pos:  position{line: 432, col: 1, offset: 13310},
			expr: &actionExpr{
				pos: position{line: 432, col: 12, offset: 13321},
				run: (*parser).callonIsArray1,
				expr: &seqExpr{
					pos: position{line: 432, col: 12, offset: 13321},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 432, col: 12, offset: 13321},
							val:        "is_array",
							ignoreCase: true,
							want:       "\"IS_ARRAY\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 432, col: 24, offset: 13333},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 432, col: 27, offset: 13336},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 432, col: 31, offset: 13340},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 432, col: 34, offset: 13343},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 432, col: 37, offset: 13346},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 432, col: 48, offset: 13357},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 432, col: 51, offset: 13360},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "IsBool",
			pos:  position{line: 436, col: 1, offset: 13447},
			expr: &actionExpr{
				pos: position{line: 436, col: 11, offset: 13457},
				run: (*parser).callonIsBool1,
				expr: &seqExpr{
					pos: position{line: 436, col: 11, offset: 13457},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 436, col: 11, offset: 13457},
							val:        "is_bool",
							ignoreCase: true,
							want:       "\"IS_BOOL\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 436, col: 22, offset: 13468},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 436, col: 25, offset: 13471},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 436, col: 29, offset: 13475},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 436, col: 32, offset: 13478},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 436, col: 35, offset: 13481},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 436, col: 46, offset: 13492},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 436, col: 49, offset: 13495},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "IsFiniteNumber",
			pos:  position{line: 440, col: 1, offset: 13581},
			expr: &actionExpr{
				pos: position{line: 440, col: 19, offset: 13599},
				run: (*parser).callonIsFiniteNumber1,
				expr: &seqExpr{
					pos: position{line: 440, col: 19, offset: 13599},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 440, col: 19, offset: 13599},
							val:        "is_finite_number",
							ignoreCase: true,
							want:       "\"IS_FINITE_NUMBER\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 440, col: 39, offset: 13619},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 440, col: 42, offset: 13622},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 440, col: 46, offset: 13626},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 440, col: 49, offset: 13629},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 440, col: 52, offset: 13632},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 440, col: 63, offset: 13643},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 440, col: 66, offset: 13646},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "IsInteger",
			pos:  position{line: 444, col: 1, offset: 13740},
			expr: &actionExpr{
				pos: position{line: 444, col: 14, offset: 13753},
				run: (*parser).callonIsInteger1,
				expr: &seqExpr{
					pos: position{line: 444, col: 14, offset: 13753},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 444, col: 14, offset: 13753},
							val:        "is_integer",
							ignoreCase: true,
							want:       "\"IS_INTEGER\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 444, col: 28, offset: 13767},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 444, col: 31, offset: 13770},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 444, col: 35, offset: 13774},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 444, col: 38, offset: 13777},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 444, col: 41, offset: 13780},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 444, col: 52, offset: 13791},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 444, col: 55, offset: 13794},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "IsNull",
			pos:  position{line: 448, col: 1, offset: 13883},
			expr: &actionExpr{
				pos: position{line: 448, col: 11, offset: 13893},
				run: (*parser).callonIsNull1,
				expr: &seqExpr{
					pos: position{line: 448, col: 11, offset: 13893},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 448, col: 11, offset: 13893},
							val:        "is_null",
							ignoreCase: true,
							want:       "\"IS_NULL\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 448, col: 22, offset: 13904},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 448, col: 25, offset: 13907},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 448, col: 29, offset: 13911},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 448, col: 32, offset: 13914},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 448, col: 35, offset: 13917},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 448, col: 46, offset: 13928},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 448, col: 49, offset: 13931},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "IsNumber",
			pos:  position{line: 452, col: 1, offset: 14017},
			expr: &actionExpr{
				pos: position{line: 452, col: 13, offset: 14029},
				run: (*parser).callonIsNumber1,
				expr: &seqExpr{
					pos: position{line: 452, col: 13, offset: 14029},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 452, col: 13, offset: 14029},
							val:        "is_number",
							ignoreCase: true,
							want:       "\"IS_NUMBER\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 452, col: 26, offset: 14042},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 452, col: 29, offset: 14045},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 452, col: 33, offset: 14049},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 452, col: 36, offset: 14052},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 452, col: 39, offset: 14055},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 452, col: 50, offset: 14066},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 452, col: 53, offset: 14069},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "IsObject",
			pos:  position{line: 456, col: 1, offset: 14157},
			expr: &actionExpr{
				pos: position{line: 456, col: 13, offset: 14169},
				run: (*parser).callonIsObject1,
				expr: &seqExpr{
					pos: position{line: 456, col: 13, offset: 14169},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 456, col: 13, offset: 14169},
							val:        "is_object",
							ignoreCase: true,
							want:       "\"IS_OBJECT\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 456, col: 26, offset: 14182},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 456, col: 29, offset: 14185},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 456, col: 33, offset: 14189},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 456, col: 36, offset: 14192},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 456, col: 39, offset: 14195},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 456, col: 50, offset: 14206},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 456, col: 53, offset: 14209},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "IsPrimitive",
			pos:  position{line: 460, col: 1, offset: 14297},
			expr: &actionExpr{
				pos: position{line: 460, col: 16, offset: 14312},
				run: (*parser).callonIsPrimitive1,
				expr: &seqExpr{
					pos: position{line: 460, col: 16, offset: 14312},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 460, col: 16, offset: 14312},
							val:        "is_primitive",
							ignoreCase: true,
							want:       "\"IS_PRIMITIVE\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 460, col: 32, offset: 14328},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 460, col: 35, offset: 14331},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 460, col: 39, offset: 14335},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 460, col: 42, offset: 14338},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 460, col: 45, offset: 14341},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 460, col: 56, offset: 14352},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 460, col: 59, offset: 14355},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "IsString",
			pos:  position{line: 464, col: 1, offset: 14446},
			expr: &actionExpr{
				pos: position{line: 464, col: 13, offset: 14458},
				run: (*parser).callonIsString1,
				expr: &seqExpr{
					pos: position{line: 464, col: 13, offset: 14458},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 464, col: 13, offset: 14458},
							val:        "is_string",
							ignoreCase: true,
							want:       "\"IS_STRING\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 464, col: 26, offset: 14471},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 464, col: 29, offset: 14474},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 464, col: 33, offset: 14478},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 464, col: 36, offset: 14481},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 464, col: 39, offset: 14484},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 464, col: 50, offset: 14495},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 464, col: 53, offset: 14498},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "ArrayConcatExpression",
			pos:  position{line: 468, col: 1, offset: 14586},
			expr: &actionExpr{
				pos: position{line: 468, col: 26, offset: 14611},
				run: (*parser).callonArrayConcatExpression1,
				expr: &seqExpr{
					pos: position{line: 468, col: 26, offset: 14611},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 468, col: 26, offset: 14611},
							val:        "array_concat",
							ignoreCase: true,
							want:       "\"ARRAY_CONCAT\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 468, col: 42, offset: 14627},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 468, col: 45, offset: 14630},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 468, col: 49, offset: 14634},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 468, col: 52, offset: 14637},
							label: "arrays",
							expr: &ruleRefExpr{
								pos:  position{line: 468, col: 59, offset: 14644},
								name: "SelectItem",
							},
						},
						&labeledExpr{
							pos:   position{line: 468, col: 70, offset: 14655},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 468, col: 77, offset: 14662},
								expr: &actionExpr{
									pos: position{line: 468, col: 78, offset: 14663},
									run: (*parser).callonArrayConcatExpression11,
									expr: &seqExpr{
										pos: position{line: 468, col: 78, offset: 14663},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 468, col: 78, offset: 14663},
												name: "ws",
											},
											&litMatcher{
												pos:        position{line: 468, col: 81, offset: 14666},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&ruleRefExpr{
												pos:  position{line: 468, col: 85, offset: 14670},
												name: "ws",
											},
											&labeledExpr{
												pos:   position{line: 468, col: 88, offset: 14673},
												label: "ex",
												expr: &ruleRefExpr{
													pos:  position{line: 468, col: 91, offset: 14676},
													name: "SelectItem",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 468, col: 123, offset: 14708},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 468, col: 126, offset: 14711},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "ArrayLengthExpression",
			pos:  position{line: 472, col: 1, offset: 14841},
			expr: &actionExpr{
				pos: position{line: 472, col: 26, offset: 14866},
				run: (*parser).callonArrayLengthExpression1,
				expr: &seqExpr{
					pos: position{line: 472, col: 26, offset: 14866},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 472, col: 26, offset: 14866},
							val:        "array_length",
							ignoreCase: true,
							want:       "\"ARRAY_LENGTH\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 472, col: 42, offset: 14882},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 472, col: 45, offset: 14885},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 472, col: 49, offset: 14889},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 472, col: 52, offset: 14892},
							label: "array",
							expr: &ruleRefExpr{
								pos:  position{line: 472, col: 58, offset: 14898},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 472, col: 69, offset: 14909},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 472, col: 72, offset: 14912},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "ArraySliceExpression",
			pos:  position{line: 476, col: 1, offset: 15006},
			expr: &actionExpr{
				pos: position{line: 476, col: 25, offset: 15030},
				run: (*parser).callonArraySliceExpression1,
				expr: &seqExpr{
					pos: position{line: 476, col: 25, offset: 15030},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 476, col: 25, offset: 15030},
							val:        "array_slice",
							ignoreCase: true,
							want:       "\"ARRAY_SLICE\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 476, col: 40, offset: 15045},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 476, col: 43, offset: 15048},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 476, col: 47, offset: 15052},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 476, col: 50, offset: 15055},
							label: "array",
							expr: &ruleRefExpr{
								pos:  position{line: 476, col: 56, offset: 15061},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 476, col: 67, offset: 15072},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 476, col: 70, offset: 15075},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 476, col: 74, offset: 15079},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 476, col: 77, offset: 15082},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 476, col: 83, offset: 15088},
								name: "SelectItem",
							},
						},
						&labeledExpr{
							pos:   position{line: 476, col: 94, offset: 15099},
							label: "length",
							expr: &zeroOrOneExpr{
								pos: position{line: 476, col: 101, offset: 15106},
								expr: &actionExpr{
									pos: position{line: 476, col: 102, offset: 15107},
									run: (*parser).callonArraySliceExpression16,
									expr: &seqExpr{
										pos: position{line: 476, col: 102, offset: 15107},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 476, col: 102, offset: 15107},
												name: "ws",
											},
											&litMatcher{
												pos:        position{line: 476, col: 105, offset: 15110},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&ruleRefExpr{
												pos:  position{line: 476, col: 109, offset: 15114},
												name: "ws",
											},
											&labeledExpr{
												pos:   position{line: 476, col: 112, offset: 15117},
												label: "ex",
												expr: &ruleRefExpr{
													pos:  position{line: 476, col: 115, offset: 15120},
													name: "SelectItem",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 476, col: 147, offset: 15152},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 476, col: 150, offset: 15155},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "SetIntersectExpression",
			pos:  position{line: 480, col: 1, offset: 15263},
			expr: &actionExpr{
				pos: position{line: 480, col: 27, offset: 15289},
				run: (*parser).callonSetIntersectExpression1,
				expr: &seqExpr{
					pos: position{line: 480, col: 27, offset: 15289},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 480, col: 27, offset: 15289},
							val:        "setintersect",
							ignoreCase: true,
							want:       "\"SetIntersect\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 480, col: 43, offset: 15305},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 480, col: 46, offset: 15308},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 480, col: 50, offset: 15312},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 480, col: 53, offset: 15315},
							label: "set1",
							expr: &ruleRefExpr{
								pos:  position{line: 480, col: 58, offset: 15320},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 480, col: 69, offset: 15331},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 480, col: 72, offset: 15334},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 480, col: 76, offset: 15338},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 480, col: 79, offset: 15341},
							label: "set2",
							expr: &ruleRefExpr{
								pos:  position{line: 480, col: 84, offset: 15346},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 480, col: 95, offset: 15357},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 480, col: 98, offset: 15360},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "SetUnionExpression",
			pos:  position{line: 484, col: 1, offset: 15460},
			expr: &actionExpr{
				pos: position{line: 484, col: 23, offset: 15482},
				run: (*parser).callonSetUnionExpression1,
				expr: &seqExpr{
					pos: position{line: 484, col: 23, offset: 15482},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 484, col: 23, offset: 15482},
							val:        "setunion",
							ignoreCase: true,
							want:       "\"SetUnion\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 484, col: 35, offset: 15494},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 484, col: 38, offset: 15497},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 484, col: 42, offset: 15501},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 484, col: 45, offset: 15504},
							label: "set1",
							expr: &ruleRefExpr{
								pos:  position{line: 484, col: 50, offset: 15509},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 484, col: 61, offset: 15520},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 484, col: 64, offset: 15523},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 484, col: 68, offset: 15527},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 484, col: 71, offset: 15530},
							label: "set2",
							expr: &ruleRefExpr{
								pos:  position{line: 484, col: 76, offset: 15535},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 484, col: 87, offset: 15546},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 484, col: 90, offset: 15549},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "InFunction",
			pos:  position{line: 488, col: 1, offset: 15645},
			expr: &actionExpr{
				pos: position{line: 488, col: 15, offset: 15659},
				run: (*parser).callonInFunction1,
				expr: &seqExpr{
					pos: position{line: 488, col: 15, offset: 15659},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 488, col: 15, offset: 15659},
							label: "ex1",
							expr: &ruleRefExpr{
								pos:  position{line: 488, col: 19, offset: 15663},
								name: "SelectProperty",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 488, col: 34, offset: 15678},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 488, col: 37, offset: 15681},
							val:        "in",
							ignoreCase: true,
							want:       "\"IN\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 488, col: 43, offset: 15687},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 488, col: 46, offset: 15690},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 488, col: 50, offset: 15694},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 488, col: 53, offset: 15697},
							label: "ex2",
							expr: &ruleRefExpr{
								pos:  position{line: 488, col: 57, offset: 15701},
								name: "SelectItem",
							},
						},
						&labeledExpr{
							pos:   position{line: 488, col: 68, offset: 15712},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 488, col: 75, offset: 15719},
								expr: &actionExpr{
									pos: position{line: 488, col: 76, offset: 15720},
									run: (*parser).callonInFunction14,
									expr: &seqExpr{
										pos: position{line: 488, col: 76, offset: 15720},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 488, col: 76, offset: 15720},
												name: "ws",
											},
											&litMatcher{
												pos:        position{line: 488, col: 79, offset: 15723},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&ruleRefExpr{
												pos:  position{line: 488, col: 83, offset: 15727},
												name: "ws",
											},
											&labeledExpr{
												pos:   position{line: 488, col: 86, offset: 15730},
												label: "ex",
												expr: &ruleRefExpr{
													pos:  position{line: 488, col: 89, offset: 15733},
													name: "SelectItem",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 488, col: 121, offset: 15765},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 488, col: 124, offset: 15768},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "Integer",
			pos:  position{line: 492, col: 1, offset: 15891},
			expr: &actionExpr{
				pos: position{line: 492, col: 12, offset: 15902},
				run: (*parser).callonInteger1,
				expr: &oneOrMoreExpr{
					pos: position{line: 492, col: 12, offset: 15902},
					expr: &charClassMatcher{
						pos:        position{line: 492, col: 12, offset: 15902},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "StringCharacter",
			pos:  position{line: 496, col: 1, offset: 15954},
			expr: &choiceExpr{
				pos: position{line: 496, col: 20, offset: 15973},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 496, col: 20, offset: 15973},
						run: (*parser).callonStringCharacter2,
						expr: &seqExpr{
							pos: position{line: 496, col: 20, offset: 15973},
							exprs: []any{
								&notExpr{
									pos: position{line: 496, col: 20, offset: 15973},
									expr: &choiceExpr{
										pos: position{line: 496, col: 22, offset: 15975},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 496, col: 22, offset: 15975},
												val:        "\"",
												ignoreCase: false,
												want:       "\"\\\"\"",
											},
											&litMatcher{
												pos:        position{line: 496, col: 28, offset: 15981},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
								&anyMatcher{
									line: 496, col: 34, offset: 15987,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 497, col: 5, offset: 16024},
						run: (*parser).callonStringCharacter9,
						expr: &seqExpr{
							pos: position{line: 497, col: 5, offset: 16024},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 497, col: 5, offset: 16024},
									val:        "\\",
									ignoreCase: false,
									want:       "\"\\\\\"",
								},
								&labeledExpr{
									pos:   position{line: 497, col: 10, offset: 16029},
									label: "seq",
									expr: &ruleRefExpr{
										pos:  position{line: 497, col: 14, offset: 16033},
										name: "EscapeSequenceCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapeSequenceCharacter",
			pos:  position{line: 499, col: 1, offset: 16078},
			expr: &labeledExpr{
				pos:   position{line: 499, col: 28, offset: 16105},
				label: "char",
				expr: &ruleRefExpr{
					pos:  position{line: 499, col: 33, offset: 16110},
					name: "EscapeCharacter",
				},
			},
		},
		{
			name: "EscapeCharacter",
			pos:  position{line: 501, col: 1, offset: 16127},
			expr: &choiceExpr{
				pos: position{line: 501, col: 20, offset: 16146},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 501, col: 20, offset: 16146},
						val:        "'",
						ignoreCase: false,
						want:       "\"'\"",
					},
					&litMatcher{
						pos:        position{line: 502, col: 5, offset: 16154},
						val:        "\"",
						ignoreCase: false,
						want:       "\"\\\"\"",
					},
					&litMatcher{
						pos:        position{line: 503, col: 5, offset: 16162},
						val:        "\\",
						ignoreCase: false,
						want:       "\"\\\\\"",
					},
					&actionExpr{
						pos: position{line: 504, col: 5, offset: 16171},
						run: (*parser).callonEscapeCharacter5,
						expr: &litMatcher{
							pos:        position{line: 504, col: 5, offset: 16171},
							val:        "b",
							ignoreCase: false,
							want:       "\"b\"",
						},
					},
					&actionExpr{
						pos: position{line: 505, col: 5, offset: 16200},
						run: (*parser).callonEscapeCharacter7,
						expr: &litMatcher{
							pos:        position{line: 505, col: 5, offset: 16200},
							val:        "f",
							ignoreCase: false,
							want:       "\"f\"",
						},
					},
					&actionExpr{
						pos: position{line: 506, col: 5, offset: 16229},
						run: (*parser).callonEscapeCharacter9,
						expr: &litMatcher{
							pos:        position{line: 506, col: 5, offset: 16229},
							val:        "n",
							ignoreCase: false,
							want:       "\"n\"",
						},
					},
					&actionExpr{
						pos: position{line: 507, col: 5, offset: 16258},
						run: (*parser).callonEscapeCharacter11,
						expr: &litMatcher{
							pos:        position{line: 507, col: 5, offset: 16258},
							val:        "r",
							ignoreCase: false,
							want:       "\"r\"",
						},
					},
					&actionExpr{
						pos: position{line: 508, col: 5, offset: 16287},
						run: (*parser).callonEscapeCharacter13,
						expr: &litMatcher{
							pos:        position{line: 508, col: 5, offset: 16287},
							val:        "t",
							ignoreCase: false,
							want:       "\"t\"",
						},
					},
				},
			},
		},
		{
			name: "non_escape_character",
			pos:  position{line: 510, col: 1, offset: 16313},
			expr: &actionExpr{
				pos: position{line: 510, col: 25, offset: 16337},
				run: (*parser).callonnon_escape_character1,
				expr: &seqExpr{
					pos: position{line: 510, col: 25, offset: 16337},
					exprs: []any{
						&notExpr{
							pos: position{line: 510, col: 25, offset: 16337},
							expr: &ruleRefExpr{
								pos:  position{line: 510, col: 27, offset: 16339},
								name: "escape_character",
							},
						},
						&labeledExpr{
							pos:   position{line: 510, col: 45, offset: 16357},
							label: "char",
							expr: &anyMatcher{
								line: 510, col: 50, offset: 16362,
							},
						},
					},
				},
			},
		},
		{
			name: "ws",
			pos:  position{line: 513, col: 1, offset: 16401},
			expr: &zeroOrMoreExpr{
				pos: position{line: 513, col: 7, offset: 16407},
				expr: &charClassMatcher{
					pos:        position{line: 513, col: 7, offset: 16407},
					val:        "[ \\t\\n\\r]",
					chars:      []rune{' ', '\t', '\n', '\r'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 515, col: 1, offset: 16419},
			expr: &notExpr{
				pos: position{line: 515, col: 8, offset: 16426},
				expr: &anyMatcher{
					line: 515, col: 9, offset: 16427,
				},
			},
		},
	},
}

func (c *current) onInput1(selectStmt any) (any, error) {
	return selectStmt, nil
}

func (p *parser) callonInput1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInput1(stack["selectStmt"])
}

func (c *current) onSelectStmt19(condition any) (any, error) {
	return condition, nil
}

func (p *parser) callonSelectStmt19() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectStmt19(stack["condition"])
}

func (c *current) onSelectStmt1(topClause, columns, table, whereClause, orderByClause any) (any, error) {
	return makeSelectStmt(columns, table, whereClause, topClause, orderByClause)
}

func (p *parser) callonSelectStmt1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectStmt1(stack["topClause"], stack["columns"], stack["table"], stack["whereClause"], stack["orderByClause"])
}

func (c *current) onTopClause1(count any) (any, error) {
	return count, nil
}

func (p *parser) callonTopClause1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopClause1(stack["count"])
}

func (c *current) onSelectAsterisk1() (any, error) {
	selectItem, _ := makeSelectItem("c", make([]interface{}, 0), parsers.SelectItemTypeField)
	selectItem.IsTopLevel = true
	return makeColumnList(selectItem, make([]interface{}, 0))
}

func (p *parser) callonSelectAsterisk1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectAsterisk1()
}

func (c *current) onColumnList7(coll any) (any, error) {
	return coll, nil
}

func (p *parser) callonColumnList7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onColumnList7(stack["coll"])
}

func (c *current) onColumnList1(column, other_columns any) (any, error) {
	return makeColumnList(column, other_columns)
}

func (p *parser) callonColumnList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onColumnList1(stack["column"], stack["other_columns"])
}

func (c *current) onSelectValueSpec1(column any) (any, error) {
	selectItem := column.(parsers.SelectItem)
	selectItem.IsTopLevel = true
	return makeColumnList(selectItem, make([]interface{}, 0))
}

func (p *parser) callonSelectValueSpec1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectValueSpec1(stack["column"])
}

func (c *current) onTableName1(key any) (any, error) {
	return parsers.Table{Value: key.(string)}, nil
}

func (p *parser) callonTableName1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableName1(stack["key"])
}

func (c *current) onSelectArray1(columns any) (any, error) {
	return makeSelectArray(columns)
}

func (p *parser) callonSelectArray1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectArray1(stack["columns"])
}

func (c *current) onSelectObject10(coll any) (any, error) {
	return coll, nil
}

func (p *parser) callonSelectObject10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectObject10(stack["coll"])
}

func (c *current) onSelectObject1(field, other_fields any) (any, error) {
	return makeSelectObject(field, other_fields)
}

func (p *parser) callonSelectObject1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectObject1(stack["field"], stack["other_fields"])
}

func (c *current) onSelectObjectField6(key any) (any, error) {
	return key, nil
}

func (p *parser) callonSelectObjectField6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectObjectField6(stack["key"])
}

func (c *current) onSelectObjectField1(name, selectItem any) (any, error) {
	item := selectItem.(parsers.SelectItem)
	item.Alias = name.(string)
	return item, nil
}

func (p *parser) callonSelectObjectField1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectObjectField1(stack["name"], stack["selectItem"])
}

func (c *current) onSelectProperty1(name, path any) (any, error) {
	return makeSelectItem(name, path, parsers.SelectItemTypeField)
}

func (p *parser) callonSelectProperty1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectProperty1(stack["name"], stack["path"])
}

func (c *current) onSelectItem1(selectItem, asClause any) (any, error) {
	var itemResult parsers.SelectItem
	switch typedValue := selectItem.(type) {
	case parsers.SelectItem:
		itemResult = typedValue
	case parsers.Constant:
		itemResult = parsers.SelectItem{
			Type:  parsers.SelectItemTypeConstant,
			Value: typedValue,
		}
	case parsers.FunctionCall:
		itemResult = parsers.SelectItem{
			Type:  parsers.SelectItemTypeFunctionCall,
			Value: typedValue,
		}
	}

	if aliasValue, ok := asClause.(string); ok {
		itemResult.Alias = aliasValue
	}

	return itemResult, nil
}

func (p *parser) callonSelectItem1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectItem1(stack["selectItem"], stack["asClause"])
}

func (c *current) onAsClause1(alias any) (any, error) {
	return alias, nil
}

func (p *parser) callonAsClause1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsClause1(stack["alias"])
}

func (c *current) onDotFieldAccess1(id any) (any, error) {
	return id, nil
}

func (p *parser) callonDotFieldAccess1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDotFieldAccess1(stack["id"])
}

func (c *current) onArrayFieldAccess1(id any) (any, error) {
	return id, nil
}

func (p *parser) callonArrayFieldAccess1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArrayFieldAccess1(stack["id"])
}

func (c *current) onIdentifier1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifier1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier1()
}

func (c *current) onCondition1(expression any) (any, error) {
	return expression, nil
}

func (p *parser) callonCondition1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCondition1(stack["expression"])
}

func (c *current) onOrExpression7(ex any) (any, error) {
	return ex, nil
}

func (p *parser) callonOrExpression7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrExpression7(stack["ex"])
}

func (c *current) onOrExpression1(ex1, ex2 any) (any, error) {
	return combineExpressions(ex1, ex2, parsers.LogicalExpressionTypeOr)
}

func (p *parser) callonOrExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrExpression1(stack["ex1"], stack["ex2"])
}

func (c *current) onAndExpression7(ex any) (any, error) {
	return ex, nil
}

func (p *parser) callonAndExpression7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAndExpression7(stack["ex"])
}

func (c *current) onAndExpression1(ex1, ex2 any) (any, error) {
	return combineExpressions(ex1, ex2, parsers.LogicalExpressionTypeAnd)
}

func (p *parser) callonAndExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAndExpression1(stack["ex1"], stack["ex2"])
}

func (c *current) onComparisonExpression2(ex any) (any, error) {
	return ex, nil
}

func (p *parser) callonComparisonExpression2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparisonExpression2(stack["ex"])
}

func (c *current) onComparisonExpression10(left, op, right any) (any, error) {
	return parsers.ComparisonExpression{Left: left, Right: right, Operation: op.(string)}, nil
}

func (p *parser) callonComparisonExpression10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparisonExpression10(stack["left"], stack["op"], stack["right"])
}

func (c *current) onComparisonExpression20(ex any) (any, error) {
	return ex, nil
}

func (p *parser) callonComparisonExpression20() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparisonExpression20(stack["ex"])
}

func (c *current) onComparisonExpression23(ex any) (any, error) {
	return ex, nil
}

func (p *parser) callonComparisonExpression23() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparisonExpression23(stack["ex"])
}

func (c *current) onOrderByClause9(ex any) (any, error) {
	return ex, nil
}

func (p *parser) callonOrderByClause9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderByClause9(stack["ex"])
}

func (c *current) onOrderByClause1(ex1, others any) (any, error) {
	return makeOrderByClause(ex1, others)
}

func (p *parser) callonOrderByClause1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderByClause1(stack["ex1"], stack["others"])
}

func (c *current) onOrderExpression1(field, order any) (any, error) {
	return makeOrderExpression(field, order)
}

func (p *parser) callonOrderExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderExpression1(stack["field"], stack["order"])
}

func (c *current) onOrderDirection1() (any, error) {
	if strings.EqualFold(string(c.text), "DESC") {
		return parsers.OrderDirectionDesc, nil
	}

	return parsers.OrderDirectionAsc, nil
}

func (p *parser) callonOrderDirection1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderDirection1()
}

func (c *current) onComparisonOperator1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonComparisonOperator1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparisonOperator1()
}

func (c *current) onParameterConstant1() (any, error) {
	return parsers.Constant{Type: parsers.ConstantTypeParameterConstant, Value: string(c.text)}, nil
}

func (p *parser) callonParameterConstant1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParameterConstant1()
}

func (c *current) onNullConstant1() (any, error) {
	return parsers.Constant{Value: nil}, nil
}

func (p *parser) callonNullConstant1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNullConstant1()
}

func (c *current) onIntegerLiteral1(number any) (any, error) {
	return parsers.Constant{Type: parsers.ConstantTypeInteger, Value: number.(int)}, nil
}

func (p *parser) callonIntegerLiteral1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntegerLiteral1(stack["number"])
}

func (c *current) onStringLiteral1(chars any) (any, error) {
	return parsers.Constant{Type: parsers.ConstantTypeString, Value: joinStrings(chars.([]interface{}))}, nil
}

func (p *parser) callonStringLiteral1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringLiteral1(stack["chars"])
}

func (c *current) onFloatLiteral1() (any, error) {
	floatValue, _ := strconv.ParseFloat(string(c.text), 64)
	return parsers.Constant{Type: parsers.ConstantTypeFloat, Value: floatValue}, nil
}

func (p *parser) callonFloatLiteral1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatLiteral1()
}

func (c *current) onBooleanLiteral1() (any, error) {
	boolValue, _ := strconv.ParseBool(string(c.text))
	return parsers.Constant{Type: parsers.ConstantTypeBoolean, Value: boolValue}, nil
}

func (p *parser) callonBooleanLiteral1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral1()
}

func (c *current) onUpperExpression1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallUpper, []interface{}{ex})
}

func (p *parser) callonUpperExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUpperExpression1(stack["ex"])
}

func (c *current) onLowerExpression1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallLower, []interface{}{ex})
}

func (p *parser) callonLowerExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLowerExpression1(stack["ex"])
}

func (c *current) onStringEqualsExpression17(boolean any) (any, error) {
	return boolean, nil
}

func (p *parser) callonStringEqualsExpression17() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringEqualsExpression17(stack["boolean"])
}

func (c *current) onStringEqualsExpression1(ex1, ex2, ignoreCase any) (any, error) {
	return createFunctionCall(parsers.FunctionCallStringEquals, []interface{}{ex1, ex2, ignoreCase})
}

func (p *parser) callonStringEqualsExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringEqualsExpression1(stack["ex1"], stack["ex2"], stack["ignoreCase"])
}

func (c *current) onToStringExpression1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallToString, []interface{}{ex})
}

func (p *parser) callonToStringExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onToStringExpression1(stack["ex"])
}

func (c *current) onConcatExpression11(ex any) (any, error) {
	return ex, nil
}

func (p *parser) callonConcatExpression11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcatExpression11(stack["ex"])
}

func (c *current) onConcatExpression1(ex1, others any) (any, error) {
	arguments := append([]interface{}{ex1}, others.([]interface{})...)
	return createFunctionCall(parsers.FunctionCallConcat, arguments)
}

func (p *parser) callonConcatExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcatExpression1(stack["ex1"], stack["others"])
}

func (c *current) onLeftExpression1(ex, length any) (any, error) {
	return createFunctionCall(parsers.FunctionCallLeft, []interface{}{ex, length})
}

func (p *parser) callonLeftExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLeftExpression1(stack["ex"], stack["length"])
}

func (c *current) onLengthExpression1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallLength, []interface{}{ex})
}

func (p *parser) callonLengthExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLengthExpression1(stack["ex"])
}

func (c *current) onLTrimExpression1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallLTrim, []interface{}{ex})
}

func (p *parser) callonLTrimExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLTrimExpression1(stack["ex"])
}

func (c *current) onReplaceExpression1(ex1, ex2, ex3 any) (any, error) {
	return createFunctionCall(parsers.FunctionCallReplace, []interface{}{ex1, ex2, ex3})
}

func (p *parser) callonReplaceExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplaceExpression1(stack["ex1"], stack["ex2"], stack["ex3"])
}

func (c *current) onReplicateExpression1(ex1, ex2 any) (any, error) {
	return createFunctionCall(parsers.FunctionCallReplicate, []interface{}{ex1, ex2})
}

func (p *parser) callonReplicateExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplicateExpression1(stack["ex1"], stack["ex2"])
}

func (c *current) onReverseExpression1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallReverse, []interface{}{ex})
}

func (p *parser) callonReverseExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReverseExpression1(stack["ex"])
}

func (c *current) onRightExpression1(ex, length any) (any, error) {
	return createFunctionCall(parsers.FunctionCallRight, []interface{}{ex, length})
}

func (p *parser) callonRightExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRightExpression1(stack["ex"], stack["length"])
}

func (c *current) onRTrimExpression1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallRTrim, []interface{}{ex})
}

func (p *parser) callonRTrimExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRTrimExpression1(stack["ex"])
}

func (c *current) onSubstringExpression1(ex, startPos, length any) (any, error) {
	return createFunctionCall(parsers.FunctionCallSubstring, []interface{}{ex, startPos, length})
}

func (p *parser) callonSubstringExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstringExpression1(stack["ex"], stack["startPos"], stack["length"])
}

func (c *current) onTrimExpression1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallTrim, []interface{}{ex})
}

func (p *parser) callonTrimExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTrimExpression1(stack["ex"])
}

func (c *current) onThreeArgumentStringFunctionExpression18(boolean any) (any, error) {
	return boolean, nil
}

func (p *parser) callonThreeArgumentStringFunctionExpression18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onThreeArgumentStringFunctionExpression18(stack["boolean"])
}

func (c *current) onThreeArgumentStringFunctionExpression1(function, ex1, ex2, ignoreCase any) (any, error) {
	var functionType parsers.FunctionCallType

	lowerFunction := strings.ToUpper(function.(string))
	switch lowerFunction {
	case "CONTAINS":
		functionType = parsers.FunctionCallContains
	case "ENDSWITH":
		functionType = parsers.FunctionCallEndsWith
	case "STARTSWITH":
		functionType = parsers.FunctionCallStartsWith
	case "INDEX_OF":
		functionType = parsers.FunctionCallIndexOf
	}

	return createFunctionCall(functionType, []interface{}{ex1, ex2, ignoreCase})
}

func (p *parser) callonThreeArgumentStringFunctionExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onThreeArgumentStringFunctionExpression1(stack["function"], stack["ex1"], stack["ex2"], stack["ignoreCase"])
}

func (c *current) onThreeArgumentStringFunction1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonThreeArgumentStringFunction1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onThreeArgumentStringFunction1()
}

func (c *current) onIsDefined1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallIsDefined, []interface{}{ex})
}

func (p *parser) callonIsDefined1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIsDefined1(stack["ex"])
}

func (c *current) onIsArray1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallIsArray, []interface{}{ex})
}

func (p *parser) callonIsArray1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIsArray1(stack["ex"])
}

func (c *current) onIsBool1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallIsBool, []interface{}{ex})
}

func (p *parser) callonIsBool1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIsBool1(stack["ex"])
}

func (c *current) onIsFiniteNumber1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallIsFiniteNumber, []interface{}{ex})
}

func (p *parser) callonIsFiniteNumber1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIsFiniteNumber1(stack["ex"])
}

func (c *current) onIsInteger1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallIsInteger, []interface{}{ex})
}

func (p *parser) callonIsInteger1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIsInteger1(stack["ex"])
}

func (c *current) onIsNull1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallIsNull, []interface{}{ex})
}

func (p *parser) callonIsNull1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIsNull1(stack["ex"])
}

func (c *current) onIsNumber1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallIsNumber, []interface{}{ex})
}

func (p *parser) callonIsNumber1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIsNumber1(stack["ex"])
}

func (c *current) onIsObject1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallIsObject, []interface{}{ex})
}

func (p *parser) callonIsObject1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIsObject1(stack["ex"])
}

func (c *current) onIsPrimitive1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallIsPrimitive, []interface{}{ex})
}

func (p *parser) callonIsPrimitive1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIsPrimitive1(stack["ex"])
}

func (c *current) onIsString1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallIsString, []interface{}{ex})
}

func (p *parser) callonIsString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIsString1(stack["ex"])
}

func (c *current) onArrayConcatExpression11(ex any) (any, error) {
	return ex, nil
}

func (p *parser) callonArrayConcatExpression11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArrayConcatExpression11(stack["ex"])
}

func (c *current) onArrayConcatExpression1(arrays, others any) (any, error) {
	return createFunctionCall(parsers.FunctionCallArrayConcat, append([]interface{}{arrays}, others.([]interface{})...))
}

func (p *parser) callonArrayConcatExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArrayConcatExpression1(stack["arrays"], stack["others"])
}

func (c *current) onArrayLengthExpression1(array any) (any, error) {
	return createFunctionCall(parsers.FunctionCallArrayLength, []interface{}{array})
}

func (p *parser) callonArrayLengthExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArrayLengthExpression1(stack["array"])
}

func (c *current) onArraySliceExpression16(ex any) (any, error) {
	return ex, nil
}

func (p *parser) callonArraySliceExpression16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArraySliceExpression16(stack["ex"])
}

func (c *current) onArraySliceExpression1(array, start, length any) (any, error) {
	return createFunctionCall(parsers.FunctionCallArraySlice, []interface{}{array, start, length})
}

func (p *parser) callonArraySliceExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArraySliceExpression1(stack["array"], stack["start"], stack["length"])
}

func (c *current) onSetIntersectExpression1(set1, set2 any) (any, error) {
	return createFunctionCall(parsers.FunctionCallSetIntersect, []interface{}{set1, set2})
}

func (p *parser) callonSetIntersectExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSetIntersectExpression1(stack["set1"], stack["set2"])
}

func (c *current) onSetUnionExpression1(set1, set2 any) (any, error) {
	return createFunctionCall(parsers.FunctionCallSetUnion, []interface{}{set1, set2})
}

func (p *parser) callonSetUnionExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSetUnionExpression1(stack["set1"], stack["set2"])
}

func (c *current) onInFunction14(ex any) (any, error) {
	return ex, nil
}

func (p *parser) callonInFunction14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInFunction14(stack["ex"])
}

func (c *current) onInFunction1(ex1, ex2, others any) (any, error) {
	return createFunctionCall(parsers.FunctionCallIn, append([]interface{}{ex1, ex2}, others.([]interface{})...))
}

func (p *parser) callonInFunction1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInFunction1(stack["ex1"], stack["ex2"], stack["others"])
}

func (c *current) onInteger1() (any, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonInteger1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInteger1()
}

func (c *current) onStringCharacter2() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonStringCharacter2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringCharacter2()
}

func (c *current) onStringCharacter9(seq any) (any, error) {
	return seq, nil
}

func (p *parser) callonStringCharacter9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringCharacter9(stack["seq"])
}

func (c *current) onEscapeCharacter5() (any, error) {
	return "\b", nil
}

func (p *parser) callonEscapeCharacter5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapeCharacter5()
}

func (c *current) onEscapeCharacter7() (any, error) {
	return "\f", nil
}

func (p *parser) callonEscapeCharacter7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapeCharacter7()
}

func (c *current) onEscapeCharacter9() (any, error) {
	return "\n", nil
}

func (p *parser) callonEscapeCharacter9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapeCharacter9()
}

func (c *current) onEscapeCharacter11() (any, error) {
	return "\r", nil
}

func (p *parser) callonEscapeCharacter11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapeCharacter11()
}

func (c *current) onEscapeCharacter13() (any, error) {
	return "\t", nil
}

func (p *parser) callonEscapeCharacter13() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapeCharacter13()
}

func (c *current) onnon_escape_character1(char any) (any, error) {
	return string(c.text), nil
}

func (p *parser) callonnon_escape_character1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnon_escape_character1(stack["char"])
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expressions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//	input := "input"
//	stats := Stats{}
//	_, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//	if err != nil {
//	    log.Panicln(err)
//	}
//	b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//	if err != nil {
//	    log.Panicln(err)
//	}
//	fmt.Println(string(b))
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i any, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (any, error) {
	b, err := io.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (any, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]any

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        any
}

type choiceExpr struct {
	pos          position
	alternatives []any
}

type actionExpr struct {
	pos  position
	expr any
	run  func(*parser) (any, error)
}

type recoveryExpr struct {
	pos          position
	expr         any
	recoverExpr  any
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []any
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  any
}

type expr struct {
	pos  position
	expr any
}

type (
	andExpr        expr
	notExpr        expr
	zeroOrOneExpr  expr
	zeroOrMoreExpr expr
	oneOrMoreExpr  expr
)

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   any
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[any]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]any
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]any
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]any)
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr any) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]any, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) printIndent(mark string, s string) string {
	return p.print(strings.Repeat(" ", p.depth)+mark, s)
}

func (p *parser) in(s string) string {
	res := p.printIndent(">", s)
	p.depth++
	return res
}

func (p *parser) out(s string) string {
	p.depth--
	return p.printIndent("<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() any
}

var statePool = &sync.Pool{
	New: func() any { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node any) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node any, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[any]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[any]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val any, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRuleWrap(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRuleMemoize(rule *rule) (any, bool) {
	res, ok := p.getMemoized(rule)
	if ok {
		p.restore(res.end)
		return res.v, res.b
	}

	startMark := p.pt
	val, ok := p.parseRule(rule)
	p.setMemoized(startMark, rule, resultTuple{val, ok, p.pt})

	return val, ok
}

func (p *parser) parseRuleWrap(rule *rule) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}
	var (
		val       any
		ok        bool
		startMark = p.pt
	)

	if p.memoize {
		val, ok = p.parseRuleMemoize(rule)
	} else {
		val, ok = p.parseRule(rule)
	}

	if ok && p.debug {
		p.printIndent("MATCH", string(p.sliceFrom(startMark)))
	}
	return val, ok
}

func (p *parser) parseRule(rule *rule) (any, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExprWrap(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExprWrap(expr any) (any, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	val, ok := p.parseExpr(expr)

	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr any) (any, bool) {
	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val any
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExprWrap(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.printIndent("MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExprWrap(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExprWrap(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExprWrap(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExprWrap(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExprWrap(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRuleWrap(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]any, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExprWrap(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExprWrap(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExprWrap(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
