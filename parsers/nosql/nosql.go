// Code generated by pigeon; DO NOT EDIT.

package nosql

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"sync"
	"unicode"
	"unicode/utf8"

	"github.com/pikami/cosmium/parsers"
)

func makeSelectStmt(
	columns, table, joinItems,
	whereClause interface{}, distinctClause interface{},
	count interface{}, groupByClause interface{}, orderList interface{},
	offsetClause interface{},
) (parsers.SelectStmt, error) {
	selectStmt := parsers.SelectStmt{
		SelectItems: columns.([]parsers.SelectItem),
		Table:       table.(parsers.Table),
	}

	if joinItemsArray, ok := joinItems.([]interface{}); ok && len(joinItemsArray) > 0 {
		selectStmt.JoinItems = make([]parsers.JoinItem, len(joinItemsArray))
		for i, joinItem := range joinItemsArray {
			selectStmt.JoinItems[i] = joinItem.(parsers.JoinItem)
		}
	}

	switch v := whereClause.(type) {
	case parsers.ComparisonExpression, parsers.LogicalExpression, parsers.Constant, parsers.SelectItem:
		selectStmt.Filters = v
	}

	if distinctClause != nil {
		selectStmt.Distinct = true
	}

	if n, ok := count.(int); ok {
		selectStmt.Count = n
	}

	if offsetArr, ok := offsetClause.([]interface{}); ok && len(offsetArr) == 2 {
		if n, ok := offsetArr[0].(int); ok {
			selectStmt.Offset = n
		}

		if n, ok := offsetArr[1].(int); ok {
			selectStmt.Count = n
		}
	}

	if orderExpressions, ok := orderList.([]parsers.OrderExpression); ok {
		selectStmt.OrderExpressions = orderExpressions
	}

	if groupByClause != nil {
		selectStmt.GroupBy = groupByClause.([]parsers.SelectItem)
	}

	return selectStmt, nil
}

func makeJoin(table interface{}, column interface{}) (parsers.JoinItem, error) {
	return parsers.JoinItem{
		Table:      table.(parsers.Table),
		SelectItem: column.(parsers.SelectItem),
	}, nil
}

func makeSelectItem(name interface{}, path interface{}, selectItemType parsers.SelectItemType) (parsers.SelectItem, error) {
	ps := path.([]interface{})

	paths := make([]string, 1)
	paths[0] = name.(string)
	for _, p := range ps {
		paths = append(paths, p.(string))
	}

	return parsers.SelectItem{Path: paths, Type: selectItemType}, nil
}

func makeColumnList(column interface{}, other_columns interface{}) ([]parsers.SelectItem, error) {
	collsAsArray := other_columns.([]interface{})
	columnList := make([]parsers.SelectItem, len(collsAsArray)+1)
	columnList[0] = column.(parsers.SelectItem)

	for i, v := range collsAsArray {
		if col, ok := v.(parsers.SelectItem); ok {
			columnList[i+1] = col
		}
	}

	return columnList, nil
}

func makeSelectArray(columns interface{}) (parsers.SelectItem, error) {
	return parsers.SelectItem{
		SelectItems: columns.([]parsers.SelectItem),
		Type:        parsers.SelectItemTypeArray,
	}, nil
}

func makeSelectObject(field interface{}, other_fields interface{}) (parsers.SelectItem, error) {
	fieldsAsArray := other_fields.([]interface{})
	fieldsList := make([]parsers.SelectItem, len(fieldsAsArray)+1)
	fieldsList[0] = field.(parsers.SelectItem)

	for i, v := range fieldsAsArray {
		if col, ok := v.(parsers.SelectItem); ok {
			fieldsList[i+1] = col
		}
	}

	return parsers.SelectItem{
		SelectItems: fieldsList,
		Type:        parsers.SelectItemTypeObject,
	}, nil
}

func makeOrderByClause(ex1 interface{}, others interface{}) ([]parsers.OrderExpression, error) {
	othersArray := others.([]interface{})
	orderList := make([]parsers.OrderExpression, len(othersArray)+1)
	orderList[0] = ex1.(parsers.OrderExpression)

	for i, v := range othersArray {
		if col, ok := v.(parsers.OrderExpression); ok {
			orderList[i+1] = col
		}
	}

	return orderList, nil
}

func makeOrderExpression(field interface{}, order interface{}) (parsers.OrderExpression, error) {
	value := parsers.OrderExpression{
		SelectItem: field.(parsers.SelectItem),
		Direction:  parsers.OrderDirectionAsc,
	}

	if orderValue, ok := order.(parsers.OrderDirection); ok {
		value.Direction = orderValue
	}

	return value, nil
}

func createFunctionCall(functionType parsers.FunctionCallType, arguments []interface{}) (parsers.FunctionCall, error) {
	return parsers.FunctionCall{Type: functionType, Arguments: arguments}, nil
}

func joinStrings(array []interface{}) string {
	var stringsArray []string
	for _, elem := range array {
		str, ok := elem.(string)
		if !ok {
			continue
		}
		stringsArray = append(stringsArray, str)
	}

	return strings.Join(stringsArray, "")
}

func combineExpressions(ex1 interface{}, exs interface{}, operation parsers.LogicalExpressionType) (interface{}, error) {
	if exs == nil || len(exs.([]interface{})) < 1 {
		return ex1, nil
	}

	return parsers.LogicalExpression{
		Expressions: append([]interface{}{ex1}, exs.([]interface{})...),
		Operation:   operation,
	}, nil
}

var g = &grammar{
	rules: []*rule{
		{
			name: "Input",
			pos:  position{line: 172, col: 1, offset: 4681},
			expr: &actionExpr{
				pos: position{line: 172, col: 10, offset: 4690},
				run: (*parser).callonInput1,
				expr: &labeledExpr{
					pos:   position{line: 172, col: 10, offset: 4690},
					label: "selectStmt",
					expr: &ruleRefExpr{
						pos:  position{line: 172, col: 21, offset: 4701},
						name: "SelectStmt",
					},
				},
			},
		},
		{
			name: "SelectStmt",
			pos:  position{line: 176, col: 1, offset: 4744},
			expr: &actionExpr{
				pos: position{line: 176, col: 15, offset: 4758},
				run: (*parser).callonSelectStmt1,
				expr: &seqExpr{
					pos: position{line: 176, col: 15, offset: 4758},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 176, col: 15, offset: 4758},
							name: "Select",
						},
						&ruleRefExpr{
							pos:  position{line: 176, col: 22, offset: 4765},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 177, col: 5, offset: 4772},
							label: "distinctClause",
							expr: &zeroOrOneExpr{
								pos: position{line: 177, col: 20, offset: 4787},
								expr: &ruleRefExpr{
									pos:  position{line: 177, col: 20, offset: 4787},
									name: "DistinctClause",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 177, col: 36, offset: 4803},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 178, col: 5, offset: 4810},
							label: "topClause",
							expr: &zeroOrOneExpr{
								pos: position{line: 178, col: 15, offset: 4820},
								expr: &ruleRefExpr{
									pos:  position{line: 178, col: 15, offset: 4820},
									name: "TopClause",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 178, col: 26, offset: 4831},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 179, col: 5, offset: 4838},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 179, col: 13, offset: 4846},
								name: "Selection",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 179, col: 23, offset: 4856},
							name: "ws",
						},
						&ruleRefExpr{
							pos:  position{line: 180, col: 5, offset: 4863},
							name: "From",
						},
						&ruleRefExpr{
							pos:  position{line: 180, col: 10, offset: 4868},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 180, col: 13, offset: 4871},
							label: "table",
							expr: &ruleRefExpr{
								pos:  position{line: 180, col: 19, offset: 4877},
								name: "TableName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 180, col: 29, offset: 4887},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 181, col: 5, offset: 4894},
							label: "joinClauses",
							expr: &zeroOrMoreExpr{
								pos: position{line: 181, col: 17, offset: 4906},
								expr: &ruleRefExpr{
									pos:  position{line: 181, col: 17, offset: 4906},
									name: "JoinClause",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 181, col: 29, offset: 4918},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 182, col: 5, offset: 4925},
							label: "whereClause",
							expr: &zeroOrOneExpr{
								pos: position{line: 182, col: 17, offset: 4937},
								expr: &actionExpr{
									pos: position{line: 182, col: 18, offset: 4938},
									run: (*parser).callonSelectStmt27,
									expr: &seqExpr{
										pos: position{line: 182, col: 18, offset: 4938},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 182, col: 18, offset: 4938},
												name: "ws",
											},
											&ruleRefExpr{
												pos:  position{line: 182, col: 21, offset: 4941},
												name: "Where",
											},
											&ruleRefExpr{
												pos:  position{line: 182, col: 27, offset: 4947},
												name: "ws",
											},
											&labeledExpr{
												pos:   position{line: 182, col: 30, offset: 4950},
												label: "condition",
												expr: &ruleRefExpr{
													pos:  position{line: 182, col: 40, offset: 4960},
													name: "Condition",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 183, col: 5, offset: 5002},
							label: "groupByClause",
							expr: &zeroOrOneExpr{
								pos: position{line: 183, col: 19, offset: 5016},
								expr: &actionExpr{
									pos: position{line: 183, col: 20, offset: 5017},
									run: (*parser).callonSelectStmt36,
									expr: &seqExpr{
										pos: position{line: 183, col: 20, offset: 5017},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 183, col: 20, offset: 5017},
												name: "ws",
											},
											&ruleRefExpr{
												pos:  position{line: 183, col: 23, offset: 5020},
												name: "GroupBy",
											},
											&ruleRefExpr{
												pos:  position{line: 183, col: 31, offset: 5028},
												name: "ws",
											},
											&labeledExpr{
												pos:   position{line: 183, col: 34, offset: 5031},
												label: "columns",
												expr: &ruleRefExpr{
													pos:  position{line: 183, col: 42, offset: 5039},
													name: "ColumnList",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 184, col: 5, offset: 5080},
							label: "orderByClause",
							expr: &zeroOrOneExpr{
								pos: position{line: 184, col: 19, offset: 5094},
								expr: &ruleRefExpr{
									pos:  position{line: 184, col: 19, offset: 5094},
									name: "OrderByClause",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 185, col: 5, offset: 5113},
							label: "offsetClause",
							expr: &zeroOrOneExpr{
								pos: position{line: 185, col: 18, offset: 5126},
								expr: &ruleRefExpr{
									pos:  position{line: 185, col: 18, offset: 5126},
									name: "OffsetClause",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DistinctClause",
			pos:  position{line: 190, col: 1, offset: 5292},
			expr: &litMatcher{
				pos:        position{line: 190, col: 19, offset: 5310},
				val:        "distinct",
				ignoreCase: true,
				want:       "\"DISTINCT\"i",
			},
		},
		{
			name: "TopClause",
			pos:  position{line: 192, col: 1, offset: 5323},
			expr: &actionExpr{
				pos: position{line: 192, col: 14, offset: 5336},
				run: (*parser).callonTopClause1,
				expr: &seqExpr{
					pos: position{line: 192, col: 14, offset: 5336},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 192, col: 14, offset: 5336},
							name: "Top",
						},
						&ruleRefExpr{
							pos:  position{line: 192, col: 18, offset: 5340},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 192, col: 21, offset: 5343},
							label: "count",
							expr: &ruleRefExpr{
								pos:  position{line: 192, col: 27, offset: 5349},
								name: "Integer",
							},
						},
					},
				},
			},
		},
		{
			name: "JoinClause",
			pos:  position{line: 196, col: 1, offset: 5384},
			expr: &actionExpr{
				pos: position{line: 196, col: 15, offset: 5398},
				run: (*parser).callonJoinClause1,
				expr: &seqExpr{
					pos: position{line: 196, col: 15, offset: 5398},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 196, col: 15, offset: 5398},
							name: "Join",
						},
						&ruleRefExpr{
							pos:  position{line: 196, col: 20, offset: 5403},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 196, col: 23, offset: 5406},
							label: "table",
							expr: &ruleRefExpr{
								pos:  position{line: 196, col: 29, offset: 5412},
								name: "TableName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 196, col: 39, offset: 5422},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 196, col: 42, offset: 5425},
							val:        "in",
							ignoreCase: true,
							want:       "\"IN\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 196, col: 48, offset: 5431},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 196, col: 51, offset: 5434},
							label: "column",
							expr: &ruleRefExpr{
								pos:  position{line: 196, col: 58, offset: 5441},
								name: "SelectItem",
							},
						},
					},
				},
			},
		},
		{
			name: "OffsetClause",
			pos:  position{line: 200, col: 1, offset: 5492},
			expr: &actionExpr{
				pos: position{line: 200, col: 17, offset: 5508},
				run: (*parser).callonOffsetClause1,
				expr: &seqExpr{
					pos: position{line: 200, col: 17, offset: 5508},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 200, col: 17, offset: 5508},
							val:        "offset",
							ignoreCase: true,
							want:       "\"OFFSET\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 200, col: 27, offset: 5518},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 200, col: 30, offset: 5521},
							label: "offset",
							expr: &ruleRefExpr{
								pos:  position{line: 200, col: 37, offset: 5528},
								name: "IntegerLiteral",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 200, col: 52, offset: 5543},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 200, col: 55, offset: 5546},
							val:        "limit",
							ignoreCase: true,
							want:       "\"LIMIT\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 200, col: 64, offset: 5555},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 200, col: 67, offset: 5558},
							label: "limit",
							expr: &ruleRefExpr{
								pos:  position{line: 200, col: 73, offset: 5564},
								name: "IntegerLiteral",
							},
						},
					},
				},
			},
		},
		{
			name: "Selection",
			pos:  position{line: 204, col: 1, offset: 5679},
			expr: &choiceExpr{
				pos: position{line: 204, col: 14, offset: 5692},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 204, col: 14, offset: 5692},
						name: "SelectValueSpec",
					},
					&ruleRefExpr{
						pos:  position{line: 204, col: 32, offset: 5710},
						name: "ColumnList",
					},
					&ruleRefExpr{
						pos:  position{line: 204, col: 45, offset: 5723},
						name: "SelectAsterisk",
					},
				},
			},
		},
		{
			name: "SelectAsterisk",
			pos:  position{line: 206, col: 1, offset: 5739},
			expr: &actionExpr{
				pos: position{line: 206, col: 19, offset: 5757},
				run: (*parser).callonSelectAsterisk1,
				expr: &litMatcher{
					pos:        position{line: 206, col: 19, offset: 5757},
					val:        "*",
					ignoreCase: false,
					want:       "\"*\"",
				},
			},
		},
		{
			name: "ColumnList",
			pos:  position{line: 212, col: 1, offset: 5952},
			expr: &actionExpr{
				pos: position{line: 212, col: 15, offset: 5966},
				run: (*parser).callonColumnList1,
				expr: &seqExpr{
					pos: position{line: 212, col: 15, offset: 5966},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 212, col: 15, offset: 5966},
							label: "column",
							expr: &ruleRefExpr{
								pos:  position{line: 212, col: 22, offset: 5973},
								name: "SelectItem",
							},
						},
						&labeledExpr{
							pos:   position{line: 212, col: 33, offset: 5984},
							label: "other_columns",
							expr: &zeroOrMoreExpr{
								pos: position{line: 212, col: 47, offset: 5998},
								expr: &actionExpr{
									pos: position{line: 212, col: 48, offset: 5999},
									run: (*parser).callonColumnList7,
									expr: &seqExpr{
										pos: position{line: 212, col: 48, offset: 5999},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 212, col: 48, offset: 5999},
												name: "ws",
											},
											&litMatcher{
												pos:        position{line: 212, col: 51, offset: 6002},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&ruleRefExpr{
												pos:  position{line: 212, col: 55, offset: 6006},
												name: "ws",
											},
											&labeledExpr{
												pos:   position{line: 212, col: 58, offset: 6009},
												label: "coll",
												expr: &ruleRefExpr{
													pos:  position{line: 212, col: 63, offset: 6014},
													name: "SelectItem",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SelectValueSpec",
			pos:  position{line: 216, col: 1, offset: 6101},
			expr: &actionExpr{
				pos: position{line: 216, col: 20, offset: 6120},
				run: (*parser).callonSelectValueSpec1,
				expr: &seqExpr{
					pos: position{line: 216, col: 20, offset: 6120},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 216, col: 20, offset: 6120},
							val:        "value",
							ignoreCase: true,
							want:       "\"VALUE\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 216, col: 29, offset: 6129},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 216, col: 32, offset: 6132},
							label: "column",
							expr: &ruleRefExpr{
								pos:  position{line: 216, col: 39, offset: 6139},
								name: "SelectItem",
							},
						},
					},
				},
			},
		},
		{
			name: "TableName",
			pos:  position{line: 222, col: 1, offset: 6293},
			expr: &actionExpr{
				pos: position{line: 222, col: 14, offset: 6306},
				run: (*parser).callonTableName1,
				expr: &labeledExpr{
					pos:   position{line: 222, col: 14, offset: 6306},
					label: "key",
					expr: &ruleRefExpr{
						pos:  position{line: 222, col: 18, offset: 6310},
						name: "Identifier",
					},
				},
			},
		},
		{
			name: "SelectArray",
			pos:  position{line: 226, col: 1, offset: 6377},
			expr: &actionExpr{
				pos: position{line: 226, col: 16, offset: 6392},
				run: (*parser).callonSelectArray1,
				expr: &seqExpr{
					pos: position{line: 226, col: 16, offset: 6392},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 226, col: 16, offset: 6392},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&ruleRefExpr{
							pos:  position{line: 226, col: 20, offset: 6396},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 226, col: 23, offset: 6399},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 226, col: 31, offset: 6407},
								name: "ColumnList",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 226, col: 42, offset: 6418},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 226, col: 45, offset: 6421},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "SelectObject",
			pos:  position{line: 230, col: 1, offset: 6466},
			expr: &actionExpr{
				pos: position{line: 230, col: 17, offset: 6482},
				run: (*parser).callonSelectObject1,
				expr: &seqExpr{
					pos: position{line: 230, col: 17, offset: 6482},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 230, col: 17, offset: 6482},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&ruleRefExpr{
							pos:  position{line: 230, col: 21, offset: 6486},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 230, col: 24, offset: 6489},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 230, col: 30, offset: 6495},
								name: "SelectObjectField",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 230, col: 48, offset: 6513},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 230, col: 51, offset: 6516},
							label: "other_fields",
							expr: &zeroOrMoreExpr{
								pos: position{line: 230, col: 64, offset: 6529},
								expr: &actionExpr{
									pos: position{line: 230, col: 65, offset: 6530},
									run: (*parser).callonSelectObject10,
									expr: &seqExpr{
										pos: position{line: 230, col: 65, offset: 6530},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 230, col: 65, offset: 6530},
												name: "ws",
											},
											&litMatcher{
												pos:        position{line: 230, col: 68, offset: 6533},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&ruleRefExpr{
												pos:  position{line: 230, col: 72, offset: 6537},
												name: "ws",
											},
											&labeledExpr{
												pos:   position{line: 230, col: 75, offset: 6540},
												label: "coll",
												expr: &ruleRefExpr{
													pos:  position{line: 230, col: 80, offset: 6545},
													name: "SelectObjectField",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 230, col: 120, offset: 6585},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 230, col: 123, offset: 6588},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "SelectObjectField",
			pos:  position{line: 234, col: 1, offset: 6646},
			expr: &actionExpr{
				pos: position{line: 234, col: 22, offset: 6667},
				run: (*parser).callonSelectObjectField1,
				expr: &seqExpr{
					pos: position{line: 234, col: 22, offset: 6667},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 234, col: 22, offset: 6667},
							label: "name",
							expr: &choiceExpr{
								pos: position{line: 234, col: 28, offset: 6673},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 234, col: 28, offset: 6673},
										name: "Identifier",
									},
									&actionExpr{
										pos: position{line: 234, col: 41, offset: 6686},
										run: (*parser).callonSelectObjectField6,
										expr: &seqExpr{
											pos: position{line: 234, col: 41, offset: 6686},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 234, col: 41, offset: 6686},
													val:        "\"",
													ignoreCase: false,
													want:       "\"\\\"\"",
												},
												&labeledExpr{
													pos:   position{line: 234, col: 46, offset: 6691},
													label: "key",
													expr: &ruleRefExpr{
														pos:  position{line: 234, col: 50, offset: 6695},
														name: "Identifier",
													},
												},
												&litMatcher{
													pos:        position{line: 234, col: 61, offset: 6706},
													val:        "\"",
													ignoreCase: false,
													want:       "\"\\\"\"",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 234, col: 87, offset: 6732},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 234, col: 90, offset: 6735},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&ruleRefExpr{
							pos:  position{line: 234, col: 94, offset: 6739},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 234, col: 97, offset: 6742},
							label: "selectItem",
							expr: &ruleRefExpr{
								pos:  position{line: 234, col: 108, offset: 6753},
								name: "SelectItem",
							},
						},
					},
				},
			},
		},
		{
			name: "SelectProperty",
			pos:  position{line: 240, col: 1, offset: 6859},
			expr: &actionExpr{
				pos: position{line: 240, col: 19, offset: 6877},
				run: (*parser).callonSelectProperty1,
				expr: &seqExpr{
					pos: position{line: 240, col: 19, offset: 6877},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 240, col: 19, offset: 6877},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 240, col: 24, offset: 6882},
								name: "Identifier",
							},
						},
						&labeledExpr{
							pos:   position{line: 240, col: 35, offset: 6893},
							label: "path",
							expr: &zeroOrMoreExpr{
								pos: position{line: 240, col: 40, offset: 6898},
								expr: &choiceExpr{
									pos: position{line: 240, col: 41, offset: 6899},
									alternatives: []any{
										&ruleRefExpr{
											pos:  position{line: 240, col: 41, offset: 6899},
											name: "DotFieldAccess",
										},
										&ruleRefExpr{
											pos:  position{line: 240, col: 58, offset: 6916},
											name: "ArrayFieldAccess",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SelectItem",
			pos:  position{line: 244, col: 1, offset: 7007},
			expr: &actionExpr{
				pos: position{line: 244, col: 15, offset: 7021},
				run: (*parser).callonSelectItem1,
				expr: &seqExpr{
					pos: position{line: 244, col: 15, offset: 7021},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 244, col: 15, offset: 7021},
							label: "selectItem",
							expr: &choiceExpr{
								pos: position{line: 244, col: 27, offset: 7033},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 244, col: 27, offset: 7033},
										name: "Literal",
									},
									&ruleRefExpr{
										pos:  position{line: 244, col: 37, offset: 7043},
										name: "FunctionCall",
									},
									&ruleRefExpr{
										pos:  position{line: 244, col: 52, offset: 7058},
										name: "SelectArray",
									},
									&ruleRefExpr{
										pos:  position{line: 244, col: 66, offset: 7072},
										name: "SelectObject",
									},
									&ruleRefExpr{
										pos:  position{line: 244, col: 81, offset: 7087},
										name: "SelectProperty",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 244, col: 97, offset: 7103},
							label: "asClause",
							expr: &zeroOrOneExpr{
								pos: position{line: 244, col: 106, offset: 7112},
								expr: &ruleRefExpr{
									pos:  position{line: 244, col: 106, offset: 7112},
									name: "AsClause",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AsClause",
			pos:  position{line: 268, col: 1, offset: 7710},
			expr: &actionExpr{
				pos: position{line: 268, col: 13, offset: 7722},
				run: (*parser).callonAsClause1,
				expr: &seqExpr{
					pos: position{line: 268, col: 13, offset: 7722},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 268, col: 13, offset: 7722},
							name: "ws",
						},
						&ruleRefExpr{
							pos:  position{line: 268, col: 16, offset: 7725},
							name: "As",
						},
						&ruleRefExpr{
							pos:  position{line: 268, col: 19, offset: 7728},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 268, col: 22, offset: 7731},
							label: "alias",
							expr: &ruleRefExpr{
								pos:  position{line: 268, col: 28, offset: 7737},
								name: "Identifier",
							},
						},
					},
				},
			},
		},
		{
			name: "DotFieldAccess",
			pos:  position{line: 270, col: 1, offset: 7771},
			expr: &actionExpr{
				pos: position{line: 270, col: 19, offset: 7789},
				run: (*parser).callonDotFieldAccess1,
				expr: &seqExpr{
					pos: position{line: 270, col: 19, offset: 7789},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 270, col: 19, offset: 7789},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 270, col: 23, offset: 7793},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 270, col: 26, offset: 7796},
								name: "Identifier",
							},
						},
					},
				},
			},
		},
		{
			name: "ArrayFieldAccess",
			pos:  position{line: 274, col: 1, offset: 7831},
			expr: &choiceExpr{
				pos: position{line: 274, col: 21, offset: 7851},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 274, col: 21, offset: 7851},
						run: (*parser).callonArrayFieldAccess2,
						expr: &seqExpr{
							pos: position{line: 274, col: 21, offset: 7851},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 274, col: 21, offset: 7851},
									val:        "[\"",
									ignoreCase: false,
									want:       "\"[\\\"\"",
								},
								&labeledExpr{
									pos:   position{line: 274, col: 27, offset: 7857},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 274, col: 30, offset: 7860},
										name: "Identifier",
									},
								},
								&litMatcher{
									pos:        position{line: 274, col: 41, offset: 7871},
									val:        "\"]",
									ignoreCase: false,
									want:       "\"\\\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 275, col: 5, offset: 7900},
						run: (*parser).callonArrayFieldAccess8,
						expr: &seqExpr{
							pos: position{line: 275, col: 5, offset: 7900},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 275, col: 5, offset: 7900},
									val:        "[",
									ignoreCase: false,
									want:       "\"[\"",
								},
								&labeledExpr{
									pos:   position{line: 275, col: 9, offset: 7904},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 275, col: 12, offset: 7907},
										name: "Integer",
									},
								},
								&litMatcher{
									pos:        position{line: 275, col: 20, offset: 7915},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Identifier",
			pos:  position{line: 277, col: 1, offset: 7959},
			expr: &actionExpr{
				pos: position{line: 277, col: 15, offset: 7973},
				run: (*parser).callonIdentifier1,
				expr: &seqExpr{
					pos: position{line: 277, col: 15, offset: 7973},
					exprs: []any{
						&charClassMatcher{
							pos:        position{line: 277, col: 15, offset: 7973},
							val:        "[a-zA-Z_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z'},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 277, col: 24, offset: 7982},
							expr: &charClassMatcher{
								pos:        position{line: 277, col: 24, offset: 7982},
								val:        "[a-zA-Z0-9_]",
								chars:      []rune{'_'},
								ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "Condition",
			pos:  position{line: 281, col: 1, offset: 8032},
			expr: &actionExpr{
				pos: position{line: 281, col: 14, offset: 8045},
				run: (*parser).callonCondition1,
				expr: &labeledExpr{
					pos:   position{line: 281, col: 14, offset: 8045},
					label: "expression",
					expr: &ruleRefExpr{
						pos:  position{line: 281, col: 25, offset: 8056},
						name: "OrExpression",
					},
				},
			},
		},
		{
			name: "OrExpression",
			pos:  position{line: 285, col: 1, offset: 8101},
			expr: &actionExpr{
				pos: position{line: 285, col: 17, offset: 8117},
				run: (*parser).callonOrExpression1,
				expr: &seqExpr{
					pos: position{line: 285, col: 17, offset: 8117},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 285, col: 17, offset: 8117},
							label: "ex1",
							expr: &ruleRefExpr{
								pos:  position{line: 285, col: 21, offset: 8121},
								name: "AndExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 285, col: 35, offset: 8135},
							label: "ex2",
							expr: &zeroOrMoreExpr{
								pos: position{line: 285, col: 39, offset: 8139},
								expr: &actionExpr{
									pos: position{line: 285, col: 40, offset: 8140},
									run: (*parser).callonOrExpression7,
									expr: &seqExpr{
										pos: position{line: 285, col: 40, offset: 8140},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 285, col: 40, offset: 8140},
												name: "ws",
											},
											&ruleRefExpr{
												pos:  position{line: 285, col: 43, offset: 8143},
												name: "Or",
											},
											&ruleRefExpr{
												pos:  position{line: 285, col: 46, offset: 8146},
												name: "ws",
											},
											&labeledExpr{
												pos:   position{line: 285, col: 49, offset: 8149},
												label: "ex",
												expr: &ruleRefExpr{
													pos:  position{line: 285, col: 52, offset: 8152},
													name: "AndExpression",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AndExpression",
			pos:  position{line: 289, col: 1, offset: 8265},
			expr: &actionExpr{
				pos: position{line: 289, col: 18, offset: 8282},
				run: (*parser).callonAndExpression1,
				expr: &seqExpr{
					pos: position{line: 289, col: 18, offset: 8282},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 289, col: 18, offset: 8282},
							label: "ex1",
							expr: &ruleRefExpr{
								pos:  position{line: 289, col: 22, offset: 8286},
								name: "ComparisonExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 289, col: 43, offset: 8307},
							label: "ex2",
							expr: &zeroOrMoreExpr{
								pos: position{line: 289, col: 47, offset: 8311},
								expr: &actionExpr{
									pos: position{line: 289, col: 48, offset: 8312},
									run: (*parser).callonAndExpression7,
									expr: &seqExpr{
										pos: position{line: 289, col: 48, offset: 8312},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 289, col: 48, offset: 8312},
												name: "ws",
											},
											&ruleRefExpr{
												pos:  position{line: 289, col: 51, offset: 8315},
												name: "And",
											},
											&ruleRefExpr{
												pos:  position{line: 289, col: 55, offset: 8319},
												name: "ws",
											},
											&labeledExpr{
												pos:   position{line: 289, col: 58, offset: 8322},
												label: "ex",
												expr: &ruleRefExpr{
													pos:  position{line: 289, col: 61, offset: 8325},
													name: "ComparisonExpression",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ComparisonExpression",
			pos:  position{line: 293, col: 1, offset: 8446},
			expr: &choiceExpr{
				pos: position{line: 293, col: 25, offset: 8470},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 293, col: 25, offset: 8470},
						run: (*parser).callonComparisonExpression2,
						expr: &seqExpr{
							pos: position{line: 293, col: 25, offset: 8470},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 293, col: 25, offset: 8470},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&ruleRefExpr{
									pos:  position{line: 293, col: 29, offset: 8474},
									name: "ws",
								},
								&labeledExpr{
									pos:   position{line: 293, col: 32, offset: 8477},
									label: "ex",
									expr: &ruleRefExpr{
										pos:  position{line: 293, col: 35, offset: 8480},
										name: "OrExpression",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 293, col: 48, offset: 8493},
									name: "ws",
								},
								&litMatcher{
									pos:        position{line: 293, col: 51, offset: 8496},
									val:        ")",
									ignoreCase: false,
									want:       "\")\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 294, col: 7, offset: 8525},
						run: (*parser).callonComparisonExpression10,
						expr: &seqExpr{
							pos: position{line: 294, col: 7, offset: 8525},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 294, col: 7, offset: 8525},
									label: "left",
									expr: &ruleRefExpr{
										pos:  position{line: 294, col: 12, offset: 8530},
										name: "SelectItem",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 294, col: 23, offset: 8541},
									name: "ws",
								},
								&labeledExpr{
									pos:   position{line: 294, col: 26, offset: 8544},
									label: "op",
									expr: &ruleRefExpr{
										pos:  position{line: 294, col: 29, offset: 8547},
										name: "ComparisonOperator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 294, col: 48, offset: 8566},
									name: "ws",
								},
								&labeledExpr{
									pos:   position{line: 294, col: 51, offset: 8569},
									label: "right",
									expr: &ruleRefExpr{
										pos:  position{line: 294, col: 57, offset: 8575},
										name: "SelectItem",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 296, col: 5, offset: 8682},
						run: (*parser).callonComparisonExpression20,
						expr: &labeledExpr{
							pos:   position{line: 296, col: 5, offset: 8682},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 296, col: 8, offset: 8685},
								name: "BooleanLiteral",
							},
						},
					},
					&actionExpr{
						pos: position{line: 297, col: 5, offset: 8723},
						run: (*parser).callonComparisonExpression23,
						expr: &labeledExpr{
							pos:   position{line: 297, col: 5, offset: 8723},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 297, col: 8, offset: 8726},
								name: "SelectItem",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderByClause",
			pos:  position{line: 299, col: 1, offset: 8757},
			expr: &actionExpr{
				pos: position{line: 299, col: 18, offset: 8774},
				run: (*parser).callonOrderByClause1,
				expr: &seqExpr{
					pos: position{line: 299, col: 18, offset: 8774},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 299, col: 18, offset: 8774},
							name: "OrderBy",
						},
						&ruleRefExpr{
							pos:  position{line: 299, col: 26, offset: 8782},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 299, col: 29, offset: 8785},
							label: "ex1",
							expr: &ruleRefExpr{
								pos:  position{line: 299, col: 33, offset: 8789},
								name: "OrderExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 299, col: 49, offset: 8805},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 299, col: 56, offset: 8812},
								expr: &actionExpr{
									pos: position{line: 299, col: 57, offset: 8813},
									run: (*parser).callonOrderByClause9,
									expr: &seqExpr{
										pos: position{line: 299, col: 57, offset: 8813},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 299, col: 57, offset: 8813},
												name: "ws",
											},
											&litMatcher{
												pos:        position{line: 299, col: 60, offset: 8816},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&ruleRefExpr{
												pos:  position{line: 299, col: 64, offset: 8820},
												name: "ws",
											},
											&labeledExpr{
												pos:   position{line: 299, col: 67, offset: 8823},
												label: "ex",
												expr: &ruleRefExpr{
													pos:  position{line: 299, col: 70, offset: 8826},
													name: "OrderExpression",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OrderExpression",
			pos:  position{line: 303, col: 1, offset: 8910},
			expr: &actionExpr{
				pos: position{line: 303, col: 20, offset: 8929},
				run: (*parser).callonOrderExpression1,
				expr: &seqExpr{
					pos: position{line: 303, col: 20, offset: 8929},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 303, col: 20, offset: 8929},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 303, col: 26, offset: 8935},
								name: "SelectProperty",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 303, col: 41, offset: 8950},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 303, col: 44, offset: 8953},
							label: "order",
							expr: &zeroOrOneExpr{
								pos: position{line: 303, col: 50, offset: 8959},
								expr: &ruleRefExpr{
									pos:  position{line: 303, col: 50, offset: 8959},
									name: "OrderDirection",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OrderDirection",
			pos:  position{line: 307, col: 1, offset: 9025},
			expr: &actionExpr{
				pos: position{line: 307, col: 19, offset: 9043},
				run: (*parser).callonOrderDirection1,
				expr: &choiceExpr{
					pos: position{line: 307, col: 20, offset: 9044},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 307, col: 20, offset: 9044},
							val:        "asc",
							ignoreCase: true,
							want:       "\"ASC\"i",
						},
						&litMatcher{
							pos:        position{line: 307, col: 29, offset: 9053},
							val:        "desc",
							ignoreCase: true,
							want:       "\"DESC\"i",
						},
					},
				},
			},
		},
		{
			name: "Select",
			pos:  position{line: 315, col: 1, offset: 9205},
			expr: &litMatcher{
				pos:        position{line: 315, col: 11, offset: 9215},
				val:        "select",
				ignoreCase: true,
				want:       "\"SELECT\"i",
			},
		},
		{
			name: "Top",
			pos:  position{line: 317, col: 1, offset: 9226},
			expr: &litMatcher{
				pos:        position{line: 317, col: 8, offset: 9233},
				val:        "top",
				ignoreCase: true,
				want:       "\"TOP\"i",
			},
		},
		{
			name: "As",
			pos:  position{line: 319, col: 1, offset: 9241},
			expr: &litMatcher{
				pos:        position{line: 319, col: 7, offset: 9247},
				val:        "as",
				ignoreCase: true,
				want:       "\"AS\"i",
			},
		},
		{
			name: "From",
			pos:  position{line: 321, col: 1, offset: 9254},
			expr: &litMatcher{
				pos:        position{line: 321, col: 9, offset: 9262},
				val:        "from",
				ignoreCase: true,
				want:       "\"FROM\"i",
			},
		},
		{
			name: "Join",
			pos:  position{line: 323, col: 1, offset: 9271},
			expr: &litMatcher{
				pos:        position{line: 323, col: 9, offset: 9279},
				val:        "join",
				ignoreCase: true,
				want:       "\"JOIN\"i",
			},
		},
		{
			name: "Where",
			pos:  position{line: 325, col: 1, offset: 9288},
			expr: &litMatcher{
				pos:        position{line: 325, col: 10, offset: 9297},
				val:        "where",
				ignoreCase: true,
				want:       "\"WHERE\"i",
			},
		},
		{
			name: "And",
			pos:  position{line: 327, col: 1, offset: 9307},
			expr: &litMatcher{
				pos:        position{line: 327, col: 8, offset: 9314},
				val:        "and",
				ignoreCase: true,
				want:       "\"AND\"i",
			},
		},
		{
			name: "Or",
			pos:  position{line: 329, col: 1, offset: 9322},
			expr: &litMatcher{
				pos:        position{line: 329, col: 7, offset: 9328},
				val:        "or",
				ignoreCase: true,
				want:       "\"OR\"i",
			},
		},
		{
			name: "GroupBy",
			pos:  position{line: 331, col: 1, offset: 9335},
			expr: &seqExpr{
				pos: position{line: 331, col: 12, offset: 9346},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 331, col: 12, offset: 9346},
						val:        "group",
						ignoreCase: true,
						want:       "\"GROUP\"i",
					},
					&ruleRefExpr{
						pos:  position{line: 331, col: 21, offset: 9355},
						name: "ws",
					},
					&litMatcher{
						pos:        position{line: 331, col: 24, offset: 9358},
						val:        "by",
						ignoreCase: true,
						want:       "\"BY\"i",
					},
				},
			},
		},
		{
			name: "OrderBy",
			pos:  position{line: 333, col: 1, offset: 9365},
			expr: &seqExpr{
				pos: position{line: 333, col: 12, offset: 9376},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 333, col: 12, offset: 9376},
						val:        "order",
						ignoreCase: true,
						want:       "\"ORDER\"i",
					},
					&ruleRefExpr{
						pos:  position{line: 333, col: 21, offset: 9385},
						name: "ws",
					},
					&litMatcher{
						pos:        position{line: 333, col: 24, offset: 9388},
						val:        "by",
						ignoreCase: true,
						want:       "\"BY\"i",
					},
				},
			},
		},
		{
			name: "ComparisonOperator",
			pos:  position{line: 335, col: 1, offset: 9395},
			expr: &actionExpr{
				pos: position{line: 335, col: 23, offset: 9417},
				run: (*parser).callonComparisonOperator1,
				expr: &choiceExpr{
					pos: position{line: 335, col: 24, offset: 9418},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 335, col: 24, offset: 9418},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&litMatcher{
							pos:        position{line: 335, col: 30, offset: 9424},
							val:        "!=",
							ignoreCase: false,
							want:       "\"!=\"",
						},
						&litMatcher{
							pos:        position{line: 335, col: 37, offset: 9431},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&litMatcher{
							pos:        position{line: 335, col: 43, offset: 9437},
							val:        "<=",
							ignoreCase: false,
							want:       "\"<=\"",
						},
						&litMatcher{
							pos:        position{line: 335, col: 50, offset: 9444},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&litMatcher{
							pos:        position{line: 335, col: 56, offset: 9450},
							val:        ">=",
							ignoreCase: false,
							want:       "\">=\"",
						},
					},
				},
			},
		},
		{
			name: "Literal",
			pos:  position{line: 339, col: 1, offset: 9492},
			expr: &choiceExpr{
				pos: position{line: 339, col: 12, offset: 9503},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 339, col: 12, offset: 9503},
						name: "FloatLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 339, col: 27, offset: 9518},
						name: "IntegerLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 339, col: 44, offset: 9535},
						name: "StringLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 339, col: 60, offset: 9551},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 339, col: 77, offset: 9568},
						name: "ParameterConstant",
					},
					&ruleRefExpr{
						pos:  position{line: 339, col: 97, offset: 9588},
						name: "NullConstant",
					},
				},
			},
		},
		{
			name: "ParameterConstant",
			pos:  position{line: 341, col: 1, offset: 9602},
			expr: &actionExpr{
				pos: position{line: 341, col: 22, offset: 9623},
				run: (*parser).callonParameterConstant1,
				expr: &seqExpr{
					pos: position{line: 341, col: 22, offset: 9623},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 341, col: 22, offset: 9623},
							val:        "@",
							ignoreCase: false,
							want:       "\"@\"",
						},
						&ruleRefExpr{
							pos:  position{line: 341, col: 26, offset: 9627},
							name: "Identifier",
						},
					},
				},
			},
		},
		{
			name: "NullConstant",
			pos:  position{line: 344, col: 1, offset: 9743},
			expr: &actionExpr{
				pos: position{line: 344, col: 17, offset: 9759},
				run: (*parser).callonNullConstant1,
				expr: &litMatcher{
					pos:        position{line: 344, col: 17, offset: 9759},
					val:        "null",
					ignoreCase: true,
					want:       "\"null\"i",
				},
			},
		},
		{
			name: "IntegerLiteral",
			pos:  position{line: 348, col: 1, offset: 9817},
			expr: &actionExpr{
				pos: position{line: 348, col: 19, offset: 9835},
				run: (*parser).callonIntegerLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 348, col: 19, offset: 9835},
					label: "number",
					expr: &ruleRefExpr{
						pos:  position{line: 348, col: 26, offset: 9842},
						name: "Integer",
					},
				},
			},
		},
		{
			name: "StringLiteral",
			pos:  position{line: 351, col: 1, offset: 9943},
			expr: &actionExpr{
				pos: position{line: 351, col: 18, offset: 9960},
				run: (*parser).callonStringLiteral1,
				expr: &seqExpr{
					pos: position{line: 351, col: 18, offset: 9960},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 351, col: 18, offset: 9960},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 351, col: 23, offset: 9965},
							label: "chars",
							expr: &zeroOrMoreExpr{
								pos: position{line: 351, col: 29, offset: 9971},
								expr: &ruleRefExpr{
									pos:  position{line: 351, col: 29, offset: 9971},
									name: "StringCharacter",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 351, col: 46, offset: 9988},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "FloatLiteral",
			pos:  position{line: 354, col: 1, offset: 10106},
			expr: &actionExpr{
				pos: position{line: 354, col: 17, offset: 10122},
				run: (*parser).callonFloatLiteral1,
				expr: &seqExpr{
					pos: position{line: 354, col: 17, offset: 10122},
					exprs: []any{
						&oneOrMoreExpr{
							pos: position{line: 354, col: 17, offset: 10122},
							expr: &charClassMatcher{
								pos:        position{line: 354, col: 17, offset: 10122},
								val:        "[0-9]",
								ranges:     []rune{'0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&litMatcher{
							pos:        position{line: 354, col: 23, offset: 10128},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 354, col: 26, offset: 10131},
							expr: &charClassMatcher{
								pos:        position{line: 354, col: 26, offset: 10131},
								val:        "[0-9]",
								ranges:     []rune{'0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "BooleanLiteral",
			pos:  position{line: 358, col: 1, offset: 10287},
			expr: &actionExpr{
				pos: position{line: 358, col: 19, offset: 10305},
				run: (*parser).callonBooleanLiteral1,
				expr: &choiceExpr{
					pos: position{line: 358, col: 20, offset: 10306},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 358, col: 20, offset: 10306},
							val:        "true",
							ignoreCase: true,
							want:       "\"true\"i",
						},
						&litMatcher{
							pos:        position{line: 358, col: 30, offset: 10316},
							val:        "false",
							ignoreCase: true,
							want:       "\"false\"i",
						},
					},
				},
			},
		},
		{
			name: "FunctionCall",
			pos:  position{line: 363, col: 1, offset: 10471},
			expr: &choiceExpr{
				pos: position{line: 363, col: 17, offset: 10487},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 363, col: 17, offset: 10487},
						name: "StringFunctions",
					},
					&ruleRefExpr{
						pos:  position{line: 364, col: 7, offset: 10509},
						name: "TypeCheckingFunctions",
					},
					&ruleRefExpr{
						pos:  position{line: 365, col: 7, offset: 10537},
						name: "ArrayFunctions",
					},
					&ruleRefExpr{
						pos:  position{line: 366, col: 7, offset: 10558},
						name: "InFunction",
					},
					&ruleRefExpr{
						pos:  position{line: 367, col: 7, offset: 10575},
						name: "AggregateFunctions",
					},
					&ruleRefExpr{
						pos:  position{line: 368, col: 7, offset: 10600},
						name: "MathFunctions",
					},
				},
			},
		},
		{
			name: "StringFunctions",
			pos:  position{line: 370, col: 1, offset: 10615},
			expr: &choiceExpr{
				pos: position{line: 370, col: 20, offset: 10634},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 370, col: 20, offset: 10634},
						name: "StringEqualsExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 371, col: 7, offset: 10663},
						name: "ToStringExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 372, col: 7, offset: 10688},
						name: "ConcatExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 373, col: 7, offset: 10711},
						name: "ThreeArgumentStringFunctionExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 374, col: 7, offset: 10755},
						name: "UpperExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 375, col: 7, offset: 10777},
						name: "LowerExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 376, col: 7, offset: 10799},
						name: "LeftExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 377, col: 7, offset: 10820},
						name: "LengthExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 378, col: 7, offset: 10843},
						name: "LTrimExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 379, col: 7, offset: 10865},
						name: "ReplaceExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 380, col: 7, offset: 10889},
						name: "ReplicateExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 381, col: 7, offset: 10915},
						name: "ReverseExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 382, col: 7, offset: 10939},
						name: "RightExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 383, col: 7, offset: 10961},
						name: "RTrimExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 384, col: 7, offset: 10983},
						name: "SubstringExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 385, col: 7, offset: 11009},
						name: "TrimExpression",
					},
				},
			},
		},
		{
			name: "TypeCheckingFunctions",
			pos:  position{line: 387, col: 1, offset: 11025},
			expr: &choiceExpr{
				pos: position{line: 387, col: 26, offset: 11050},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 387, col: 26, offset: 11050},
						name: "IsDefined",
					},
					&ruleRefExpr{
						pos:  position{line: 388, col: 7, offset: 11066},
						name: "IsArray",
					},
					&ruleRefExpr{
						pos:  position{line: 389, col: 7, offset: 11080},
						name: "IsBool",
					},
					&ruleRefExpr{
						pos:  position{line: 390, col: 7, offset: 11093},
						name: "IsFiniteNumber",
					},
					&ruleRefExpr{
						pos:  position{line: 391, col: 7, offset: 11114},
						name: "IsInteger",
					},
					&ruleRefExpr{
						pos:  position{line: 392, col: 7, offset: 11130},
						name: "IsNull",
					},
					&ruleRefExpr{
						pos:  position{line: 393, col: 7, offset: 11143},
						name: "IsNumber",
					},
					&ruleRefExpr{
						pos:  position{line: 394, col: 7, offset: 11158},
						name: "IsObject",
					},
					&ruleRefExpr{
						pos:  position{line: 395, col: 7, offset: 11173},
						name: "IsPrimitive",
					},
					&ruleRefExpr{
						pos:  position{line: 396, col: 7, offset: 11191},
						name: "IsString",
					},
				},
			},
		},
		{
			name: "AggregateFunctions",
			pos:  position{line: 398, col: 1, offset: 11201},
			expr: &choiceExpr{
				pos: position{line: 398, col: 23, offset: 11223},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 398, col: 23, offset: 11223},
						name: "AvgAggregateExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 399, col: 7, offset: 11252},
						name: "CountAggregateExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 400, col: 7, offset: 11283},
						name: "MaxAggregateExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 401, col: 7, offset: 11312},
						name: "MinAggregateExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 402, col: 7, offset: 11341},
						name: "SumAggregateExpression",
					},
				},
			},
		},
		{
			name: "ArrayFunctions",
			pos:  position{line: 404, col: 1, offset: 11365},
			expr: &choiceExpr{
				pos: position{line: 404, col: 19, offset: 11383},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 404, col: 19, offset: 11383},
						name: "ArrayConcatExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 405, col: 7, offset: 11411},
						name: "ArrayLengthExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 406, col: 7, offset: 11439},
						name: "ArraySliceExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 407, col: 7, offset: 11466},
						name: "SetIntersectExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 408, col: 7, offset: 11495},
						name: "SetUnionExpression",
					},
				},
			},
		},
		{
			name: "MathFunctions",
			pos:  position{line: 410, col: 1, offset: 11515},
			expr: &choiceExpr{
				pos: position{line: 410, col: 18, offset: 11532},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 410, col: 18, offset: 11532},
						name: "MathAbsExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 411, col: 7, offset: 11556},
						name: "MathAcosExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 412, col: 7, offset: 11581},
						name: "MathAsinExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 413, col: 7, offset: 11606},
						name: "MathAtanExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 414, col: 7, offset: 11631},
						name: "MathCeilingExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 415, col: 7, offset: 11659},
						name: "MathCosExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 416, col: 7, offset: 11683},
						name: "MathCotExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 417, col: 7, offset: 11707},
						name: "MathDegreesExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 418, col: 7, offset: 11735},
						name: "MathExpExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 419, col: 7, offset: 11759},
						name: "MathFloorExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 420, col: 7, offset: 11785},
						name: "MathIntBitNotExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 421, col: 7, offset: 11815},
						name: "MathLog10Expression",
					},
					&ruleRefExpr{
						pos:  position{line: 422, col: 7, offset: 11841},
						name: "MathRadiansExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 423, col: 7, offset: 11869},
						name: "MathRoundExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 424, col: 7, offset: 11895},
						name: "MathSignExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 425, col: 7, offset: 11920},
						name: "MathSinExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 426, col: 7, offset: 11944},
						name: "MathSqrtExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 427, col: 7, offset: 11969},
						name: "MathSquareExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 428, col: 7, offset: 11996},
						name: "MathTanExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 429, col: 7, offset: 12020},
						name: "MathTruncExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 430, col: 7, offset: 12046},
						name: "MathAtn2Expression",
					},
					&ruleRefExpr{
						pos:  position{line: 431, col: 7, offset: 12071},
						name: "MathIntAddExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 432, col: 7, offset: 12098},
						name: "MathIntBitAndExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 433, col: 7, offset: 12128},
						name: "MathIntBitLeftShiftExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 434, col: 7, offset: 12164},
						name: "MathIntBitOrExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 435, col: 7, offset: 12193},
						name: "MathIntBitRightShiftExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 436, col: 7, offset: 12230},
						name: "MathIntBitXorExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 437, col: 7, offset: 12260},
						name: "MathIntDivExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 438, col: 7, offset: 12287},
						name: "MathIntModExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 439, col: 7, offset: 12314},
						name: "MathIntMulExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 440, col: 7, offset: 12341},
						name: "MathIntSubExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 441, col: 7, offset: 12368},
						name: "MathPowerExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 442, col: 7, offset: 12394},
						name: "MathLogExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 443, col: 7, offset: 12418},
						name: "MathNumberBinExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 444, col: 7, offset: 12448},
						name: "MathPiExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 445, col: 7, offset: 12471},
						name: "MathRandExpression",
					},
				},
			},
		},
		{
			name: "UpperExpression",
			pos:  position{line: 447, col: 1, offset: 12491},
			expr: &actionExpr{
				pos: position{line: 447, col: 20, offset: 12510},
				run: (*parser).callonUpperExpression1,
				expr: &seqExpr{
					pos: position{line: 447, col: 20, offset: 12510},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 447, col: 20, offset: 12510},
							val:        "upper",
							ignoreCase: true,
							want:       "\"UPPER\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 447, col: 29, offset: 12519},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 447, col: 32, offset: 12522},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&labeledExpr{
							pos:   position{line: 447, col: 36, offset: 12526},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 447, col: 39, offset: 12529},
								name: "SelectItem",
							},
						},
						&litMatcher{
							pos:        position{line: 447, col: 50, offset: 12540},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "LowerExpression",
			pos:  position{line: 451, col: 1, offset: 12625},
			expr: &actionExpr{
				pos: position{line: 451, col: 20, offset: 12644},
				run: (*parser).callonLowerExpression1,
				expr: &seqExpr{
					pos: position{line: 451, col: 20, offset: 12644},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 451, col: 20, offset: 12644},
							val:        "lower",
							ignoreCase: true,
							want:       "\"LOWER\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 451, col: 29, offset: 12653},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 451, col: 32, offset: 12656},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&labeledExpr{
							pos:   position{line: 451, col: 36, offset: 12660},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 451, col: 39, offset: 12663},
								name: "SelectItem",
							},
						},
						&litMatcher{
							pos:        position{line: 451, col: 50, offset: 12674},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "StringEqualsExpression",
			pos:  position{line: 455, col: 1, offset: 12759},
			expr: &actionExpr{
				pos: position{line: 455, col: 27, offset: 12785},
				run: (*parser).callonStringEqualsExpression1,
				expr: &seqExpr{
					pos: position{line: 455, col: 27, offset: 12785},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 455, col: 27, offset: 12785},
							val:        "stringequals",
							ignoreCase: true,
							want:       "\"STRINGEQUALS\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 455, col: 43, offset: 12801},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 455, col: 46, offset: 12804},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 455, col: 50, offset: 12808},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 455, col: 53, offset: 12811},
							label: "ex1",
							expr: &ruleRefExpr{
								pos:  position{line: 455, col: 57, offset: 12815},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 455, col: 68, offset: 12826},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 455, col: 71, offset: 12829},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 455, col: 75, offset: 12833},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 455, col: 78, offset: 12836},
							label: "ex2",
							expr: &ruleRefExpr{
								pos:  position{line: 455, col: 82, offset: 12840},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 455, col: 93, offset: 12851},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 455, col: 96, offset: 12854},
							label: "ignoreCase",
							expr: &zeroOrOneExpr{
								pos: position{line: 455, col: 107, offset: 12865},
								expr: &actionExpr{
									pos: position{line: 455, col: 108, offset: 12866},
									run: (*parser).callonStringEqualsExpression17,
									expr: &seqExpr{
										pos: position{line: 455, col: 108, offset: 12866},
										exprs: []any{
											&litMatcher{
												pos:        position{line: 455, col: 108, offset: 12866},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&ruleRefExpr{
												pos:  position{line: 455, col: 112, offset: 12870},
												name: "ws",
											},
											&labeledExpr{
												pos:   position{line: 455, col: 115, offset: 12873},
												label: "boolean",
												expr: &ruleRefExpr{
													pos:  position{line: 455, col: 123, offset: 12881},
													name: "SelectItem",
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 455, col: 160, offset: 12918},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "ToStringExpression",
			pos:  position{line: 459, col: 1, offset: 13028},
			expr: &actionExpr{
				pos: position{line: 459, col: 23, offset: 13050},
				run: (*parser).callonToStringExpression1,
				expr: &seqExpr{
					pos: position{line: 459, col: 23, offset: 13050},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 459, col: 23, offset: 13050},
							val:        "tostring",
							ignoreCase: true,
							want:       "\"TOSTRING\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 459, col: 35, offset: 13062},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 459, col: 38, offset: 13065},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 459, col: 42, offset: 13069},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 459, col: 45, offset: 13072},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 459, col: 48, offset: 13075},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 459, col: 59, offset: 13086},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 459, col: 62, offset: 13089},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "ConcatExpression",
			pos:  position{line: 463, col: 1, offset: 13177},
			expr: &actionExpr{
				pos: position{line: 463, col: 21, offset: 13197},
				run: (*parser).callonConcatExpression1,
				expr: &seqExpr{
					pos: position{line: 463, col: 21, offset: 13197},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 463, col: 21, offset: 13197},
							val:        "concat",
							ignoreCase: true,
							want:       "\"CONCAT\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 463, col: 31, offset: 13207},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 463, col: 34, offset: 13210},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 463, col: 38, offset: 13214},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 463, col: 41, offset: 13217},
							label: "ex1",
							expr: &ruleRefExpr{
								pos:  position{line: 463, col: 45, offset: 13221},
								name: "SelectItem",
							},
						},
						&labeledExpr{
							pos:   position{line: 463, col: 56, offset: 13232},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 463, col: 63, offset: 13239},
								expr: &actionExpr{
									pos: position{line: 463, col: 64, offset: 13240},
									run: (*parser).callonConcatExpression11,
									expr: &seqExpr{
										pos: position{line: 463, col: 64, offset: 13240},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 463, col: 64, offset: 13240},
												name: "ws",
											},
											&litMatcher{
												pos:        position{line: 463, col: 67, offset: 13243},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&ruleRefExpr{
												pos:  position{line: 463, col: 71, offset: 13247},
												name: "ws",
											},
											&labeledExpr{
												pos:   position{line: 463, col: 74, offset: 13250},
												label: "ex",
												expr: &ruleRefExpr{
													pos:  position{line: 463, col: 77, offset: 13253},
													name: "SelectItem",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 463, col: 109, offset: 13285},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 463, col: 112, offset: 13288},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "LeftExpression",
			pos:  position{line: 468, col: 1, offset: 13437},
			expr: &actionExpr{
				pos: position{line: 468, col: 19, offset: 13455},
				run: (*parser).callonLeftExpression1,
				expr: &seqExpr{
					pos: position{line: 468, col: 19, offset: 13455},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 468, col: 19, offset: 13455},
							val:        "left",
							ignoreCase: true,
							want:       "\"LEFT\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 468, col: 27, offset: 13463},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 468, col: 30, offset: 13466},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 468, col: 34, offset: 13470},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 468, col: 37, offset: 13473},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 468, col: 40, offset: 13476},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 468, col: 51, offset: 13487},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 468, col: 54, offset: 13490},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 468, col: 58, offset: 13494},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 468, col: 61, offset: 13497},
							label: "length",
							expr: &ruleRefExpr{
								pos:  position{line: 468, col: 68, offset: 13504},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 468, col: 79, offset: 13515},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 468, col: 82, offset: 13518},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "LengthExpression",
			pos:  position{line: 472, col: 1, offset: 13610},
			expr: &actionExpr{
				pos: position{line: 472, col: 21, offset: 13630},
				run: (*parser).callonLengthExpression1,
				expr: &seqExpr{
					pos: position{line: 472, col: 21, offset: 13630},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 472, col: 21, offset: 13630},
							val:        "length",
							ignoreCase: true,
							want:       "\"LENGTH\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 472, col: 31, offset: 13640},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 472, col: 34, offset: 13643},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 472, col: 38, offset: 13647},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 472, col: 41, offset: 13650},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 472, col: 44, offset: 13653},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 472, col: 55, offset: 13664},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 472, col: 58, offset: 13667},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "LTrimExpression",
			pos:  position{line: 476, col: 1, offset: 13753},
			expr: &actionExpr{
				pos: position{line: 476, col: 20, offset: 13772},
				run: (*parser).callonLTrimExpression1,
				expr: &seqExpr{
					pos: position{line: 476, col: 20, offset: 13772},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 476, col: 20, offset: 13772},
							val:        "ltrim",
							ignoreCase: true,
							want:       "\"LTRIM\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 476, col: 29, offset: 13781},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 476, col: 32, offset: 13784},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 476, col: 36, offset: 13788},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 476, col: 39, offset: 13791},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 476, col: 42, offset: 13794},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 476, col: 53, offset: 13805},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 476, col: 56, offset: 13808},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "ReplaceExpression",
			pos:  position{line: 480, col: 1, offset: 13893},
			expr: &actionExpr{
				pos: position{line: 480, col: 22, offset: 13914},
				run: (*parser).callonReplaceExpression1,
				expr: &seqExpr{
					pos: position{line: 480, col: 22, offset: 13914},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 480, col: 22, offset: 13914},
							val:        "replace",
							ignoreCase: true,
							want:       "\"REPLACE\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 480, col: 33, offset: 13925},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 480, col: 36, offset: 13928},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 480, col: 40, offset: 13932},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 480, col: 43, offset: 13935},
							label: "ex1",
							expr: &ruleRefExpr{
								pos:  position{line: 480, col: 47, offset: 13939},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 480, col: 58, offset: 13950},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 480, col: 61, offset: 13953},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 480, col: 65, offset: 13957},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 480, col: 68, offset: 13960},
							label: "ex2",
							expr: &ruleRefExpr{
								pos:  position{line: 480, col: 72, offset: 13964},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 480, col: 83, offset: 13975},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 480, col: 86, offset: 13978},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 480, col: 90, offset: 13982},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 480, col: 93, offset: 13985},
							label: "ex3",
							expr: &ruleRefExpr{
								pos:  position{line: 480, col: 97, offset: 13989},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 480, col: 108, offset: 14000},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 480, col: 111, offset: 14003},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "ReplicateExpression",
			pos:  position{line: 484, col: 1, offset: 14101},
			expr: &actionExpr{
				pos: position{line: 484, col: 24, offset: 14124},
				run: (*parser).callonReplicateExpression1,
				expr: &seqExpr{
					pos: position{line: 484, col: 24, offset: 14124},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 484, col: 24, offset: 14124},
							val:        "replicate",
							ignoreCase: true,
							want:       "\"REPLICATE\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 484, col: 37, offset: 14137},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 484, col: 40, offset: 14140},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 484, col: 44, offset: 14144},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 484, col: 47, offset: 14147},
							label: "ex1",
							expr: &ruleRefExpr{
								pos:  position{line: 484, col: 51, offset: 14151},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 484, col: 62, offset: 14162},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 484, col: 65, offset: 14165},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 484, col: 69, offset: 14169},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 484, col: 72, offset: 14172},
							label: "ex2",
							expr: &ruleRefExpr{
								pos:  position{line: 484, col: 76, offset: 14176},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 484, col: 87, offset: 14187},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 484, col: 90, offset: 14190},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "ReverseExpression",
			pos:  position{line: 488, col: 1, offset: 14285},
			expr: &actionExpr{
				pos: position{line: 488, col: 22, offset: 14306},
				run: (*parser).callonReverseExpression1,
				expr: &seqExpr{
					pos: position{line: 488, col: 22, offset: 14306},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 488, col: 22, offset: 14306},
							val:        "reverse",
							ignoreCase: true,
							want:       "\"REVERSE\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 488, col: 33, offset: 14317},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 488, col: 36, offset: 14320},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 488, col: 40, offset: 14324},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 488, col: 43, offset: 14327},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 488, col: 46, offset: 14330},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 488, col: 57, offset: 14341},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 488, col: 60, offset: 14344},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "RightExpression",
			pos:  position{line: 492, col: 1, offset: 14431},
			expr: &actionExpr{
				pos: position{line: 492, col: 20, offset: 14450},
				run: (*parser).callonRightExpression1,
				expr: &seqExpr{
					pos: position{line: 492, col: 20, offset: 14450},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 492, col: 20, offset: 14450},
							val:        "right",
							ignoreCase: true,
							want:       "\"RIGHT\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 492, col: 29, offset: 14459},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 492, col: 32, offset: 14462},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 492, col: 36, offset: 14466},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 492, col: 39, offset: 14469},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 492, col: 42, offset: 14472},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 492, col: 53, offset: 14483},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 492, col: 56, offset: 14486},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 492, col: 60, offset: 14490},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 492, col: 63, offset: 14493},
							label: "length",
							expr: &ruleRefExpr{
								pos:  position{line: 492, col: 70, offset: 14500},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 492, col: 81, offset: 14511},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 492, col: 84, offset: 14514},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "RTrimExpression",
			pos:  position{line: 496, col: 1, offset: 14607},
			expr: &actionExpr{
				pos: position{line: 496, col: 20, offset: 14626},
				run: (*parser).callonRTrimExpression1,
				expr: &seqExpr{
					pos: position{line: 496, col: 20, offset: 14626},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 496, col: 20, offset: 14626},
							val:        "rtrim",
							ignoreCase: true,
							want:       "\"RTRIM\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 496, col: 29, offset: 14635},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 496, col: 32, offset: 14638},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 496, col: 36, offset: 14642},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 496, col: 39, offset: 14645},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 496, col: 42, offset: 14648},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 496, col: 53, offset: 14659},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 496, col: 56, offset: 14662},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "SubstringExpression",
			pos:  position{line: 500, col: 1, offset: 14747},
			expr: &actionExpr{
				pos: position{line: 500, col: 24, offset: 14770},
				run: (*parser).callonSubstringExpression1,
				expr: &seqExpr{
					pos: position{line: 500, col: 24, offset: 14770},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 500, col: 24, offset: 14770},
							val:        "substring",
							ignoreCase: true,
							want:       "\"SUBSTRING\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 500, col: 37, offset: 14783},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 500, col: 40, offset: 14786},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 500, col: 44, offset: 14790},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 500, col: 47, offset: 14793},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 500, col: 50, offset: 14796},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 500, col: 61, offset: 14807},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 500, col: 64, offset: 14810},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 500, col: 68, offset: 14814},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 500, col: 71, offset: 14817},
							label: "startPos",
							expr: &ruleRefExpr{
								pos:  position{line: 500, col: 80, offset: 14826},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 500, col: 91, offset: 14837},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 500, col: 94, offset: 14840},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 500, col: 98, offset: 14844},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 500, col: 101, offset: 14847},
							label: "length",
							expr: &ruleRefExpr{
								pos:  position{line: 500, col: 108, offset: 14854},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 500, col: 119, offset: 14865},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 500, col: 122, offset: 14868},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "TrimExpression",
			pos:  position{line: 504, col: 1, offset: 14975},
			expr: &actionExpr{
				pos: position{line: 504, col: 19, offset: 14993},
				run: (*parser).callonTrimExpression1,
				expr: &seqExpr{
					pos: position{line: 504, col: 19, offset: 14993},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 504, col: 19, offset: 14993},
							val:        "trim",
							ignoreCase: true,
							want:       "\"TRIM\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 504, col: 27, offset: 15001},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 504, col: 30, offset: 15004},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 504, col: 34, offset: 15008},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 504, col: 37, offset: 15011},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 504, col: 40, offset: 15014},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 504, col: 51, offset: 15025},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 504, col: 54, offset: 15028},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "ThreeArgumentStringFunctionExpression",
			pos:  position{line: 508, col: 1, offset: 15112},
			expr: &actionExpr{
				pos: position{line: 508, col: 42, offset: 15153},
				run: (*parser).callonThreeArgumentStringFunctionExpression1,
				expr: &seqExpr{
					pos: position{line: 508, col: 42, offset: 15153},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 508, col: 42, offset: 15153},
							label: "function",
							expr: &ruleRefExpr{
								pos:  position{line: 508, col: 51, offset: 15162},
								name: "ThreeArgumentStringFunction",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 508, col: 79, offset: 15190},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 508, col: 82, offset: 15193},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 508, col: 86, offset: 15197},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 508, col: 89, offset: 15200},
							label: "ex1",
							expr: &ruleRefExpr{
								pos:  position{line: 508, col: 93, offset: 15204},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 508, col: 104, offset: 15215},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 508, col: 107, offset: 15218},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 508, col: 111, offset: 15222},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 508, col: 114, offset: 15225},
							label: "ex2",
							expr: &ruleRefExpr{
								pos:  position{line: 508, col: 118, offset: 15229},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 508, col: 129, offset: 15240},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 508, col: 132, offset: 15243},
							label: "ignoreCase",
							expr: &zeroOrOneExpr{
								pos: position{line: 508, col: 143, offset: 15254},
								expr: &actionExpr{
									pos: position{line: 508, col: 144, offset: 15255},
									run: (*parser).callonThreeArgumentStringFunctionExpression18,
									expr: &seqExpr{
										pos: position{line: 508, col: 144, offset: 15255},
										exprs: []any{
											&litMatcher{
												pos:        position{line: 508, col: 144, offset: 15255},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&ruleRefExpr{
												pos:  position{line: 508, col: 148, offset: 15259},
												name: "ws",
											},
											&labeledExpr{
												pos:   position{line: 508, col: 151, offset: 15262},
												label: "boolean",
												expr: &ruleRefExpr{
													pos:  position{line: 508, col: 159, offset: 15270},
													name: "SelectItem",
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 508, col: 196, offset: 15307},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "ThreeArgumentStringFunction",
			pos:  position{line: 526, col: 1, offset: 15829},
			expr: &actionExpr{
				pos: position{line: 526, col: 32, offset: 15860},
				run: (*parser).callonThreeArgumentStringFunction1,
				expr: &choiceExpr{
					pos: position{line: 526, col: 33, offset: 15861},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 526, col: 33, offset: 15861},
							val:        "contains",
							ignoreCase: true,
							want:       "\"CONTAINS\"i",
						},
						&litMatcher{
							pos:        position{line: 526, col: 47, offset: 15875},
							val:        "endswith",
							ignoreCase: true,
							want:       "\"ENDSWITH\"i",
						},
						&litMatcher{
							pos:        position{line: 526, col: 61, offset: 15889},
							val:        "startswith",
							ignoreCase: true,
							want:       "\"STARTSWITH\"i",
						},
						&litMatcher{
							pos:        position{line: 526, col: 77, offset: 15905},
							val:        "index_of",
							ignoreCase: true,
							want:       "\"INDEX_OF\"i",
						},
					},
				},
			},
		},
		{
			name: "IsDefined",
			pos:  position{line: 530, col: 1, offset: 15954},
			expr: &actionExpr{
				pos: position{line: 530, col: 14, offset: 15967},
				run: (*parser).callonIsDefined1,
				expr: &seqExpr{
					pos: position{line: 530, col: 14, offset: 15967},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 530, col: 14, offset: 15967},
							val:        "is_defined",
							ignoreCase: true,
							want:       "\"IS_DEFINED\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 530, col: 28, offset: 15981},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 530, col: 31, offset: 15984},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 530, col: 35, offset: 15988},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 530, col: 38, offset: 15991},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 530, col: 41, offset: 15994},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 530, col: 52, offset: 16005},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 530, col: 55, offset: 16008},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "IsArray",
			pos:  position{line: 534, col: 1, offset: 16097},
			expr: &actionExpr{
				pos: position{line: 534, col: 12, offset: 16108},
				run: (*parser).callonIsArray1,
				expr: &seqExpr{
					pos: position{line: 534, col: 12, offset: 16108},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 534, col: 12, offset: 16108},
							val:        "is_array",
							ignoreCase: true,
							want:       "\"IS_ARRAY\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 534, col: 24, offset: 16120},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 534, col: 27, offset: 16123},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 534, col: 31, offset: 16127},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 534, col: 34, offset: 16130},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 534, col: 37, offset: 16133},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 534, col: 48, offset: 16144},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 534, col: 51, offset: 16147},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "IsBool",
			pos:  position{line: 538, col: 1, offset: 16234},
			expr: &actionExpr{
				pos: position{line: 538, col: 11, offset: 16244},
				run: (*parser).callonIsBool1,
				expr: &seqExpr{
					pos: position{line: 538, col: 11, offset: 16244},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 538, col: 11, offset: 16244},
							val:        "is_bool",
							ignoreCase: true,
							want:       "\"IS_BOOL\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 538, col: 22, offset: 16255},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 538, col: 25, offset: 16258},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 538, col: 29, offset: 16262},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 538, col: 32, offset: 16265},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 538, col: 35, offset: 16268},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 538, col: 46, offset: 16279},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 538, col: 49, offset: 16282},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "IsFiniteNumber",
			pos:  position{line: 542, col: 1, offset: 16368},
			expr: &actionExpr{
				pos: position{line: 542, col: 19, offset: 16386},
				run: (*parser).callonIsFiniteNumber1,
				expr: &seqExpr{
					pos: position{line: 542, col: 19, offset: 16386},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 542, col: 19, offset: 16386},
							val:        "is_finite_number",
							ignoreCase: true,
							want:       "\"IS_FINITE_NUMBER\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 542, col: 39, offset: 16406},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 542, col: 42, offset: 16409},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 542, col: 46, offset: 16413},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 542, col: 49, offset: 16416},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 542, col: 52, offset: 16419},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 542, col: 63, offset: 16430},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 542, col: 66, offset: 16433},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "IsInteger",
			pos:  position{line: 546, col: 1, offset: 16527},
			expr: &actionExpr{
				pos: position{line: 546, col: 14, offset: 16540},
				run: (*parser).callonIsInteger1,
				expr: &seqExpr{
					pos: position{line: 546, col: 14, offset: 16540},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 546, col: 14, offset: 16540},
							val:        "is_integer",
							ignoreCase: true,
							want:       "\"IS_INTEGER\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 546, col: 28, offset: 16554},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 546, col: 31, offset: 16557},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 546, col: 35, offset: 16561},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 546, col: 38, offset: 16564},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 546, col: 41, offset: 16567},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 546, col: 52, offset: 16578},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 546, col: 55, offset: 16581},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "IsNull",
			pos:  position{line: 550, col: 1, offset: 16670},
			expr: &actionExpr{
				pos: position{line: 550, col: 11, offset: 16680},
				run: (*parser).callonIsNull1,
				expr: &seqExpr{
					pos: position{line: 550, col: 11, offset: 16680},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 550, col: 11, offset: 16680},
							val:        "is_null",
							ignoreCase: true,
							want:       "\"IS_NULL\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 550, col: 22, offset: 16691},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 550, col: 25, offset: 16694},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 550, col: 29, offset: 16698},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 550, col: 32, offset: 16701},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 550, col: 35, offset: 16704},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 550, col: 46, offset: 16715},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 550, col: 49, offset: 16718},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "IsNumber",
			pos:  position{line: 554, col: 1, offset: 16804},
			expr: &actionExpr{
				pos: position{line: 554, col: 13, offset: 16816},
				run: (*parser).callonIsNumber1,
				expr: &seqExpr{
					pos: position{line: 554, col: 13, offset: 16816},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 554, col: 13, offset: 16816},
							val:        "is_number",
							ignoreCase: true,
							want:       "\"IS_NUMBER\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 554, col: 26, offset: 16829},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 554, col: 29, offset: 16832},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 554, col: 33, offset: 16836},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 554, col: 36, offset: 16839},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 554, col: 39, offset: 16842},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 554, col: 50, offset: 16853},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 554, col: 53, offset: 16856},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "IsObject",
			pos:  position{line: 558, col: 1, offset: 16944},
			expr: &actionExpr{
				pos: position{line: 558, col: 13, offset: 16956},
				run: (*parser).callonIsObject1,
				expr: &seqExpr{
					pos: position{line: 558, col: 13, offset: 16956},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 558, col: 13, offset: 16956},
							val:        "is_object",
							ignoreCase: true,
							want:       "\"IS_OBJECT\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 558, col: 26, offset: 16969},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 558, col: 29, offset: 16972},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 558, col: 33, offset: 16976},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 558, col: 36, offset: 16979},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 558, col: 39, offset: 16982},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 558, col: 50, offset: 16993},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 558, col: 53, offset: 16996},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "IsPrimitive",
			pos:  position{line: 562, col: 1, offset: 17084},
			expr: &actionExpr{
				pos: position{line: 562, col: 16, offset: 17099},
				run: (*parser).callonIsPrimitive1,
				expr: &seqExpr{
					pos: position{line: 562, col: 16, offset: 17099},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 562, col: 16, offset: 17099},
							val:        "is_primitive",
							ignoreCase: true,
							want:       "\"IS_PRIMITIVE\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 562, col: 32, offset: 17115},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 562, col: 35, offset: 17118},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 562, col: 39, offset: 17122},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 562, col: 42, offset: 17125},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 562, col: 45, offset: 17128},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 562, col: 56, offset: 17139},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 562, col: 59, offset: 17142},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "IsString",
			pos:  position{line: 566, col: 1, offset: 17233},
			expr: &actionExpr{
				pos: position{line: 566, col: 13, offset: 17245},
				run: (*parser).callonIsString1,
				expr: &seqExpr{
					pos: position{line: 566, col: 13, offset: 17245},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 566, col: 13, offset: 17245},
							val:        "is_string",
							ignoreCase: true,
							want:       "\"IS_STRING\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 566, col: 26, offset: 17258},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 566, col: 29, offset: 17261},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 566, col: 33, offset: 17265},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 566, col: 36, offset: 17268},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 566, col: 39, offset: 17271},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 566, col: 50, offset: 17282},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 566, col: 53, offset: 17285},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "ArrayConcatExpression",
			pos:  position{line: 570, col: 1, offset: 17373},
			expr: &actionExpr{
				pos: position{line: 570, col: 26, offset: 17398},
				run: (*parser).callonArrayConcatExpression1,
				expr: &seqExpr{
					pos: position{line: 570, col: 26, offset: 17398},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 570, col: 26, offset: 17398},
							val:        "array_concat",
							ignoreCase: true,
							want:       "\"ARRAY_CONCAT\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 570, col: 42, offset: 17414},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 570, col: 45, offset: 17417},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 570, col: 49, offset: 17421},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 570, col: 52, offset: 17424},
							label: "arrays",
							expr: &ruleRefExpr{
								pos:  position{line: 570, col: 59, offset: 17431},
								name: "SelectItem",
							},
						},
						&labeledExpr{
							pos:   position{line: 570, col: 70, offset: 17442},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 570, col: 77, offset: 17449},
								expr: &actionExpr{
									pos: position{line: 570, col: 78, offset: 17450},
									run: (*parser).callonArrayConcatExpression11,
									expr: &seqExpr{
										pos: position{line: 570, col: 78, offset: 17450},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 570, col: 78, offset: 17450},
												name: "ws",
											},
											&litMatcher{
												pos:        position{line: 570, col: 81, offset: 17453},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&ruleRefExpr{
												pos:  position{line: 570, col: 85, offset: 17457},
												name: "ws",
											},
											&labeledExpr{
												pos:   position{line: 570, col: 88, offset: 17460},
												label: "ex",
												expr: &ruleRefExpr{
													pos:  position{line: 570, col: 91, offset: 17463},
													name: "SelectItem",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 570, col: 123, offset: 17495},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 570, col: 126, offset: 17498},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "ArrayLengthExpression",
			pos:  position{line: 574, col: 1, offset: 17628},
			expr: &actionExpr{
				pos: position{line: 574, col: 26, offset: 17653},
				run: (*parser).callonArrayLengthExpression1,
				expr: &seqExpr{
					pos: position{line: 574, col: 26, offset: 17653},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 574, col: 26, offset: 17653},
							val:        "array_length",
							ignoreCase: true,
							want:       "\"ARRAY_LENGTH\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 574, col: 42, offset: 17669},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 574, col: 45, offset: 17672},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 574, col: 49, offset: 17676},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 574, col: 52, offset: 17679},
							label: "array",
							expr: &ruleRefExpr{
								pos:  position{line: 574, col: 58, offset: 17685},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 574, col: 69, offset: 17696},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 574, col: 72, offset: 17699},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "ArraySliceExpression",
			pos:  position{line: 578, col: 1, offset: 17793},
			expr: &actionExpr{
				pos: position{line: 578, col: 25, offset: 17817},
				run: (*parser).callonArraySliceExpression1,
				expr: &seqExpr{
					pos: position{line: 578, col: 25, offset: 17817},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 578, col: 25, offset: 17817},
							val:        "array_slice",
							ignoreCase: true,
							want:       "\"ARRAY_SLICE\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 578, col: 40, offset: 17832},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 578, col: 43, offset: 17835},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 578, col: 47, offset: 17839},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 578, col: 50, offset: 17842},
							label: "array",
							expr: &ruleRefExpr{
								pos:  position{line: 578, col: 56, offset: 17848},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 578, col: 67, offset: 17859},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 578, col: 70, offset: 17862},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 578, col: 74, offset: 17866},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 578, col: 77, offset: 17869},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 578, col: 83, offset: 17875},
								name: "SelectItem",
							},
						},
						&labeledExpr{
							pos:   position{line: 578, col: 94, offset: 17886},
							label: "length",
							expr: &zeroOrOneExpr{
								pos: position{line: 578, col: 101, offset: 17893},
								expr: &actionExpr{
									pos: position{line: 578, col: 102, offset: 17894},
									run: (*parser).callonArraySliceExpression16,
									expr: &seqExpr{
										pos: position{line: 578, col: 102, offset: 17894},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 578, col: 102, offset: 17894},
												name: "ws",
											},
											&litMatcher{
												pos:        position{line: 578, col: 105, offset: 17897},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&ruleRefExpr{
												pos:  position{line: 578, col: 109, offset: 17901},
												name: "ws",
											},
											&labeledExpr{
												pos:   position{line: 578, col: 112, offset: 17904},
												label: "ex",
												expr: &ruleRefExpr{
													pos:  position{line: 578, col: 115, offset: 17907},
													name: "SelectItem",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 578, col: 147, offset: 17939},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 578, col: 150, offset: 17942},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "SetIntersectExpression",
			pos:  position{line: 582, col: 1, offset: 18050},
			expr: &actionExpr{
				pos: position{line: 582, col: 27, offset: 18076},
				run: (*parser).callonSetIntersectExpression1,
				expr: &seqExpr{
					pos: position{line: 582, col: 27, offset: 18076},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 582, col: 27, offset: 18076},
							val:        "setintersect",
							ignoreCase: true,
							want:       "\"SetIntersect\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 582, col: 43, offset: 18092},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 582, col: 46, offset: 18095},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 582, col: 50, offset: 18099},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 582, col: 53, offset: 18102},
							label: "set1",
							expr: &ruleRefExpr{
								pos:  position{line: 582, col: 58, offset: 18107},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 582, col: 69, offset: 18118},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 582, col: 72, offset: 18121},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 582, col: 76, offset: 18125},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 582, col: 79, offset: 18128},
							label: "set2",
							expr: &ruleRefExpr{
								pos:  position{line: 582, col: 84, offset: 18133},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 582, col: 95, offset: 18144},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 582, col: 98, offset: 18147},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "SetUnionExpression",
			pos:  position{line: 586, col: 1, offset: 18247},
			expr: &actionExpr{
				pos: position{line: 586, col: 23, offset: 18269},
				run: (*parser).callonSetUnionExpression1,
				expr: &seqExpr{
					pos: position{line: 586, col: 23, offset: 18269},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 586, col: 23, offset: 18269},
							val:        "setunion",
							ignoreCase: true,
							want:       "\"SetUnion\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 586, col: 35, offset: 18281},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 586, col: 38, offset: 18284},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 586, col: 42, offset: 18288},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 586, col: 45, offset: 18291},
							label: "set1",
							expr: &ruleRefExpr{
								pos:  position{line: 586, col: 50, offset: 18296},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 586, col: 61, offset: 18307},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 586, col: 64, offset: 18310},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 586, col: 68, offset: 18314},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 586, col: 71, offset: 18317},
							label: "set2",
							expr: &ruleRefExpr{
								pos:  position{line: 586, col: 76, offset: 18322},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 586, col: 87, offset: 18333},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 586, col: 90, offset: 18336},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "MathAbsExpression",
			pos:  position{line: 590, col: 1, offset: 18432},
			expr: &actionExpr{
				pos: position{line: 590, col: 22, offset: 18453},
				run: (*parser).callonMathAbsExpression1,
				expr: &seqExpr{
					pos: position{line: 590, col: 22, offset: 18453},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 590, col: 22, offset: 18453},
							val:        "abs",
							ignoreCase: true,
							want:       "\"ABS\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 590, col: 29, offset: 18460},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 590, col: 32, offset: 18463},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 590, col: 36, offset: 18467},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 590, col: 39, offset: 18470},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 590, col: 42, offset: 18473},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 590, col: 53, offset: 18484},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 590, col: 56, offset: 18487},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "MathAcosExpression",
			pos:  position{line: 591, col: 1, offset: 18569},
			expr: &actionExpr{
				pos: position{line: 591, col: 23, offset: 18591},
				run: (*parser).callonMathAcosExpression1,
				expr: &seqExpr{
					pos: position{line: 591, col: 23, offset: 18591},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 591, col: 23, offset: 18591},
							val:        "acos",
							ignoreCase: true,
							want:       "\"ACOS\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 591, col: 31, offset: 18599},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 591, col: 34, offset: 18602},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 591, col: 38, offset: 18606},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 591, col: 41, offset: 18609},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 591, col: 44, offset: 18612},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 591, col: 55, offset: 18623},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 591, col: 58, offset: 18626},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "MathAsinExpression",
			pos:  position{line: 592, col: 1, offset: 18709},
			expr: &actionExpr{
				pos: position{line: 592, col: 23, offset: 18731},
				run: (*parser).callonMathAsinExpression1,
				expr: &seqExpr{
					pos: position{line: 592, col: 23, offset: 18731},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 592, col: 23, offset: 18731},
							val:        "asin",
							ignoreCase: true,
							want:       "\"ASIN\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 592, col: 31, offset: 18739},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 592, col: 34, offset: 18742},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 592, col: 38, offset: 18746},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 592, col: 41, offset: 18749},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 592, col: 44, offset: 18752},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 592, col: 55, offset: 18763},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 592, col: 58, offset: 18766},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "MathAtanExpression",
			pos:  position{line: 593, col: 1, offset: 18849},
			expr: &actionExpr{
				pos: position{line: 593, col: 23, offset: 18871},
				run: (*parser).callonMathAtanExpression1,
				expr: &seqExpr{
					pos: position{line: 593, col: 23, offset: 18871},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 593, col: 23, offset: 18871},
							val:        "atan",
							ignoreCase: true,
							want:       "\"ATAN\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 593, col: 31, offset: 18879},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 593, col: 34, offset: 18882},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 593, col: 38, offset: 18886},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 593, col: 41, offset: 18889},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 593, col: 44, offset: 18892},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 593, col: 55, offset: 18903},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 593, col: 58, offset: 18906},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "MathCeilingExpression",
			pos:  position{line: 594, col: 1, offset: 18989},
			expr: &actionExpr{
				pos: position{line: 594, col: 26, offset: 19014},
				run: (*parser).callonMathCeilingExpression1,
				expr: &seqExpr{
					pos: position{line: 594, col: 26, offset: 19014},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 594, col: 26, offset: 19014},
							val:        "ceiling",
							ignoreCase: true,
							want:       "\"CEILING\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 594, col: 37, offset: 19025},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 594, col: 40, offset: 19028},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 594, col: 44, offset: 19032},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 594, col: 47, offset: 19035},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 594, col: 50, offset: 19038},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 594, col: 61, offset: 19049},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 594, col: 64, offset: 19052},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "MathCosExpression",
			pos:  position{line: 595, col: 1, offset: 19138},
			expr: &actionExpr{
				pos: position{line: 595, col: 22, offset: 19159},
				run: (*parser).callonMathCosExpression1,
				expr: &seqExpr{
					pos: position{line: 595, col: 22, offset: 19159},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 595, col: 22, offset: 19159},
							val:        "cos",
							ignoreCase: true,
							want:       "\"COS\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 595, col: 29, offset: 19166},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 595, col: 32, offset: 19169},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 595, col: 36, offset: 19173},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 595, col: 39, offset: 19176},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 595, col: 42, offset: 19179},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 595, col: 53, offset: 19190},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 595, col: 56, offset: 19193},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "MathCotExpression",
			pos:  position{line: 596, col: 1, offset: 19275},
			expr: &actionExpr{
				pos: position{line: 596, col: 22, offset: 19296},
				run: (*parser).callonMathCotExpression1,
				expr: &seqExpr{
					pos: position{line: 596, col: 22, offset: 19296},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 596, col: 22, offset: 19296},
							val:        "cot",
							ignoreCase: true,
							want:       "\"COT\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 596, col: 29, offset: 19303},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 596, col: 32, offset: 19306},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 596, col: 36, offset: 19310},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 596, col: 39, offset: 19313},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 596, col: 42, offset: 19316},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 596, col: 53, offset: 19327},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 596, col: 56, offset: 19330},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "MathDegreesExpression",
			pos:  position{line: 597, col: 1, offset: 19412},
			expr: &actionExpr{
				pos: position{line: 597, col: 26, offset: 19437},
				run: (*parser).callonMathDegreesExpression1,
				expr: &seqExpr{
					pos: position{line: 597, col: 26, offset: 19437},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 597, col: 26, offset: 19437},
							val:        "degrees",
							ignoreCase: true,
							want:       "\"DEGREES\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 597, col: 37, offset: 19448},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 597, col: 40, offset: 19451},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 597, col: 44, offset: 19455},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 597, col: 47, offset: 19458},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 597, col: 50, offset: 19461},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 597, col: 61, offset: 19472},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 597, col: 64, offset: 19475},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "MathExpExpression",
			pos:  position{line: 598, col: 1, offset: 19561},
			expr: &actionExpr{
				pos: position{line: 598, col: 22, offset: 19582},
				run: (*parser).callonMathExpExpression1,
				expr: &seqExpr{
					pos: position{line: 598, col: 22, offset: 19582},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 598, col: 22, offset: 19582},
							val:        "exp",
							ignoreCase: true,
							want:       "\"EXP\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 598, col: 29, offset: 19589},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 598, col: 32, offset: 19592},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 598, col: 36, offset: 19596},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 598, col: 39, offset: 19599},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 598, col: 42, offset: 19602},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 598, col: 53, offset: 19613},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 598, col: 56, offset: 19616},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "MathFloorExpression",
			pos:  position{line: 599, col: 1, offset: 19698},
			expr: &actionExpr{
				pos: position{line: 599, col: 24, offset: 19721},
				run: (*parser).callonMathFloorExpression1,
				expr: &seqExpr{
					pos: position{line: 599, col: 24, offset: 19721},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 599, col: 24, offset: 19721},
							val:        "floor",
							ignoreCase: true,
							want:       "\"FLOOR\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 599, col: 33, offset: 19730},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 599, col: 36, offset: 19733},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 599, col: 40, offset: 19737},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 599, col: 43, offset: 19740},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 599, col: 46, offset: 19743},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 599, col: 57, offset: 19754},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 599, col: 60, offset: 19757},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "MathIntBitNotExpression",
			pos:  position{line: 600, col: 1, offset: 19841},
			expr: &actionExpr{
				pos: position{line: 600, col: 28, offset: 19868},
				run: (*parser).callonMathIntBitNotExpression1,
				expr: &seqExpr{
					pos: position{line: 600, col: 28, offset: 19868},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 600, col: 28, offset: 19868},
							val:        "intbitnot",
							ignoreCase: true,
							want:       "\"IntBitNot\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 600, col: 41, offset: 19881},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 600, col: 44, offset: 19884},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 600, col: 48, offset: 19888},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 600, col: 51, offset: 19891},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 600, col: 54, offset: 19894},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 600, col: 65, offset: 19905},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 600, col: 68, offset: 19908},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "MathLog10Expression",
			pos:  position{line: 601, col: 1, offset: 19996},
			expr: &actionExpr{
				pos: position{line: 601, col: 24, offset: 20019},
				run: (*parser).callonMathLog10Expression1,
				expr: &seqExpr{
					pos: position{line: 601, col: 24, offset: 20019},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 601, col: 24, offset: 20019},
							val:        "log10",
							ignoreCase: true,
							want:       "\"LOG10\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 601, col: 33, offset: 20028},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 601, col: 36, offset: 20031},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 601, col: 40, offset: 20035},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 601, col: 43, offset: 20038},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 601, col: 46, offset: 20041},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 601, col: 57, offset: 20052},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 601, col: 60, offset: 20055},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "MathRadiansExpression",
			pos:  position{line: 602, col: 1, offset: 20139},
			expr: &actionExpr{
				pos: position{line: 602, col: 26, offset: 20164},
				run: (*parser).callonMathRadiansExpression1,
				expr: &seqExpr{
					pos: position{line: 602, col: 26, offset: 20164},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 602, col: 26, offset: 20164},
							val:        "radians",
							ignoreCase: true,
							want:       "\"RADIANS\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 602, col: 37, offset: 20175},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 602, col: 40, offset: 20178},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 602, col: 44, offset: 20182},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 602, col: 47, offset: 20185},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 602, col: 50, offset: 20188},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 602, col: 61, offset: 20199},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 602, col: 64, offset: 20202},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "MathRoundExpression",
			pos:  position{line: 603, col: 1, offset: 20288},
			expr: &actionExpr{
				pos: position{line: 603, col: 24, offset: 20311},
				run: (*parser).callonMathRoundExpression1,
				expr: &seqExpr{
					pos: position{line: 603, col: 24, offset: 20311},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 603, col: 24, offset: 20311},
							val:        "round",
							ignoreCase: true,
							want:       "\"ROUND\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 603, col: 33, offset: 20320},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 603, col: 36, offset: 20323},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 603, col: 40, offset: 20327},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 603, col: 43, offset: 20330},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 603, col: 46, offset: 20333},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 603, col: 57, offset: 20344},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 603, col: 60, offset: 20347},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "MathSignExpression",
			pos:  position{line: 604, col: 1, offset: 20431},
			expr: &actionExpr{
				pos: position{line: 604, col: 23, offset: 20453},
				run: (*parser).callonMathSignExpression1,
				expr: &seqExpr{
					pos: position{line: 604, col: 23, offset: 20453},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 604, col: 23, offset: 20453},
							val:        "sign",
							ignoreCase: true,
							want:       "\"SIGN\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 604, col: 31, offset: 20461},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 604, col: 34, offset: 20464},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 604, col: 38, offset: 20468},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 604, col: 41, offset: 20471},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 604, col: 44, offset: 20474},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 604, col: 55, offset: 20485},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 604, col: 58, offset: 20488},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "MathSinExpression",
			pos:  position{line: 605, col: 1, offset: 20571},
			expr: &actionExpr{
				pos: position{line: 605, col: 22, offset: 20592},
				run: (*parser).callonMathSinExpression1,
				expr: &seqExpr{
					pos: position{line: 605, col: 22, offset: 20592},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 605, col: 22, offset: 20592},
							val:        "sin",
							ignoreCase: true,
							want:       "\"SIN\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 605, col: 29, offset: 20599},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 605, col: 32, offset: 20602},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 605, col: 36, offset: 20606},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 605, col: 39, offset: 20609},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 605, col: 42, offset: 20612},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 605, col: 53, offset: 20623},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 605, col: 56, offset: 20626},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "MathSqrtExpression",
			pos:  position{line: 606, col: 1, offset: 20708},
			expr: &actionExpr{
				pos: position{line: 606, col: 23, offset: 20730},
				run: (*parser).callonMathSqrtExpression1,
				expr: &seqExpr{
					pos: position{line: 606, col: 23, offset: 20730},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 606, col: 23, offset: 20730},
							val:        "sqrt",
							ignoreCase: true,
							want:       "\"SQRT\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 606, col: 31, offset: 20738},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 606, col: 34, offset: 20741},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 606, col: 38, offset: 20745},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 606, col: 41, offset: 20748},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 606, col: 44, offset: 20751},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 606, col: 55, offset: 20762},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 606, col: 58, offset: 20765},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "MathSquareExpression",
			pos:  position{line: 607, col: 1, offset: 20848},
			expr: &actionExpr{
				pos: position{line: 607, col: 25, offset: 20872},
				run: (*parser).callonMathSquareExpression1,
				expr: &seqExpr{
					pos: position{line: 607, col: 25, offset: 20872},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 607, col: 25, offset: 20872},
							val:        "square",
							ignoreCase: true,
							want:       "\"SQUARE\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 607, col: 35, offset: 20882},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 607, col: 38, offset: 20885},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 607, col: 42, offset: 20889},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 607, col: 45, offset: 20892},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 607, col: 48, offset: 20895},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 607, col: 59, offset: 20906},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 607, col: 62, offset: 20909},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "MathTanExpression",
			pos:  position{line: 608, col: 1, offset: 20994},
			expr: &actionExpr{
				pos: position{line: 608, col: 22, offset: 21015},
				run: (*parser).callonMathTanExpression1,
				expr: &seqExpr{
					pos: position{line: 608, col: 22, offset: 21015},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 608, col: 22, offset: 21015},
							val:        "tan",
							ignoreCase: true,
							want:       "\"TAN\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 608, col: 29, offset: 21022},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 608, col: 32, offset: 21025},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 608, col: 36, offset: 21029},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 608, col: 39, offset: 21032},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 608, col: 42, offset: 21035},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 608, col: 53, offset: 21046},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 608, col: 56, offset: 21049},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "MathTruncExpression",
			pos:  position{line: 609, col: 1, offset: 21131},
			expr: &actionExpr{
				pos: position{line: 609, col: 24, offset: 21154},
				run: (*parser).callonMathTruncExpression1,
				expr: &seqExpr{
					pos: position{line: 609, col: 24, offset: 21154},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 609, col: 24, offset: 21154},
							val:        "trunc",
							ignoreCase: true,
							want:       "\"TRUNC\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 609, col: 33, offset: 21163},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 609, col: 36, offset: 21166},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 609, col: 40, offset: 21170},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 609, col: 43, offset: 21173},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 609, col: 46, offset: 21176},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 609, col: 57, offset: 21187},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 609, col: 60, offset: 21190},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "MathAtn2Expression",
			pos:  position{line: 611, col: 1, offset: 21275},
			expr: &actionExpr{
				pos: position{line: 611, col: 23, offset: 21297},
				run: (*parser).callonMathAtn2Expression1,
				expr: &seqExpr{
					pos: position{line: 611, col: 23, offset: 21297},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 611, col: 23, offset: 21297},
							val:        "atn2",
							ignoreCase: true,
							want:       "\"ATN2\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 611, col: 31, offset: 21305},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 611, col: 34, offset: 21308},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 611, col: 38, offset: 21312},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 611, col: 41, offset: 21315},
							label: "set1",
							expr: &ruleRefExpr{
								pos:  position{line: 611, col: 46, offset: 21320},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 611, col: 57, offset: 21331},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 611, col: 60, offset: 21334},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 611, col: 64, offset: 21338},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 611, col: 67, offset: 21341},
							label: "set2",
							expr: &ruleRefExpr{
								pos:  position{line: 611, col: 72, offset: 21346},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 611, col: 83, offset: 21357},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 611, col: 86, offset: 21360},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "MathIntAddExpression",
			pos:  position{line: 612, col: 1, offset: 21451},
			expr: &actionExpr{
				pos: position{line: 612, col: 25, offset: 21475},
				run: (*parser).callonMathIntAddExpression1,
				expr: &seqExpr{
					pos: position{line: 612, col: 25, offset: 21475},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 612, col: 25, offset: 21475},
							val:        "intadd",
							ignoreCase: true,
							want:       "\"IntAdd\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 612, col: 35, offset: 21485},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 612, col: 38, offset: 21488},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 612, col: 42, offset: 21492},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 612, col: 45, offset: 21495},
							label: "set1",
							expr: &ruleRefExpr{
								pos:  position{line: 612, col: 50, offset: 21500},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 612, col: 61, offset: 21511},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 612, col: 64, offset: 21514},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 612, col: 68, offset: 21518},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 612, col: 71, offset: 21521},
							label: "set2",
							expr: &ruleRefExpr{
								pos:  position{line: 612, col: 76, offset: 21526},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 612, col: 87, offset: 21537},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 612, col: 90, offset: 21540},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "MathIntBitAndExpression",
			pos:  position{line: 613, col: 1, offset: 21633},
			expr: &actionExpr{
				pos: position{line: 613, col: 28, offset: 21660},
				run: (*parser).callonMathIntBitAndExpression1,
				expr: &seqExpr{
					pos: position{line: 613, col: 28, offset: 21660},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 613, col: 28, offset: 21660},
							val:        "intbitand",
							ignoreCase: true,
							want:       "\"IntBitAnd\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 613, col: 41, offset: 21673},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 613, col: 44, offset: 21676},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 613, col: 48, offset: 21680},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 613, col: 51, offset: 21683},
							label: "set1",
							expr: &ruleRefExpr{
								pos:  position{line: 613, col: 56, offset: 21688},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 613, col: 67, offset: 21699},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 613, col: 70, offset: 21702},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 613, col: 74, offset: 21706},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 613, col: 77, offset: 21709},
							label: "set2",
							expr: &ruleRefExpr{
								pos:  position{line: 613, col: 82, offset: 21714},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 613, col: 93, offset: 21725},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 613, col: 96, offset: 21728},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "MathIntBitLeftShiftExpression",
			pos:  position{line: 614, col: 1, offset: 21824},
			expr: &actionExpr{
				pos: position{line: 614, col: 34, offset: 21857},
				run: (*parser).callonMathIntBitLeftShiftExpression1,
				expr: &seqExpr{
					pos: position{line: 614, col: 34, offset: 21857},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 614, col: 34, offset: 21857},
							val:        "intbitleftshift",
							ignoreCase: true,
							want:       "\"IntBitLeftShift\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 614, col: 53, offset: 21876},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 614, col: 56, offset: 21879},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 614, col: 60, offset: 21883},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 614, col: 63, offset: 21886},
							label: "set1",
							expr: &ruleRefExpr{
								pos:  position{line: 614, col: 68, offset: 21891},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 614, col: 79, offset: 21902},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 614, col: 82, offset: 21905},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 614, col: 86, offset: 21909},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 614, col: 89, offset: 21912},
							label: "set2",
							expr: &ruleRefExpr{
								pos:  position{line: 614, col: 94, offset: 21917},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 614, col: 105, offset: 21928},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 614, col: 108, offset: 21931},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "MathIntBitOrExpression",
			pos:  position{line: 615, col: 1, offset: 22033},
			expr: &actionExpr{
				pos: position{line: 615, col: 27, offset: 22059},
				run: (*parser).callonMathIntBitOrExpression1,
				expr: &seqExpr{
					pos: position{line: 615, col: 27, offset: 22059},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 615, col: 27, offset: 22059},
							val:        "intbitor",
							ignoreCase: true,
							want:       "\"IntBitOr\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 615, col: 39, offset: 22071},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 615, col: 42, offset: 22074},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 615, col: 46, offset: 22078},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 615, col: 49, offset: 22081},
							label: "set1",
							expr: &ruleRefExpr{
								pos:  position{line: 615, col: 54, offset: 22086},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 615, col: 65, offset: 22097},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 615, col: 68, offset: 22100},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 615, col: 72, offset: 22104},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 615, col: 75, offset: 22107},
							label: "set2",
							expr: &ruleRefExpr{
								pos:  position{line: 615, col: 80, offset: 22112},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 615, col: 91, offset: 22123},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 615, col: 94, offset: 22126},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "MathIntBitRightShiftExpression",
			pos:  position{line: 616, col: 1, offset: 22221},
			expr: &actionExpr{
				pos: position{line: 616, col: 35, offset: 22255},
				run: (*parser).callonMathIntBitRightShiftExpression1,
				expr: &seqExpr{
					pos: position{line: 616, col: 35, offset: 22255},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 616, col: 35, offset: 22255},
							val:        "intbitrightshift",
							ignoreCase: true,
							want:       "\"IntBitRightShift\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 616, col: 55, offset: 22275},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 616, col: 58, offset: 22278},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 616, col: 62, offset: 22282},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 616, col: 65, offset: 22285},
							label: "set1",
							expr: &ruleRefExpr{
								pos:  position{line: 616, col: 70, offset: 22290},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 616, col: 81, offset: 22301},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 616, col: 84, offset: 22304},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 616, col: 88, offset: 22308},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 616, col: 91, offset: 22311},
							label: "set2",
							expr: &ruleRefExpr{
								pos:  position{line: 616, col: 96, offset: 22316},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 616, col: 107, offset: 22327},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 616, col: 110, offset: 22330},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "MathIntBitXorExpression",
			pos:  position{line: 617, col: 1, offset: 22433},
			expr: &actionExpr{
				pos: position{line: 617, col: 28, offset: 22460},
				run: (*parser).callonMathIntBitXorExpression1,
				expr: &seqExpr{
					pos: position{line: 617, col: 28, offset: 22460},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 617, col: 28, offset: 22460},
							val:        "intbitxor",
							ignoreCase: true,
							want:       "\"IntBitXor\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 617, col: 41, offset: 22473},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 617, col: 44, offset: 22476},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 617, col: 48, offset: 22480},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 617, col: 51, offset: 22483},
							label: "set1",
							expr: &ruleRefExpr{
								pos:  position{line: 617, col: 56, offset: 22488},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 617, col: 67, offset: 22499},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 617, col: 70, offset: 22502},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 617, col: 74, offset: 22506},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 617, col: 77, offset: 22509},
							label: "set2",
							expr: &ruleRefExpr{
								pos:  position{line: 617, col: 82, offset: 22514},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 617, col: 93, offset: 22525},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 617, col: 96, offset: 22528},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "MathIntDivExpression",
			pos:  position{line: 618, col: 1, offset: 22624},
			expr: &actionExpr{
				pos: position{line: 618, col: 25, offset: 22648},
				run: (*parser).callonMathIntDivExpression1,
				expr: &seqExpr{
					pos: position{line: 618, col: 25, offset: 22648},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 618, col: 25, offset: 22648},
							val:        "intdiv",
							ignoreCase: true,
							want:       "\"IntDiv\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 618, col: 35, offset: 22658},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 618, col: 38, offset: 22661},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 618, col: 42, offset: 22665},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 618, col: 45, offset: 22668},
							label: "set1",
							expr: &ruleRefExpr{
								pos:  position{line: 618, col: 50, offset: 22673},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 618, col: 61, offset: 22684},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 618, col: 64, offset: 22687},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 618, col: 68, offset: 22691},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 618, col: 71, offset: 22694},
							label: "set2",
							expr: &ruleRefExpr{
								pos:  position{line: 618, col: 76, offset: 22699},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 618, col: 87, offset: 22710},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 618, col: 90, offset: 22713},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "MathIntModExpression",
			pos:  position{line: 619, col: 1, offset: 22806},
			expr: &actionExpr{
				pos: position{line: 619, col: 25, offset: 22830},
				run: (*parser).callonMathIntModExpression1,
				expr: &seqExpr{
					pos: position{line: 619, col: 25, offset: 22830},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 619, col: 25, offset: 22830},
							val:        "intmod",
							ignoreCase: true,
							want:       "\"IntMod\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 619, col: 35, offset: 22840},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 619, col: 38, offset: 22843},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 619, col: 42, offset: 22847},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 619, col: 45, offset: 22850},
							label: "set1",
							expr: &ruleRefExpr{
								pos:  position{line: 619, col: 50, offset: 22855},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 619, col: 61, offset: 22866},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 619, col: 64, offset: 22869},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 619, col: 68, offset: 22873},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 619, col: 71, offset: 22876},
							label: "set2",
							expr: &ruleRefExpr{
								pos:  position{line: 619, col: 76, offset: 22881},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 619, col: 87, offset: 22892},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 619, col: 90, offset: 22895},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "MathIntMulExpression",
			pos:  position{line: 620, col: 1, offset: 22988},
			expr: &actionExpr{
				pos: position{line: 620, col: 25, offset: 23012},
				run: (*parser).callonMathIntMulExpression1,
				expr: &seqExpr{
					pos: position{line: 620, col: 25, offset: 23012},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 620, col: 25, offset: 23012},
							val:        "intmul",
							ignoreCase: true,
							want:       "\"IntMul\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 620, col: 35, offset: 23022},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 620, col: 38, offset: 23025},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 620, col: 42, offset: 23029},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 620, col: 45, offset: 23032},
							label: "set1",
							expr: &ruleRefExpr{
								pos:  position{line: 620, col: 50, offset: 23037},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 620, col: 61, offset: 23048},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 620, col: 64, offset: 23051},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 620, col: 68, offset: 23055},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 620, col: 71, offset: 23058},
							label: "set2",
							expr: &ruleRefExpr{
								pos:  position{line: 620, col: 76, offset: 23063},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 620, col: 87, offset: 23074},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 620, col: 90, offset: 23077},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "MathIntSubExpression",
			pos:  position{line: 621, col: 1, offset: 23170},
			expr: &actionExpr{
				pos: position{line: 621, col: 25, offset: 23194},
				run: (*parser).callonMathIntSubExpression1,
				expr: &seqExpr{
					pos: position{line: 621, col: 25, offset: 23194},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 621, col: 25, offset: 23194},
							val:        "intsub",
							ignoreCase: true,
							want:       "\"IntSub\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 621, col: 35, offset: 23204},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 621, col: 38, offset: 23207},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 621, col: 42, offset: 23211},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 621, col: 45, offset: 23214},
							label: "set1",
							expr: &ruleRefExpr{
								pos:  position{line: 621, col: 50, offset: 23219},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 621, col: 61, offset: 23230},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 621, col: 64, offset: 23233},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 621, col: 68, offset: 23237},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 621, col: 71, offset: 23240},
							label: "set2",
							expr: &ruleRefExpr{
								pos:  position{line: 621, col: 76, offset: 23245},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 621, col: 87, offset: 23256},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 621, col: 90, offset: 23259},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "MathPowerExpression",
			pos:  position{line: 622, col: 1, offset: 23352},
			expr: &actionExpr{
				pos: position{line: 622, col: 24, offset: 23375},
				run: (*parser).callonMathPowerExpression1,
				expr: &seqExpr{
					pos: position{line: 622, col: 24, offset: 23375},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 622, col: 24, offset: 23375},
							val:        "power",
							ignoreCase: true,
							want:       "\"POWER\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 622, col: 33, offset: 23384},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 622, col: 36, offset: 23387},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 622, col: 40, offset: 23391},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 622, col: 43, offset: 23394},
							label: "set1",
							expr: &ruleRefExpr{
								pos:  position{line: 622, col: 48, offset: 23399},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 622, col: 59, offset: 23410},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 622, col: 62, offset: 23413},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 622, col: 66, offset: 23417},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 622, col: 69, offset: 23420},
							label: "set2",
							expr: &ruleRefExpr{
								pos:  position{line: 622, col: 74, offset: 23425},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 622, col: 85, offset: 23436},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 622, col: 88, offset: 23439},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "MathLogExpression",
			pos:  position{line: 624, col: 1, offset: 23532},
			expr: &actionExpr{
				pos: position{line: 624, col: 22, offset: 23553},
				run: (*parser).callonMathLogExpression1,
				expr: &seqExpr{
					pos: position{line: 624, col: 22, offset: 23553},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 624, col: 22, offset: 23553},
							val:        "log",
							ignoreCase: true,
							want:       "\"LOG\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 624, col: 29, offset: 23560},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 624, col: 32, offset: 23563},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 624, col: 36, offset: 23567},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 624, col: 39, offset: 23570},
							label: "ex1",
							expr: &ruleRefExpr{
								pos:  position{line: 624, col: 43, offset: 23574},
								name: "SelectItem",
							},
						},
						&labeledExpr{
							pos:   position{line: 624, col: 54, offset: 23585},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 624, col: 61, offset: 23592},
								expr: &actionExpr{
									pos: position{line: 624, col: 62, offset: 23593},
									run: (*parser).callonMathLogExpression11,
									expr: &seqExpr{
										pos: position{line: 624, col: 62, offset: 23593},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 624, col: 62, offset: 23593},
												name: "ws",
											},
											&litMatcher{
												pos:        position{line: 624, col: 65, offset: 23596},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&ruleRefExpr{
												pos:  position{line: 624, col: 69, offset: 23600},
												name: "ws",
											},
											&labeledExpr{
												pos:   position{line: 624, col: 72, offset: 23603},
												label: "ex",
												expr: &ruleRefExpr{
													pos:  position{line: 624, col: 75, offset: 23606},
													name: "SelectItem",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 624, col: 107, offset: 23638},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 624, col: 110, offset: 23641},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "MathNumberBinExpression",
			pos:  position{line: 627, col: 1, offset: 23763},
			expr: &actionExpr{
				pos: position{line: 627, col: 28, offset: 23790},
				run: (*parser).callonMathNumberBinExpression1,
				expr: &seqExpr{
					pos: position{line: 627, col: 28, offset: 23790},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 627, col: 28, offset: 23790},
							val:        "numberbin",
							ignoreCase: true,
							want:       "\"NumberBin\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 627, col: 41, offset: 23803},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 627, col: 44, offset: 23806},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 627, col: 48, offset: 23810},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 627, col: 51, offset: 23813},
							label: "ex1",
							expr: &ruleRefExpr{
								pos:  position{line: 627, col: 55, offset: 23817},
								name: "SelectItem",
							},
						},
						&labeledExpr{
							pos:   position{line: 627, col: 66, offset: 23828},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 627, col: 73, offset: 23835},
								expr: &actionExpr{
									pos: position{line: 627, col: 74, offset: 23836},
									run: (*parser).callonMathNumberBinExpression11,
									expr: &seqExpr{
										pos: position{line: 627, col: 74, offset: 23836},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 627, col: 74, offset: 23836},
												name: "ws",
											},
											&litMatcher{
												pos:        position{line: 627, col: 77, offset: 23839},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&ruleRefExpr{
												pos:  position{line: 627, col: 81, offset: 23843},
												name: "ws",
											},
											&labeledExpr{
												pos:   position{line: 627, col: 84, offset: 23846},
												label: "ex",
												expr: &ruleRefExpr{
													pos:  position{line: 627, col: 87, offset: 23849},
													name: "SelectItem",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 627, col: 119, offset: 23881},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 627, col: 122, offset: 23884},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "MathPiExpression",
			pos:  position{line: 630, col: 1, offset: 24012},
			expr: &actionExpr{
				pos: position{line: 630, col: 21, offset: 24032},
				run: (*parser).callonMathPiExpression1,
				expr: &seqExpr{
					pos: position{line: 630, col: 21, offset: 24032},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 630, col: 21, offset: 24032},
							val:        "pi",
							ignoreCase: true,
							want:       "\"PI\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 630, col: 27, offset: 24038},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 630, col: 30, offset: 24041},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 630, col: 34, offset: 24045},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 630, col: 37, offset: 24048},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "MathRandExpression",
			pos:  position{line: 631, col: 1, offset: 24127},
			expr: &actionExpr{
				pos: position{line: 631, col: 23, offset: 24149},
				run: (*parser).callonMathRandExpression1,
				expr: &seqExpr{
					pos: position{line: 631, col: 23, offset: 24149},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 631, col: 23, offset: 24149},
							val:        "rand",
							ignoreCase: true,
							want:       "\"RAND\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 631, col: 31, offset: 24157},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 631, col: 34, offset: 24160},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 631, col: 38, offset: 24164},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 631, col: 41, offset: 24167},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "InFunction",
			pos:  position{line: 633, col: 1, offset: 24249},
			expr: &actionExpr{
				pos: position{line: 633, col: 15, offset: 24263},
				run: (*parser).callonInFunction1,
				expr: &seqExpr{
					pos: position{line: 633, col: 15, offset: 24263},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 633, col: 15, offset: 24263},
							label: "ex1",
							expr: &ruleRefExpr{
								pos:  position{line: 633, col: 19, offset: 24267},
								name: "SelectProperty",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 633, col: 34, offset: 24282},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 633, col: 37, offset: 24285},
							val:        "in",
							ignoreCase: true,
							want:       "\"IN\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 633, col: 43, offset: 24291},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 633, col: 46, offset: 24294},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 633, col: 50, offset: 24298},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 633, col: 53, offset: 24301},
							label: "ex2",
							expr: &ruleRefExpr{
								pos:  position{line: 633, col: 57, offset: 24305},
								name: "SelectItem",
							},
						},
						&labeledExpr{
							pos:   position{line: 633, col: 68, offset: 24316},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 633, col: 75, offset: 24323},
								expr: &actionExpr{
									pos: position{line: 633, col: 76, offset: 24324},
									run: (*parser).callonInFunction14,
									expr: &seqExpr{
										pos: position{line: 633, col: 76, offset: 24324},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 633, col: 76, offset: 24324},
												name: "ws",
											},
											&litMatcher{
												pos:        position{line: 633, col: 79, offset: 24327},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&ruleRefExpr{
												pos:  position{line: 633, col: 83, offset: 24331},
												name: "ws",
											},
											&labeledExpr{
												pos:   position{line: 633, col: 86, offset: 24334},
												label: "ex",
												expr: &ruleRefExpr{
													pos:  position{line: 633, col: 89, offset: 24337},
													name: "SelectItem",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 633, col: 121, offset: 24369},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 633, col: 124, offset: 24372},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "AvgAggregateExpression",
			pos:  position{line: 637, col: 1, offset: 24495},
			expr: &actionExpr{
				pos: position{line: 637, col: 29, offset: 24523},
				run: (*parser).callonAvgAggregateExpression1,
				expr: &seqExpr{
					pos: position{line: 637, col: 29, offset: 24523},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 637, col: 29, offset: 24523},
							val:        "avg",
							ignoreCase: true,
							want:       "\"AVG\"i",
						},
						&litMatcher{
							pos:        position{line: 637, col: 36, offset: 24530},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 637, col: 40, offset: 24534},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 637, col: 43, offset: 24537},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 637, col: 46, offset: 24540},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 637, col: 58, offset: 24552},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 637, col: 61, offset: 24555},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "CountAggregateExpression",
			pos:  position{line: 641, col: 1, offset: 24647},
			expr: &actionExpr{
				pos: position{line: 641, col: 29, offset: 24675},
				run: (*parser).callonCountAggregateExpression1,
				expr: &seqExpr{
					pos: position{line: 641, col: 29, offset: 24675},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 641, col: 29, offset: 24675},
							val:        "count",
							ignoreCase: true,
							want:       "\"COUNT\"i",
						},
						&litMatcher{
							pos:        position{line: 641, col: 38, offset: 24684},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 641, col: 42, offset: 24688},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 641, col: 45, offset: 24691},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 641, col: 48, offset: 24694},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 641, col: 59, offset: 24705},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 641, col: 62, offset: 24708},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "MaxAggregateExpression",
			pos:  position{line: 645, col: 1, offset: 24802},
			expr: &actionExpr{
				pos: position{line: 645, col: 29, offset: 24830},
				run: (*parser).callonMaxAggregateExpression1,
				expr: &seqExpr{
					pos: position{line: 645, col: 29, offset: 24830},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 645, col: 29, offset: 24830},
							val:        "max",
							ignoreCase: true,
							want:       "\"MAX\"i",
						},
						&litMatcher{
							pos:        position{line: 645, col: 36, offset: 24837},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 645, col: 40, offset: 24841},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 645, col: 43, offset: 24844},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 645, col: 46, offset: 24847},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 645, col: 57, offset: 24858},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 645, col: 60, offset: 24861},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "MinAggregateExpression",
			pos:  position{line: 649, col: 1, offset: 24953},
			expr: &actionExpr{
				pos: position{line: 649, col: 29, offset: 24981},
				run: (*parser).callonMinAggregateExpression1,
				expr: &seqExpr{
					pos: position{line: 649, col: 29, offset: 24981},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 649, col: 29, offset: 24981},
							val:        "min",
							ignoreCase: true,
							want:       "\"MIN\"i",
						},
						&litMatcher{
							pos:        position{line: 649, col: 36, offset: 24988},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 649, col: 40, offset: 24992},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 649, col: 43, offset: 24995},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 649, col: 46, offset: 24998},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 649, col: 57, offset: 25009},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 649, col: 60, offset: 25012},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "SumAggregateExpression",
			pos:  position{line: 653, col: 1, offset: 25104},
			expr: &actionExpr{
				pos: position{line: 653, col: 29, offset: 25132},
				run: (*parser).callonSumAggregateExpression1,
				expr: &seqExpr{
					pos: position{line: 653, col: 29, offset: 25132},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 653, col: 29, offset: 25132},
							val:        "sum",
							ignoreCase: true,
							want:       "\"SUM\"i",
						},
						&litMatcher{
							pos:        position{line: 653, col: 36, offset: 25139},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 653, col: 40, offset: 25143},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 653, col: 43, offset: 25146},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 653, col: 46, offset: 25149},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 653, col: 57, offset: 25160},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 653, col: 60, offset: 25163},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "Integer",
			pos:  position{line: 657, col: 1, offset: 25255},
			expr: &actionExpr{
				pos: position{line: 657, col: 12, offset: 25266},
				run: (*parser).callonInteger1,
				expr: &oneOrMoreExpr{
					pos: position{line: 657, col: 12, offset: 25266},
					expr: &charClassMatcher{
						pos:        position{line: 657, col: 12, offset: 25266},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "StringCharacter",
			pos:  position{line: 661, col: 1, offset: 25318},
			expr: &choiceExpr{
				pos: position{line: 661, col: 20, offset: 25337},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 661, col: 20, offset: 25337},
						run: (*parser).callonStringCharacter2,
						expr: &seqExpr{
							pos: position{line: 661, col: 20, offset: 25337},
							exprs: []any{
								&notExpr{
									pos: position{line: 661, col: 20, offset: 25337},
									expr: &choiceExpr{
										pos: position{line: 661, col: 22, offset: 25339},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 661, col: 22, offset: 25339},
												val:        "\"",
												ignoreCase: false,
												want:       "\"\\\"\"",
											},
											&litMatcher{
												pos:        position{line: 661, col: 28, offset: 25345},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
								&anyMatcher{
									line: 661, col: 34, offset: 25351,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 662, col: 5, offset: 25388},
						run: (*parser).callonStringCharacter9,
						expr: &seqExpr{
							pos: position{line: 662, col: 5, offset: 25388},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 662, col: 5, offset: 25388},
									val:        "\\",
									ignoreCase: false,
									want:       "\"\\\\\"",
								},
								&labeledExpr{
									pos:   position{line: 662, col: 10, offset: 25393},
									label: "seq",
									expr: &ruleRefExpr{
										pos:  position{line: 662, col: 14, offset: 25397},
										name: "EscapeSequenceCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapeSequenceCharacter",
			pos:  position{line: 664, col: 1, offset: 25442},
			expr: &labeledExpr{
				pos:   position{line: 664, col: 28, offset: 25469},
				label: "char",
				expr: &ruleRefExpr{
					pos:  position{line: 664, col: 33, offset: 25474},
					name: "EscapeCharacter",
				},
			},
		},
		{
			name: "EscapeCharacter",
			pos:  position{line: 666, col: 1, offset: 25491},
			expr: &choiceExpr{
				pos: position{line: 666, col: 20, offset: 25510},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 666, col: 20, offset: 25510},
						val:        "'",
						ignoreCase: false,
						want:       "\"'\"",
					},
					&litMatcher{
						pos:        position{line: 667, col: 5, offset: 25518},
						val:        "\"",
						ignoreCase: false,
						want:       "\"\\\"\"",
					},
					&litMatcher{
						pos:        position{line: 668, col: 5, offset: 25526},
						val:        "\\",
						ignoreCase: false,
						want:       "\"\\\\\"",
					},
					&actionExpr{
						pos: position{line: 669, col: 5, offset: 25535},
						run: (*parser).callonEscapeCharacter5,
						expr: &litMatcher{
							pos:        position{line: 669, col: 5, offset: 25535},
							val:        "b",
							ignoreCase: false,
							want:       "\"b\"",
						},
					},
					&actionExpr{
						pos: position{line: 670, col: 5, offset: 25564},
						run: (*parser).callonEscapeCharacter7,
						expr: &litMatcher{
							pos:        position{line: 670, col: 5, offset: 25564},
							val:        "f",
							ignoreCase: false,
							want:       "\"f\"",
						},
					},
					&actionExpr{
						pos: position{line: 671, col: 5, offset: 25593},
						run: (*parser).callonEscapeCharacter9,
						expr: &litMatcher{
							pos:        position{line: 671, col: 5, offset: 25593},
							val:        "n",
							ignoreCase: false,
							want:       "\"n\"",
						},
					},
					&actionExpr{
						pos: position{line: 672, col: 5, offset: 25622},
						run: (*parser).callonEscapeCharacter11,
						expr: &litMatcher{
							pos:        position{line: 672, col: 5, offset: 25622},
							val:        "r",
							ignoreCase: false,
							want:       "\"r\"",
						},
					},
					&actionExpr{
						pos: position{line: 673, col: 5, offset: 25651},
						run: (*parser).callonEscapeCharacter13,
						expr: &litMatcher{
							pos:        position{line: 673, col: 5, offset: 25651},
							val:        "t",
							ignoreCase: false,
							want:       "\"t\"",
						},
					},
				},
			},
		},
		{
			name: "non_escape_character",
			pos:  position{line: 675, col: 1, offset: 25677},
			expr: &actionExpr{
				pos: position{line: 675, col: 25, offset: 25701},
				run: (*parser).callonnon_escape_character1,
				expr: &seqExpr{
					pos: position{line: 675, col: 25, offset: 25701},
					exprs: []any{
						&notExpr{
							pos: position{line: 675, col: 25, offset: 25701},
							expr: &ruleRefExpr{
								pos:  position{line: 675, col: 27, offset: 25703},
								name: "escape_character",
							},
						},
						&labeledExpr{
							pos:   position{line: 675, col: 45, offset: 25721},
							label: "char",
							expr: &anyMatcher{
								line: 675, col: 50, offset: 25726,
							},
						},
					},
				},
			},
		},
		{
			name: "ws",
			pos:  position{line: 678, col: 1, offset: 25765},
			expr: &zeroOrMoreExpr{
				pos: position{line: 678, col: 7, offset: 25771},
				expr: &charClassMatcher{
					pos:        position{line: 678, col: 7, offset: 25771},
					val:        "[ \\t\\n\\r]",
					chars:      []rune{' ', '\t', '\n', '\r'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 680, col: 1, offset: 25783},
			expr: &notExpr{
				pos: position{line: 680, col: 8, offset: 25790},
				expr: &anyMatcher{
					line: 680, col: 9, offset: 25791,
				},
			},
		},
	},
}

func (c *current) onInput1(selectStmt any) (any, error) {
	return selectStmt, nil
}

func (p *parser) callonInput1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInput1(stack["selectStmt"])
}

func (c *current) onSelectStmt27(condition any) (any, error) {
	return condition, nil
}

func (p *parser) callonSelectStmt27() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectStmt27(stack["condition"])
}

func (c *current) onSelectStmt36(columns any) (any, error) {
	return columns, nil
}

func (p *parser) callonSelectStmt36() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectStmt36(stack["columns"])
}

func (c *current) onSelectStmt1(distinctClause, topClause, columns, table, joinClauses, whereClause, groupByClause, orderByClause, offsetClause any) (any, error) {
	return makeSelectStmt(columns, table, joinClauses, whereClause,
		distinctClause, topClause, groupByClause, orderByClause, offsetClause)
}

func (p *parser) callonSelectStmt1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectStmt1(stack["distinctClause"], stack["topClause"], stack["columns"], stack["table"], stack["joinClauses"], stack["whereClause"], stack["groupByClause"], stack["orderByClause"], stack["offsetClause"])
}

func (c *current) onTopClause1(count any) (any, error) {
	return count, nil
}

func (p *parser) callonTopClause1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopClause1(stack["count"])
}

func (c *current) onJoinClause1(table, column any) (any, error) {
	return makeJoin(table, column)
}

func (p *parser) callonJoinClause1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinClause1(stack["table"], stack["column"])
}

func (c *current) onOffsetClause1(offset, limit any) (any, error) {
	return []interface{}{offset.(parsers.Constant).Value, limit.(parsers.Constant).Value}, nil
}

func (p *parser) callonOffsetClause1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOffsetClause1(stack["offset"], stack["limit"])
}

func (c *current) onSelectAsterisk1() (any, error) {
	selectItem, _ := makeSelectItem("c", make([]interface{}, 0), parsers.SelectItemTypeField)
	selectItem.IsTopLevel = true
	return makeColumnList(selectItem, make([]interface{}, 0))
}

func (p *parser) callonSelectAsterisk1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectAsterisk1()
}

func (c *current) onColumnList7(coll any) (any, error) {
	return coll, nil
}

func (p *parser) callonColumnList7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onColumnList7(stack["coll"])
}

func (c *current) onColumnList1(column, other_columns any) (any, error) {
	return makeColumnList(column, other_columns)
}

func (p *parser) callonColumnList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onColumnList1(stack["column"], stack["other_columns"])
}

func (c *current) onSelectValueSpec1(column any) (any, error) {
	selectItem := column.(parsers.SelectItem)
	selectItem.IsTopLevel = true
	return makeColumnList(selectItem, make([]interface{}, 0))
}

func (p *parser) callonSelectValueSpec1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectValueSpec1(stack["column"])
}

func (c *current) onTableName1(key any) (any, error) {
	return parsers.Table{Value: key.(string)}, nil
}

func (p *parser) callonTableName1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableName1(stack["key"])
}

func (c *current) onSelectArray1(columns any) (any, error) {
	return makeSelectArray(columns)
}

func (p *parser) callonSelectArray1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectArray1(stack["columns"])
}

func (c *current) onSelectObject10(coll any) (any, error) {
	return coll, nil
}

func (p *parser) callonSelectObject10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectObject10(stack["coll"])
}

func (c *current) onSelectObject1(field, other_fields any) (any, error) {
	return makeSelectObject(field, other_fields)
}

func (p *parser) callonSelectObject1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectObject1(stack["field"], stack["other_fields"])
}

func (c *current) onSelectObjectField6(key any) (any, error) {
	return key, nil
}

func (p *parser) callonSelectObjectField6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectObjectField6(stack["key"])
}

func (c *current) onSelectObjectField1(name, selectItem any) (any, error) {
	item := selectItem.(parsers.SelectItem)
	item.Alias = name.(string)
	return item, nil
}

func (p *parser) callonSelectObjectField1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectObjectField1(stack["name"], stack["selectItem"])
}

func (c *current) onSelectProperty1(name, path any) (any, error) {
	return makeSelectItem(name, path, parsers.SelectItemTypeField)
}

func (p *parser) callonSelectProperty1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectProperty1(stack["name"], stack["path"])
}

func (c *current) onSelectItem1(selectItem, asClause any) (any, error) {
	var itemResult parsers.SelectItem
	switch typedValue := selectItem.(type) {
	case parsers.SelectItem:
		itemResult = typedValue
	case parsers.Constant:
		itemResult = parsers.SelectItem{
			Type:  parsers.SelectItemTypeConstant,
			Value: typedValue,
		}
	case parsers.FunctionCall:
		itemResult = parsers.SelectItem{
			Type:  parsers.SelectItemTypeFunctionCall,
			Value: typedValue,
		}
	}

	if aliasValue, ok := asClause.(string); ok {
		itemResult.Alias = aliasValue
	}

	return itemResult, nil
}

func (p *parser) callonSelectItem1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectItem1(stack["selectItem"], stack["asClause"])
}

func (c *current) onAsClause1(alias any) (any, error) {
	return alias, nil
}

func (p *parser) callonAsClause1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsClause1(stack["alias"])
}

func (c *current) onDotFieldAccess1(id any) (any, error) {
	return id, nil
}

func (p *parser) callonDotFieldAccess1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDotFieldAccess1(stack["id"])
}

func (c *current) onArrayFieldAccess2(id any) (any, error) {
	return id, nil
}

func (p *parser) callonArrayFieldAccess2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArrayFieldAccess2(stack["id"])
}

func (c *current) onArrayFieldAccess8(id any) (any, error) {
	return strconv.Itoa(id.(int)), nil
}

func (p *parser) callonArrayFieldAccess8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArrayFieldAccess8(stack["id"])
}

func (c *current) onIdentifier1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifier1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier1()
}

func (c *current) onCondition1(expression any) (any, error) {
	return expression, nil
}

func (p *parser) callonCondition1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCondition1(stack["expression"])
}

func (c *current) onOrExpression7(ex any) (any, error) {
	return ex, nil
}

func (p *parser) callonOrExpression7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrExpression7(stack["ex"])
}

func (c *current) onOrExpression1(ex1, ex2 any) (any, error) {
	return combineExpressions(ex1, ex2, parsers.LogicalExpressionTypeOr)
}

func (p *parser) callonOrExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrExpression1(stack["ex1"], stack["ex2"])
}

func (c *current) onAndExpression7(ex any) (any, error) {
	return ex, nil
}

func (p *parser) callonAndExpression7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAndExpression7(stack["ex"])
}

func (c *current) onAndExpression1(ex1, ex2 any) (any, error) {
	return combineExpressions(ex1, ex2, parsers.LogicalExpressionTypeAnd)
}

func (p *parser) callonAndExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAndExpression1(stack["ex1"], stack["ex2"])
}

func (c *current) onComparisonExpression2(ex any) (any, error) {
	return ex, nil
}

func (p *parser) callonComparisonExpression2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparisonExpression2(stack["ex"])
}

func (c *current) onComparisonExpression10(left, op, right any) (any, error) {
	return parsers.ComparisonExpression{Left: left, Right: right, Operation: op.(string)}, nil
}

func (p *parser) callonComparisonExpression10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparisonExpression10(stack["left"], stack["op"], stack["right"])
}

func (c *current) onComparisonExpression20(ex any) (any, error) {
	return ex, nil
}

func (p *parser) callonComparisonExpression20() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparisonExpression20(stack["ex"])
}

func (c *current) onComparisonExpression23(ex any) (any, error) {
	return ex, nil
}

func (p *parser) callonComparisonExpression23() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparisonExpression23(stack["ex"])
}

func (c *current) onOrderByClause9(ex any) (any, error) {
	return ex, nil
}

func (p *parser) callonOrderByClause9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderByClause9(stack["ex"])
}

func (c *current) onOrderByClause1(ex1, others any) (any, error) {
	return makeOrderByClause(ex1, others)
}

func (p *parser) callonOrderByClause1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderByClause1(stack["ex1"], stack["others"])
}

func (c *current) onOrderExpression1(field, order any) (any, error) {
	return makeOrderExpression(field, order)
}

func (p *parser) callonOrderExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderExpression1(stack["field"], stack["order"])
}

func (c *current) onOrderDirection1() (any, error) {
	if strings.EqualFold(string(c.text), "DESC") {
		return parsers.OrderDirectionDesc, nil
	}

	return parsers.OrderDirectionAsc, nil
}

func (p *parser) callonOrderDirection1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderDirection1()
}

func (c *current) onComparisonOperator1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonComparisonOperator1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparisonOperator1()
}

func (c *current) onParameterConstant1() (any, error) {
	return parsers.Constant{Type: parsers.ConstantTypeParameterConstant, Value: string(c.text)}, nil
}

func (p *parser) callonParameterConstant1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParameterConstant1()
}

func (c *current) onNullConstant1() (any, error) {
	return parsers.Constant{Value: nil}, nil
}

func (p *parser) callonNullConstant1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNullConstant1()
}

func (c *current) onIntegerLiteral1(number any) (any, error) {
	return parsers.Constant{Type: parsers.ConstantTypeInteger, Value: number.(int)}, nil
}

func (p *parser) callonIntegerLiteral1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntegerLiteral1(stack["number"])
}

func (c *current) onStringLiteral1(chars any) (any, error) {
	return parsers.Constant{Type: parsers.ConstantTypeString, Value: joinStrings(chars.([]interface{}))}, nil
}

func (p *parser) callonStringLiteral1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringLiteral1(stack["chars"])
}

func (c *current) onFloatLiteral1() (any, error) {
	floatValue, _ := strconv.ParseFloat(string(c.text), 64)
	return parsers.Constant{Type: parsers.ConstantTypeFloat, Value: floatValue}, nil
}

func (p *parser) callonFloatLiteral1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatLiteral1()
}

func (c *current) onBooleanLiteral1() (any, error) {
	boolValue, _ := strconv.ParseBool(string(c.text))
	return parsers.Constant{Type: parsers.ConstantTypeBoolean, Value: boolValue}, nil
}

func (p *parser) callonBooleanLiteral1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral1()
}

func (c *current) onUpperExpression1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallUpper, []interface{}{ex})
}

func (p *parser) callonUpperExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUpperExpression1(stack["ex"])
}

func (c *current) onLowerExpression1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallLower, []interface{}{ex})
}

func (p *parser) callonLowerExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLowerExpression1(stack["ex"])
}

func (c *current) onStringEqualsExpression17(boolean any) (any, error) {
	return boolean, nil
}

func (p *parser) callonStringEqualsExpression17() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringEqualsExpression17(stack["boolean"])
}

func (c *current) onStringEqualsExpression1(ex1, ex2, ignoreCase any) (any, error) {
	return createFunctionCall(parsers.FunctionCallStringEquals, []interface{}{ex1, ex2, ignoreCase})
}

func (p *parser) callonStringEqualsExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringEqualsExpression1(stack["ex1"], stack["ex2"], stack["ignoreCase"])
}

func (c *current) onToStringExpression1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallToString, []interface{}{ex})
}

func (p *parser) callonToStringExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onToStringExpression1(stack["ex"])
}

func (c *current) onConcatExpression11(ex any) (any, error) {
	return ex, nil
}

func (p *parser) callonConcatExpression11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcatExpression11(stack["ex"])
}

func (c *current) onConcatExpression1(ex1, others any) (any, error) {
	arguments := append([]interface{}{ex1}, others.([]interface{})...)
	return createFunctionCall(parsers.FunctionCallConcat, arguments)
}

func (p *parser) callonConcatExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcatExpression1(stack["ex1"], stack["others"])
}

func (c *current) onLeftExpression1(ex, length any) (any, error) {
	return createFunctionCall(parsers.FunctionCallLeft, []interface{}{ex, length})
}

func (p *parser) callonLeftExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLeftExpression1(stack["ex"], stack["length"])
}

func (c *current) onLengthExpression1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallLength, []interface{}{ex})
}

func (p *parser) callonLengthExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLengthExpression1(stack["ex"])
}

func (c *current) onLTrimExpression1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallLTrim, []interface{}{ex})
}

func (p *parser) callonLTrimExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLTrimExpression1(stack["ex"])
}

func (c *current) onReplaceExpression1(ex1, ex2, ex3 any) (any, error) {
	return createFunctionCall(parsers.FunctionCallReplace, []interface{}{ex1, ex2, ex3})
}

func (p *parser) callonReplaceExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplaceExpression1(stack["ex1"], stack["ex2"], stack["ex3"])
}

func (c *current) onReplicateExpression1(ex1, ex2 any) (any, error) {
	return createFunctionCall(parsers.FunctionCallReplicate, []interface{}{ex1, ex2})
}

func (p *parser) callonReplicateExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplicateExpression1(stack["ex1"], stack["ex2"])
}

func (c *current) onReverseExpression1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallReverse, []interface{}{ex})
}

func (p *parser) callonReverseExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReverseExpression1(stack["ex"])
}

func (c *current) onRightExpression1(ex, length any) (any, error) {
	return createFunctionCall(parsers.FunctionCallRight, []interface{}{ex, length})
}

func (p *parser) callonRightExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRightExpression1(stack["ex"], stack["length"])
}

func (c *current) onRTrimExpression1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallRTrim, []interface{}{ex})
}

func (p *parser) callonRTrimExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRTrimExpression1(stack["ex"])
}

func (c *current) onSubstringExpression1(ex, startPos, length any) (any, error) {
	return createFunctionCall(parsers.FunctionCallSubstring, []interface{}{ex, startPos, length})
}

func (p *parser) callonSubstringExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstringExpression1(stack["ex"], stack["startPos"], stack["length"])
}

func (c *current) onTrimExpression1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallTrim, []interface{}{ex})
}

func (p *parser) callonTrimExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTrimExpression1(stack["ex"])
}

func (c *current) onThreeArgumentStringFunctionExpression18(boolean any) (any, error) {
	return boolean, nil
}

func (p *parser) callonThreeArgumentStringFunctionExpression18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onThreeArgumentStringFunctionExpression18(stack["boolean"])
}

func (c *current) onThreeArgumentStringFunctionExpression1(function, ex1, ex2, ignoreCase any) (any, error) {
	var functionType parsers.FunctionCallType

	lowerFunction := strings.ToUpper(function.(string))
	switch lowerFunction {
	case "CONTAINS":
		functionType = parsers.FunctionCallContains
	case "ENDSWITH":
		functionType = parsers.FunctionCallEndsWith
	case "STARTSWITH":
		functionType = parsers.FunctionCallStartsWith
	case "INDEX_OF":
		functionType = parsers.FunctionCallIndexOf
	}

	return createFunctionCall(functionType, []interface{}{ex1, ex2, ignoreCase})
}

func (p *parser) callonThreeArgumentStringFunctionExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onThreeArgumentStringFunctionExpression1(stack["function"], stack["ex1"], stack["ex2"], stack["ignoreCase"])
}

func (c *current) onThreeArgumentStringFunction1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonThreeArgumentStringFunction1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onThreeArgumentStringFunction1()
}

func (c *current) onIsDefined1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallIsDefined, []interface{}{ex})
}

func (p *parser) callonIsDefined1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIsDefined1(stack["ex"])
}

func (c *current) onIsArray1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallIsArray, []interface{}{ex})
}

func (p *parser) callonIsArray1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIsArray1(stack["ex"])
}

func (c *current) onIsBool1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallIsBool, []interface{}{ex})
}

func (p *parser) callonIsBool1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIsBool1(stack["ex"])
}

func (c *current) onIsFiniteNumber1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallIsFiniteNumber, []interface{}{ex})
}

func (p *parser) callonIsFiniteNumber1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIsFiniteNumber1(stack["ex"])
}

func (c *current) onIsInteger1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallIsInteger, []interface{}{ex})
}

func (p *parser) callonIsInteger1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIsInteger1(stack["ex"])
}

func (c *current) onIsNull1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallIsNull, []interface{}{ex})
}

func (p *parser) callonIsNull1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIsNull1(stack["ex"])
}

func (c *current) onIsNumber1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallIsNumber, []interface{}{ex})
}

func (p *parser) callonIsNumber1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIsNumber1(stack["ex"])
}

func (c *current) onIsObject1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallIsObject, []interface{}{ex})
}

func (p *parser) callonIsObject1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIsObject1(stack["ex"])
}

func (c *current) onIsPrimitive1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallIsPrimitive, []interface{}{ex})
}

func (p *parser) callonIsPrimitive1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIsPrimitive1(stack["ex"])
}

func (c *current) onIsString1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallIsString, []interface{}{ex})
}

func (p *parser) callonIsString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIsString1(stack["ex"])
}

func (c *current) onArrayConcatExpression11(ex any) (any, error) {
	return ex, nil
}

func (p *parser) callonArrayConcatExpression11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArrayConcatExpression11(stack["ex"])
}

func (c *current) onArrayConcatExpression1(arrays, others any) (any, error) {
	return createFunctionCall(parsers.FunctionCallArrayConcat, append([]interface{}{arrays}, others.([]interface{})...))
}

func (p *parser) callonArrayConcatExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArrayConcatExpression1(stack["arrays"], stack["others"])
}

func (c *current) onArrayLengthExpression1(array any) (any, error) {
	return createFunctionCall(parsers.FunctionCallArrayLength, []interface{}{array})
}

func (p *parser) callonArrayLengthExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArrayLengthExpression1(stack["array"])
}

func (c *current) onArraySliceExpression16(ex any) (any, error) {
	return ex, nil
}

func (p *parser) callonArraySliceExpression16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArraySliceExpression16(stack["ex"])
}

func (c *current) onArraySliceExpression1(array, start, length any) (any, error) {
	return createFunctionCall(parsers.FunctionCallArraySlice, []interface{}{array, start, length})
}

func (p *parser) callonArraySliceExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArraySliceExpression1(stack["array"], stack["start"], stack["length"])
}

func (c *current) onSetIntersectExpression1(set1, set2 any) (any, error) {
	return createFunctionCall(parsers.FunctionCallSetIntersect, []interface{}{set1, set2})
}

func (p *parser) callonSetIntersectExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSetIntersectExpression1(stack["set1"], stack["set2"])
}

func (c *current) onSetUnionExpression1(set1, set2 any) (any, error) {
	return createFunctionCall(parsers.FunctionCallSetUnion, []interface{}{set1, set2})
}

func (p *parser) callonSetUnionExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSetUnionExpression1(stack["set1"], stack["set2"])
}

func (c *current) onMathAbsExpression1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallMathAbs, []interface{}{ex})
}

func (p *parser) callonMathAbsExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMathAbsExpression1(stack["ex"])
}

func (c *current) onMathAcosExpression1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallMathAcos, []interface{}{ex})
}

func (p *parser) callonMathAcosExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMathAcosExpression1(stack["ex"])
}

func (c *current) onMathAsinExpression1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallMathAsin, []interface{}{ex})
}

func (p *parser) callonMathAsinExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMathAsinExpression1(stack["ex"])
}

func (c *current) onMathAtanExpression1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallMathAtan, []interface{}{ex})
}

func (p *parser) callonMathAtanExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMathAtanExpression1(stack["ex"])
}

func (c *current) onMathCeilingExpression1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallMathCeiling, []interface{}{ex})
}

func (p *parser) callonMathCeilingExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMathCeilingExpression1(stack["ex"])
}

func (c *current) onMathCosExpression1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallMathCos, []interface{}{ex})
}

func (p *parser) callonMathCosExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMathCosExpression1(stack["ex"])
}

func (c *current) onMathCotExpression1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallMathCot, []interface{}{ex})
}

func (p *parser) callonMathCotExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMathCotExpression1(stack["ex"])
}

func (c *current) onMathDegreesExpression1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallMathDegrees, []interface{}{ex})
}

func (p *parser) callonMathDegreesExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMathDegreesExpression1(stack["ex"])
}

func (c *current) onMathExpExpression1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallMathExp, []interface{}{ex})
}

func (p *parser) callonMathExpExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMathExpExpression1(stack["ex"])
}

func (c *current) onMathFloorExpression1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallMathFloor, []interface{}{ex})
}

func (p *parser) callonMathFloorExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMathFloorExpression1(stack["ex"])
}

func (c *current) onMathIntBitNotExpression1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallMathIntBitNot, []interface{}{ex})
}

func (p *parser) callonMathIntBitNotExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMathIntBitNotExpression1(stack["ex"])
}

func (c *current) onMathLog10Expression1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallMathLog10, []interface{}{ex})
}

func (p *parser) callonMathLog10Expression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMathLog10Expression1(stack["ex"])
}

func (c *current) onMathRadiansExpression1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallMathRadians, []interface{}{ex})
}

func (p *parser) callonMathRadiansExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMathRadiansExpression1(stack["ex"])
}

func (c *current) onMathRoundExpression1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallMathRound, []interface{}{ex})
}

func (p *parser) callonMathRoundExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMathRoundExpression1(stack["ex"])
}

func (c *current) onMathSignExpression1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallMathSign, []interface{}{ex})
}

func (p *parser) callonMathSignExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMathSignExpression1(stack["ex"])
}

func (c *current) onMathSinExpression1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallMathSin, []interface{}{ex})
}

func (p *parser) callonMathSinExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMathSinExpression1(stack["ex"])
}

func (c *current) onMathSqrtExpression1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallMathSqrt, []interface{}{ex})
}

func (p *parser) callonMathSqrtExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMathSqrtExpression1(stack["ex"])
}

func (c *current) onMathSquareExpression1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallMathSquare, []interface{}{ex})
}

func (p *parser) callonMathSquareExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMathSquareExpression1(stack["ex"])
}

func (c *current) onMathTanExpression1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallMathTan, []interface{}{ex})
}

func (p *parser) callonMathTanExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMathTanExpression1(stack["ex"])
}

func (c *current) onMathTruncExpression1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallMathTrunc, []interface{}{ex})
}

func (p *parser) callonMathTruncExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMathTruncExpression1(stack["ex"])
}

func (c *current) onMathAtn2Expression1(set1, set2 any) (any, error) {
	return createFunctionCall(parsers.FunctionCallMathAtn2, []interface{}{set1, set2})
}

func (p *parser) callonMathAtn2Expression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMathAtn2Expression1(stack["set1"], stack["set2"])
}

func (c *current) onMathIntAddExpression1(set1, set2 any) (any, error) {
	return createFunctionCall(parsers.FunctionCallMathIntAdd, []interface{}{set1, set2})
}

func (p *parser) callonMathIntAddExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMathIntAddExpression1(stack["set1"], stack["set2"])
}

func (c *current) onMathIntBitAndExpression1(set1, set2 any) (any, error) {
	return createFunctionCall(parsers.FunctionCallMathIntBitAnd, []interface{}{set1, set2})
}

func (p *parser) callonMathIntBitAndExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMathIntBitAndExpression1(stack["set1"], stack["set2"])
}

func (c *current) onMathIntBitLeftShiftExpression1(set1, set2 any) (any, error) {
	return createFunctionCall(parsers.FunctionCallMathIntBitLeftShift, []interface{}{set1, set2})
}

func (p *parser) callonMathIntBitLeftShiftExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMathIntBitLeftShiftExpression1(stack["set1"], stack["set2"])
}

func (c *current) onMathIntBitOrExpression1(set1, set2 any) (any, error) {
	return createFunctionCall(parsers.FunctionCallMathIntBitOr, []interface{}{set1, set2})
}

func (p *parser) callonMathIntBitOrExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMathIntBitOrExpression1(stack["set1"], stack["set2"])
}

func (c *current) onMathIntBitRightShiftExpression1(set1, set2 any) (any, error) {
	return createFunctionCall(parsers.FunctionCallMathIntBitRightShift, []interface{}{set1, set2})
}

func (p *parser) callonMathIntBitRightShiftExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMathIntBitRightShiftExpression1(stack["set1"], stack["set2"])
}

func (c *current) onMathIntBitXorExpression1(set1, set2 any) (any, error) {
	return createFunctionCall(parsers.FunctionCallMathIntBitXor, []interface{}{set1, set2})
}

func (p *parser) callonMathIntBitXorExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMathIntBitXorExpression1(stack["set1"], stack["set2"])
}

func (c *current) onMathIntDivExpression1(set1, set2 any) (any, error) {
	return createFunctionCall(parsers.FunctionCallMathIntDiv, []interface{}{set1, set2})
}

func (p *parser) callonMathIntDivExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMathIntDivExpression1(stack["set1"], stack["set2"])
}

func (c *current) onMathIntModExpression1(set1, set2 any) (any, error) {
	return createFunctionCall(parsers.FunctionCallMathIntMod, []interface{}{set1, set2})
}

func (p *parser) callonMathIntModExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMathIntModExpression1(stack["set1"], stack["set2"])
}

func (c *current) onMathIntMulExpression1(set1, set2 any) (any, error) {
	return createFunctionCall(parsers.FunctionCallMathIntMul, []interface{}{set1, set2})
}

func (p *parser) callonMathIntMulExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMathIntMulExpression1(stack["set1"], stack["set2"])
}

func (c *current) onMathIntSubExpression1(set1, set2 any) (any, error) {
	return createFunctionCall(parsers.FunctionCallMathIntSub, []interface{}{set1, set2})
}

func (p *parser) callonMathIntSubExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMathIntSubExpression1(stack["set1"], stack["set2"])
}

func (c *current) onMathPowerExpression1(set1, set2 any) (any, error) {
	return createFunctionCall(parsers.FunctionCallMathPower, []interface{}{set1, set2})
}

func (p *parser) callonMathPowerExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMathPowerExpression1(stack["set1"], stack["set2"])
}

func (c *current) onMathLogExpression11(ex any) (any, error) {
	return ex, nil
}

func (p *parser) callonMathLogExpression11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMathLogExpression11(stack["ex"])
}

func (c *current) onMathLogExpression1(ex1, others any) (any, error) {
	return createFunctionCall(parsers.FunctionCallMathLog, append([]interface{}{ex1}, others.([]interface{})...))
}

func (p *parser) callonMathLogExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMathLogExpression1(stack["ex1"], stack["others"])
}

func (c *current) onMathNumberBinExpression11(ex any) (any, error) {
	return ex, nil
}

func (p *parser) callonMathNumberBinExpression11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMathNumberBinExpression11(stack["ex"])
}

func (c *current) onMathNumberBinExpression1(ex1, others any) (any, error) {
	return createFunctionCall(parsers.FunctionCallMathNumberBin, append([]interface{}{ex1}, others.([]interface{})...))
}

func (p *parser) callonMathNumberBinExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMathNumberBinExpression1(stack["ex1"], stack["others"])
}

func (c *current) onMathPiExpression1() (any, error) {
	return createFunctionCall(parsers.FunctionCallMathPi, []interface{}{})
}

func (p *parser) callonMathPiExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMathPiExpression1()
}

func (c *current) onMathRandExpression1() (any, error) {
	return createFunctionCall(parsers.FunctionCallMathRand, []interface{}{})
}

func (p *parser) callonMathRandExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMathRandExpression1()
}

func (c *current) onInFunction14(ex any) (any, error) {
	return ex, nil
}

func (p *parser) callonInFunction14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInFunction14(stack["ex"])
}

func (c *current) onInFunction1(ex1, ex2, others any) (any, error) {
	return createFunctionCall(parsers.FunctionCallIn, append([]interface{}{ex1, ex2}, others.([]interface{})...))
}

func (p *parser) callonInFunction1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInFunction1(stack["ex1"], stack["ex2"], stack["others"])
}

func (c *current) onAvgAggregateExpression1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallAggregateAvg, []interface{}{ex})
}

func (p *parser) callonAvgAggregateExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAvgAggregateExpression1(stack["ex"])
}

func (c *current) onCountAggregateExpression1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallAggregateCount, []interface{}{ex})
}

func (p *parser) callonCountAggregateExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCountAggregateExpression1(stack["ex"])
}

func (c *current) onMaxAggregateExpression1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallAggregateMax, []interface{}{ex})
}

func (p *parser) callonMaxAggregateExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMaxAggregateExpression1(stack["ex"])
}

func (c *current) onMinAggregateExpression1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallAggregateMin, []interface{}{ex})
}

func (p *parser) callonMinAggregateExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMinAggregateExpression1(stack["ex"])
}

func (c *current) onSumAggregateExpression1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallAggregateSum, []interface{}{ex})
}

func (p *parser) callonSumAggregateExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSumAggregateExpression1(stack["ex"])
}

func (c *current) onInteger1() (any, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonInteger1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInteger1()
}

func (c *current) onStringCharacter2() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonStringCharacter2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringCharacter2()
}

func (c *current) onStringCharacter9(seq any) (any, error) {
	return seq, nil
}

func (p *parser) callonStringCharacter9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringCharacter9(stack["seq"])
}

func (c *current) onEscapeCharacter5() (any, error) {
	return "\b", nil
}

func (p *parser) callonEscapeCharacter5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapeCharacter5()
}

func (c *current) onEscapeCharacter7() (any, error) {
	return "\f", nil
}

func (p *parser) callonEscapeCharacter7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapeCharacter7()
}

func (c *current) onEscapeCharacter9() (any, error) {
	return "\n", nil
}

func (p *parser) callonEscapeCharacter9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapeCharacter9()
}

func (c *current) onEscapeCharacter11() (any, error) {
	return "\r", nil
}

func (p *parser) callonEscapeCharacter11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapeCharacter11()
}

func (c *current) onEscapeCharacter13() (any, error) {
	return "\t", nil
}

func (p *parser) callonEscapeCharacter13() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapeCharacter13()
}

func (c *current) onnon_escape_character1(char any) (any, error) {
	return string(c.text), nil
}

func (p *parser) callonnon_escape_character1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnon_escape_character1(stack["char"])
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//	input := "input"
//	stats := Stats{}
//	_, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//	if err != nil {
//	    log.Panicln(err)
//	}
//	b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//	if err != nil {
//	    log.Panicln(err)
//	}
//	fmt.Println(string(b))
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i any, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (any, error) {
	b, err := io.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (any, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]any

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        any
}

type choiceExpr struct {
	pos          position
	alternatives []any
}

type actionExpr struct {
	pos  position
	expr any
	run  func(*parser) (any, error)
}

type recoveryExpr struct {
	pos          position
	expr         any
	recoverExpr  any
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []any
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  any
}

type expr struct {
	pos  position
	expr any
}

type (
	andExpr        expr
	notExpr        expr
	zeroOrOneExpr  expr
	zeroOrMoreExpr expr
	oneOrMoreExpr  expr
)

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   any
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[any]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]any
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]any
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]any)
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr any) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]any, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) printIndent(mark string, s string) string {
	return p.print(strings.Repeat(" ", p.depth)+mark, s)
}

func (p *parser) in(s string) string {
	res := p.printIndent(">", s)
	p.depth++
	return res
}

func (p *parser) out(s string) string {
	p.depth--
	return p.printIndent("<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() any
}

var statePool = &sync.Pool{
	New: func() any { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node any) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node any, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[any]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[any]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val any, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRuleWrap(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRuleMemoize(rule *rule) (any, bool) {
	res, ok := p.getMemoized(rule)
	if ok {
		p.restore(res.end)
		return res.v, res.b
	}

	startMark := p.pt
	val, ok := p.parseRule(rule)
	p.setMemoized(startMark, rule, resultTuple{val, ok, p.pt})

	return val, ok
}

func (p *parser) parseRuleWrap(rule *rule) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}
	var (
		val       any
		ok        bool
		startMark = p.pt
	)

	if p.memoize {
		val, ok = p.parseRuleMemoize(rule)
	} else {
		val, ok = p.parseRule(rule)
	}

	if ok && p.debug {
		p.printIndent("MATCH", string(p.sliceFrom(startMark)))
	}
	return val, ok
}

func (p *parser) parseRule(rule *rule) (any, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExprWrap(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExprWrap(expr any) (any, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	val, ok := p.parseExpr(expr)

	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr any) (any, bool) {
	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val any
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExprWrap(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.printIndent("MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExprWrap(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExprWrap(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExprWrap(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExprWrap(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExprWrap(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRuleWrap(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]any, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExprWrap(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExprWrap(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExprWrap(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
